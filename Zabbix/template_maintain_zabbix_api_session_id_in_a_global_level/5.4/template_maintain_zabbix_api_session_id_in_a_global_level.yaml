zabbix_export:
  version: '5.4'
  date: '2021-11-09T05:10:52Z'
  groups:
    -
      uuid: 57b7ae836ca64446ba2c296389c009b7
      name: Templates/Modules
  templates:
    -
      uuid: c99da22047004e9bb10166e77ffffa3e
      template: 'Check if Zabbix session key is valid via API'
      name: 'Check if Zabbix session key is valid via API'
      description: |
        ## Description
        
        To use template create new user 'api' and set user type 'Zabbix Super Admin'. Setup global macros: {$Z_API_USER} {$Z_API_PASSWORD} {$Z_API_PHP} {$Z_API_SESSIONID} for example: {$Z_API_USER} = 'api' {$Z_API_PASSWORD} = 'jp5Jda5ABveGVEbSyJgZ' {$Z_API_PHP} = 'http://127.0.0.1/api_jsonrpc.php' Obtain new session id instantly curl -sk http://127.0.0.1/api_jsonrpc.php -X POST -H 'Content-Type: application/json' -H 'cache-control: no-cache' -d '{"jsonrpc":"2.0","method":"user.login","params":{"user":"api","password":"jp5Jda5ABveGVEbSyJgZ"},"id":1}' | grep -E -o "([0-9a-f]{32,32})" Install session: {$Z_API_SESSIONID} = '2fdcdb96409fb134f82a2029342ce933'
        
        ## Overview
        
        A lot of solutions out there are using Zabbix API to accomplish a specific task.
        
        
        In a lot of times, the session is not closed with API 'user.logout' procedure. In the long term, this will always result in slowness inside the frontend.
        
        
        I offer to not use a repeated authorization at all but use a static session-id (a Zabbix macro) instead for all the API calls/scripts.
        
        
        Here is the template to maintain the session id (macro).
        
        
        <https://youtu.be/MjQJ0g0AaYI>
        
        
         
        
        
        
        
      groups:
        -
          name: Templates/Modules
      items:
        -
          uuid: 2d6da629144549769098b71c61172c7c
          name: 'Validate session key'
          type: HTTP_AGENT
          key: check.session.key
          delay: 15s
          trends: '0'
          value_type: TEXT
          description: 'Validate session key by listing proxies'
          preprocessing:
            -
              type: REGEX
              parameters:
                - (html|error|result)
                - \1;result=0;error=1;html=2
            -
              type: REGEX
              parameters:
                - '(html|error|result)(?=.*;\1=(\d))'
                - \2
          url: '{$Z_API_PHP}'
          posts: |
            {
                "jsonrpc": "2.0",
                "method": "proxy.get",
                "params": {
                    "output": ["name"]
                },
                "auth": "{$Z_API_SESSIONID}",
                "id": 1
            }
          follow_redirects: 'NO'
          post_type: JSON
          request_method: POST
          output_format: JSON
          tags:
            -
              tag: Application
              value: Session
          triggers:
            -
              uuid: 88a89697b66143b6b9a757f080dfd502
              expression: 'last(/Check if Zabbix session key is valid via API/check.session.key)=2'
              name: 'Invalid URL configureded for Zabbix API'
              priority: DISASTER
              description: |
                Please install the right value for { $Z_API_PHP} under:
                Administration -> General -> Macros
                Currently, the value is installed as {$Z_API_PHP} and it is not working.
                
                Then reload the configuration cache:
                zabbix_server -R config_cache_reload
            -
              uuid: 06d9b174e29e43ffb0b8951056ae8a9d
              expression: 'last(/Check if Zabbix session key is valid via API/check.session.key)=1'
              name: 'Session key is not valid. HTTP works fine'
              priority: DISASTER
              description: |
                You may need to obtain a new session key:
                
                curl -sk {$Z_API_PHP} -X POST -H 'Content-Type: application/json' -H 'cache-control: no-cache' -d '{"jsonrpc":"2.0","method":"user.login","params":{"user":"{$Z_API_USER}","password":"{$Z_API_PASSWORD}"},"id":1}' | grep -E -o "([0-9a-f]{32,32})"
              manual_close: 'YES'
