<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
  <version>5.0</version>
  <date>2021-10-26T04:43:10Z</date>
  <groups>
    <group>
      <name>Templates</name>
    </group>
  </groups>
  <templates>
    <template>
      <template>EMC Unity REST-API v3</template>
      <name>EMC Unity REST-API v3</name>
      <groups>
        <group>
          <name>Templates</name>
        </group>
      </groups>
      <applications>
        <application>
          <name>BBU</name>
        </application>
        <application>
          <name>BBU health</name>
        </application>
        <application>
          <name>DAE health</name>
        </application>
        <application>
          <name>Disk</name>
        </application>
        <application>
          <name>Disk health</name>
        </application>
        <application>
          <name>DPE health</name>
        </application>
        <application>
          <name>Eth</name>
        </application>
        <application>
          <name>Eth health</name>
        </application>
        <application>
          <name>FAN</name>
        </application>
        <application>
          <name>FAN health</name>
        </application>
        <application>
          <name>FC health</name>
        </application>
        <application>
          <name>FC Port</name>
        </application>
        <application>
          <name>get_data_from_script</name>
        </application>
        <application>
          <name>I/O Module health</name>
        </application>
        <application>
          <name>Internal</name>
        </application>
        <application>
          <name>LCC health</name>
        </application>
        <application>
          <name>LUN</name>
        </application>
        <application>
          <name>LUN health</name>
        </application>
        <application>
          <name>MemoryModule</name>
        </application>
        <application>
          <name>MemoryModule health</name>
        </application>
        <application>
          <name>Pool</name>
        </application>
        <application>
          <name>Pool health</name>
        </application>
        <application>
          <name>PSU</name>
        </application>
        <application>
          <name>PSU health</name>
        </application>
        <application>
          <name>SAS</name>
        </application>
        <application>
          <name>SAS health</name>
        </application>
        <application>
          <name>SSC health</name>
        </application>
        <application>
          <name>SSD health</name>
        </application>
        <application>
          <name>StorageProcessor health</name>
        </application>
        <application>
          <name>Uncommitted Port health</name>
        </application>
      </applications>
      <items>
        <item>
          <name>get discovery</name>
          <type>EXTERNAL</type>
          <key>unity_get_state.py["--api_ip={HOST.IP}","--api_port={$API_PORT}","--api_user={$API_USER}","--api_password={$API_PASSWORD}","--storage_name={HOST.NAME}","--discovery"]</key>
          <delay>15m</delay>
          <applications>
            <application>
              <name>get_data_from_script</name>
            </application>
          </applications>
          <request_method>POST</request_method>
          <triggers>
            <trigger>
              <expression>{count(30m,2,le)}>5</expression>
              <name>{HOST.NAME} -> Error occurs in getting metrics</name>
              <priority>HIGH</priority>
            </trigger>
          </triggers>
        </item>
        <item>
          <name>get health state</name>
          <type>EXTERNAL</type>
          <key>unity_get_state.py["--api_ip={HOST.IP}","--api_port={$API_PORT}","--api_user={$API_USER}","--api_password={$API_PASSWORD}","--storage_name={HOST.NAME}","--status"]</key>
          <delay>3m</delay>
          <applications>
            <application>
              <name>get_data_from_script</name>
            </application>
          </applications>
          <request_method>POST</request_method>
          <triggers>
            <trigger>
              <expression>{count(30m,50,ge)}>5</expression>
              <name>{HOST.NAME} -> Error occurs in sending metrics</name>
              <priority>HIGH</priority>
            </trigger>
            <trigger>
              <expression>{nodata(3600)}=1</expression>
              <name>{HOST.NAME} -> No data from storage for 1 hours</name>
              <priority>HIGH</priority>
            </trigger>
          </triggers>
        </item>
        <item>
          <name>Count of unsupported items</name>
          <type>INTERNAL</type>
          <key>zabbix[host,,items_unsupported]</key>
          <delay>5m</delay>
          <applications>
            <application>
              <name>Internal</name>
            </application>
          </applications>
          <triggers>
            <trigger>
              <expression>({last()})>0</expression>
              <name>{HOST.NAME} -> Exist unsupported items</name>
              <priority>AVERAGE</priority>
            </trigger>
          </triggers>
        </item>
      </items>
      <discovery_rules>
        <discovery_rule>
          <name>BBU</name>
          <type>TRAP</type>
          <key>battery</key>
          <delay>0</delay>
          <lifetime>1d</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>Health status of BBU "{#ID}"</name>
              <type>TRAP</type>
              <key>health.battery.[{#ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>BBU health</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Health_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}&lt;>5</expression>
                  <name>{HOST.NAME} -> BBU "{#ID}" health status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
            <item_prototype>
              <name>Running status of BBU "{#ID}"</name>
              <type>TRAP</type>
              <key>running.battery.[{#ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>BBU</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Running_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}&lt;>8</expression>
                  <name>{HOST.NAME} -> BBU "{#ID}" running status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
          </item_prototypes>
          <request_method>POST</request_method>
        </discovery_rule>
        <discovery_rule>
          <name>Disk Array Enclosure (DAE)</name>
          <type>TRAP</type>
          <key>dae</key>
          <delay>0</delay>
          <lifetime>1d</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>Health status of DAE "{#ID}"</name>
              <type>TRAP</type>
              <key>health.dae.[{#ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>DAE health</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Health_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}&lt;>5</expression>
                  <name>{HOST.NAME} -> DAE "{#ID}" health status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
            <item_prototype>
              <name>Running status of DAE "{#ID}"</name>
              <type>TRAP</type>
              <key>running.dae.[{#ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>DAE health</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Running_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}&lt;>8</expression>
                  <name>{HOST.NAME} -> DAE "{#ID}" running status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
          </item_prototypes>
          <request_method>POST</request_method>
        </discovery_rule>
        <discovery_rule>
          <name>Disk</name>
          <type>TRAP</type>
          <key>disk</key>
          <delay>0</delay>
          <lifetime>1d</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>Health status of disk "{#ID}"</name>
              <type>TRAP</type>
              <key>health.disk.[{#ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>Disk health</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Health_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}&lt;>5</expression>
                  <name>{HOST.NAME} -> Hard disk "{#ID}" health status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
            <item_prototype>
              <name>Running status of disk "{#ID}"</name>
              <type>TRAP</type>
              <key>running.disk.[{#ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>Disk</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Running_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>({TRIGGER.VALUE}=0 and {last()}=6 and {change()}=1) or ({TRIGGER.VALUE}=1 and {change()}=0) or ({TRIGGER.VALUE}=1 and {last()}&lt;>8 and {change()}=1)</expression>
                  <name>{HOST.NAME} -> Hard disk "{#ID}" running status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
          </item_prototypes>
          <request_method>POST</request_method>
        </discovery_rule>
        <discovery_rule>
          <name>Disk Processor Enclosures (DPE)</name>
          <type>TRAP</type>
          <key>dpe</key>
          <delay>0</delay>
          <lifetime>1d</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>Health status of DPE "{#ID}"</name>
              <type>TRAP</type>
              <key>health.dpe.[{#ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>DPE health</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Health_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}&lt;>5</expression>
                  <name>{HOST.NAME} -> DPE "{#ID}" health status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
            <item_prototype>
              <name>Running status of DPE "{#ID}"</name>
              <type>TRAP</type>
              <key>running.dpe.[{#ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>DPE health</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Running_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}&lt;>8</expression>
                  <name>{HOST.NAME} -> DPE "{#ID}" running status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
          </item_prototypes>
          <request_method>POST</request_method>
        </discovery_rule>
        <discovery_rule>
          <name>PortEth</name>
          <type>TRAP</type>
          <key>ethernetPort</key>
          <delay>0</delay>
          <lifetime>1d</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>Health status of Ethernet port "{#ID}"</name>
              <type>TRAP</type>
              <key>health.ethernetPort.[{#ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>Eth health</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Health_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}&lt;>5</expression>
                  <name>{HOST.NAME} -> Ethernet Port "{#ID}" health status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
            <item_prototype>
              <name>Running status of Ethernet port "{#ID}"</name>
              <type>TRAP</type>
              <key>link.ethernetPort.[{#ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>Eth</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Running_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>({TRIGGER.VALUE}=0 and {last()}=11 and {change()}=1) or ({TRIGGER.VALUE}=1 and {change()}=0)</expression>
                  <name>{HOST.NAME} -> Ethernet Port "{#ID}" running status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                  <description>Триггер настроен так, что те порты, которые имеют линк-даун (еще не введены в эксплуатацию) - по ним триггеров нет. Те порты, которые линк-ап (эксплуатириуются) - при смене состояния триггер загорается</description>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
          </item_prototypes>
          <request_method>POST</request_method>
        </discovery_rule>
        <discovery_rule>
          <name>FAN</name>
          <type>TRAP</type>
          <key>fan</key>
          <delay>0</delay>
          <lifetime>1d</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>Health Status of FAN "{#ID}"</name>
              <type>TRAP</type>
              <key>health.fan.[{#ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>FAN health</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Health_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}&lt;>5</expression>
                  <name>{HOST.NAME} -> FAN "{#ID}" health status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
            <item_prototype>
              <name>Running Status of FAN "{#ID}"</name>
              <type>TRAP</type>
              <key>running.fan.[{#ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>FAN</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Running_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}&lt;>8</expression>
                  <name>{HOST.NAME} -> FAN "{#ID}" running status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
          </item_prototypes>
          <request_method>POST</request_method>
        </discovery_rule>
        <discovery_rule>
          <name>PortFibreChannel</name>
          <type>TRAP</type>
          <key>fcPort</key>
          <delay>0</delay>
          <lifetime>1d</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>Health status of Fibre Channel port "{#ID}"</name>
              <type>TRAP</type>
              <key>health.fcPort.[{#ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>FC health</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Health_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}&lt;>5</expression>
                  <name>{HOST.NAME} -> FibreChannel Port "{#ID}" health status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
            <item_prototype>
              <name>Running status of Fibre Channel port "{#ID}"</name>
              <type>TRAP</type>
              <key>link.fcPort.[{#ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>FC Port</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Running_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>({TRIGGER.VALUE}=0 and {last()}=11 and {change()}=1) or ({TRIGGER.VALUE}=1) and {change()}=0</expression>
                  <name>{HOST.NAME} -> FibreChannel Port "{#ID}" running status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                  <description>Триггер настроен так, что те порты, которые имеют линк-даун (еще не введены в эксплуатацию) - по ним триггеров нет. Те порты, которые линк-ап (эксплуатириуются) - при смене состояния триггер загорается</description>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
          </item_prototypes>
          <request_method>POST</request_method>
        </discovery_rule>
        <discovery_rule>
          <name>I/O Module</name>
          <type>TRAP</type>
          <key>ioModule</key>
          <delay>0</delay>
          <lifetime>1d</lifetime>
          <description>I/O modules provide connectivity between SPs and Disk-Array Enclosures (DAEs)</description>
          <item_prototypes>
            <item_prototype>
              <name>Health status of ioModule "{#ID}"</name>
              <type>TRAP</type>
              <key>health.ioModule.[{#ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>I/O Module health</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Health_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}&lt;>5</expression>
                  <name>{HOST.NAME} -> ioModule "{#ID}" health status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
            <item_prototype>
              <name>Running status of ioModule "{#ID}"</name>
              <type>TRAP</type>
              <key>running.ioModule.[{#ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>I/O Module health</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Running_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}&lt;>8</expression>
                  <name>{HOST.NAME} -> ioModule "{#ID}" running status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
          </item_prototypes>
          <request_method>POST</request_method>
        </discovery_rule>
        <discovery_rule>
          <name>LCC</name>
          <type>TRAP</type>
          <key>lcc</key>
          <delay>0</delay>
          <lifetime>1d</lifetime>
          <description>Link Control Cards (LCCs)</description>
          <item_prototypes>
            <item_prototype>
              <name>Health status of LLC "{#ID}"</name>
              <type>TRAP</type>
              <key>health.lcc.[{#ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>LCC health</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Health_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}&lt;>5</expression>
                  <name>{HOST.NAME} -> LCC "{#ID}" health status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
            <item_prototype>
              <name>Running status of LLC "{#ID}"</name>
              <type>TRAP</type>
              <key>running.lcc.[{#ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>LCC health</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Running_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}&lt;>8</expression>
                  <name>{HOST.NAME} -> LCC "{#ID}" running status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
          </item_prototypes>
          <request_method>POST</request_method>
        </discovery_rule>
        <discovery_rule>
          <name>Lun</name>
          <type>TRAP</type>
          <key>lun</key>
          <delay>0</delay>
          <lifetime>1d</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>Health status of Lun "{#NAME}"</name>
              <type>TRAP</type>
              <key>health.lun.[{#NAME}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>LUN health</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Health_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}&lt;>5</expression>
                  <name>{HOST.NAME} -> Lun "{#NAME}" health status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
            <item_prototype>
              <name>Allocated size of Lun "{#NAME}"</name>
              <type>TRAP</type>
              <key>sizeAllocated.lun.[{#NAME}]</key>
              <delay>0</delay>
              <units>B</units>
              <description>Size of space actually allocated in the pool for the LUN: For thin-provisioned LUNs this as a rule is less than the sizeTotal attribute until the LUN is not fully populated with user data. For not thin-provisioned LUNs this is approximately equal to the sizeTotal.</description>
              <applications>
                <application>
                  <name>LUN</name>
                </application>
              </applications>
            </item_prototype>
            <item_prototype>
              <name>Total size of Lun "{#NAME}"</name>
              <type>TRAP</type>
              <key>sizeTotal.lun.[{#NAME}]</key>
              <delay>0</delay>
              <units>B</units>
              <description>LUN size that the system presents to the host or end user.</description>
              <applications>
                <application>
                  <name>LUN</name>
                </application>
              </applications>
            </item_prototype>
          </item_prototypes>
          <request_method>POST</request_method>
        </discovery_rule>
        <discovery_rule>
          <name>Memory Module</name>
          <type>TRAP</type>
          <key>memoryModule</key>
          <delay>0</delay>
          <lifetime>1d</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>Health status of Memory Module "{#ID}"</name>
              <type>TRAP</type>
              <key>health.memoryModule.[{#ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>MemoryModule health</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Health_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}&lt;>5</expression>
                  <name>{HOST.NAME} -> MemoryModule "{#ID}" health status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
            <item_prototype>
              <name>Running status of Memory Module "{#ID}"</name>
              <type>TRAP</type>
              <key>running.memoryModule.[{#ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>Eth</name>
                </application>
                <application>
                  <name>MemoryModule</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Running_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}&lt;>8</expression>
                  <name>{HOST.NAME} -> MemoryModule "{#ID}" running status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
          </item_prototypes>
          <request_method>POST</request_method>
        </discovery_rule>
        <discovery_rule>
          <name>Pool</name>
          <type>TRAP</type>
          <key>pool</key>
          <delay>0</delay>
          <lifetime>1d</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>Health status of Pool "{#NAME}"</name>
              <type>TRAP</type>
              <key>health.pool.[{#NAME}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>Pool health</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Health_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}&lt;>5</expression>
                  <name>{HOST.NAME} -> Pool "{#NAME}" health status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
            <item_prototype>
              <name>Subscribed size of Pool "{#NAME}"</name>
              <type>TRAP</type>
              <key>sizeSubscribedBytes.pool.[{#NAME}]</key>
              <delay>0</delay>
              <units>B</units>
              <applications>
                <application>
                  <name>Pool</name>
                </application>
              </applications>
              <request_method>POST</request_method>
            </item_prototype>
            <item_prototype>
              <name>Subscribed size of Pool "{#NAME}" in percent</name>
              <type>CALCULATED</type>
              <key>sizeSubscribedPercent.pool.[{#NAME}]</key>
              <delay>3m</delay>
              <value_type>FLOAT</value_type>
              <units>%</units>
              <params>(100*last("sizeSubscribedBytes.pool.[{#NAME}]"))/last("sizeTotalBytes.pool.[{#NAME}]")</params>
              <applications>
                <application>
                  <name>Pool</name>
                </application>
              </applications>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}>{$SUBSCRIBED_PERCENT:"{#NAME}"}</expression>
                  <name>{HOST.NAME} -> Subscribed capacity on pool "{#NAME}" > {$SUBSCRIBED_PERCENT:"{#NAME}"}%</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
            <item_prototype>
              <name>Total size of Pool "{#NAME}"</name>
              <type>TRAP</type>
              <key>sizeTotalBytes.pool.[{#NAME}]</key>
              <delay>0</delay>
              <units>B</units>
              <applications>
                <application>
                  <name>Pool</name>
                </application>
              </applications>
              <request_method>POST</request_method>
            </item_prototype>
            <item_prototype>
              <name>Used size of Pool "{#NAME}"</name>
              <type>TRAP</type>
              <key>sizeUsedBytes.pool.[{#NAME}]</key>
              <delay>0</delay>
              <units>B</units>
              <applications>
                <application>
                  <name>Pool</name>
                </application>
              </applications>
              <request_method>POST</request_method>
            </item_prototype>
            <item_prototype>
              <name>Used size of Pool "{#NAME}" in percent</name>
              <type>CALCULATED</type>
              <key>sizeUsedPercent.pool.[{#NAME}]</key>
              <delay>3m</delay>
              <value_type>FLOAT</value_type>
              <units>%</units>
              <params>(100*last("sizeUsedBytes.pool.[{#NAME}]"))/last("sizeTotalBytes.pool.[{#NAME}]")</params>
              <applications>
                <application>
                  <name>Pool</name>
                </application>
              </applications>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}>{$USED_PERCENT:"{#NAME}"}</expression>
                  <name>{HOST.NAME} -> Used capacity on pool "{#NAME}" > {$USED_PERCENT:"{#NAME}"}%</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
          </item_prototypes>
          <request_method>POST</request_method>
        </discovery_rule>
        <discovery_rule>
          <name>PSU</name>
          <type>TRAP</type>
          <key>powerSupply</key>
          <delay>0</delay>
          <lifetime>1d</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>Health Status of PSU "{#ID}"</name>
              <type>TRAP</type>
              <key>health.powerSupply.[{#ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>PSU health</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Health_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}&lt;>5</expression>
                  <name>{HOST.NAME} -> PSU "{#ID}" health status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
            <item_prototype>
              <name>Running Status of PSU "{#ID}"</name>
              <type>TRAP</type>
              <key>running.powerSupply.[{#ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>PSU</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Running_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}&lt;>8</expression>
                  <name>{HOST.NAME} -> PSU "{#ID}" running status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
          </item_prototypes>
          <request_method>POST</request_method>
        </discovery_rule>
        <discovery_rule>
          <name>PortSAS</name>
          <type>TRAP</type>
          <key>sasPort</key>
          <delay>0</delay>
          <lifetime>1d</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>Health status of SAS port "{#ID}"</name>
              <type>TRAP</type>
              <key>health.sasPort.[{#ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>SAS health</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Health_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}&lt;>5</expression>
                  <name>{HOST.NAME} -> SAS Port "{#ID}" health status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
            <item_prototype>
              <name>Running status of SAS port "{#ID}"</name>
              <type>TRAP</type>
              <key>link.sasPort.[{#ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>SAS</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Running_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>({TRIGGER.VALUE}=0 and {last()}=11 and {change()}=1) or ({TRIGGER.VALUE}=1 and {change()}=0)</expression>
                  <name>{HOST.NAME} -> SAS Port "{#ID}" running status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                  <description>Триггер настроен так, что те порты, которые имеют линк-даун (еще не введены в эксплуатацию) - по ним триггеров нет. Те порты, которые линк-ап (эксплуатириуются) - при смене состояния триггер загорается</description>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
          </item_prototypes>
          <request_method>POST</request_method>
        </discovery_rule>
        <discovery_rule>
          <name>SSC</name>
          <type>TRAP</type>
          <key>ssc</key>
          <delay>0</delay>
          <lifetime>1d</lifetime>
          <description>System Status Cards (SSCs)</description>
          <item_prototypes>
            <item_prototype>
              <name>Health status of SSC "{#ID}"</name>
              <type>TRAP</type>
              <key>health.ssc.[{#ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>SSC health</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Health_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}&lt;>5</expression>
                  <name>{HOST.NAME} -> SSC "{#ID}" health status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
            <item_prototype>
              <name>Running status of SSC "{#ID}"</name>
              <type>TRAP</type>
              <key>running.ssc.[{#ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>SSC health</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Running_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}&lt;>8</expression>
                  <name>{HOST.NAME} -> SSC "{#ID}" running status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
          </item_prototypes>
          <request_method>POST</request_method>
        </discovery_rule>
        <discovery_rule>
          <name>SSD</name>
          <type>TRAP</type>
          <key>ssd</key>
          <delay>0</delay>
          <lifetime>1d</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>Health status of SSD "{#ID}"</name>
              <type>TRAP</type>
              <key>health.ssd.[{#ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>SSD health</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Health_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}&lt;>5</expression>
                  <name>{HOST.NAME} -> SSD "{#ID}" health status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
            <item_prototype>
              <name>Running status of SSD "{#ID}"</name>
              <type>TRAP</type>
              <key>running.ssd.[{#ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>SSD health</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Running_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}&lt;>8</expression>
                  <name>{HOST.NAME} -> SSD "{#ID}" running status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
          </item_prototypes>
          <request_method>POST</request_method>
        </discovery_rule>
        <discovery_rule>
          <name>Storage Processors</name>
          <type>TRAP</type>
          <key>storageProcessor</key>
          <delay>0</delay>
          <lifetime>1d</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>Health status of Storage Processors "{#ID}"</name>
              <type>TRAP</type>
              <key>health.storageProcessor.[{#ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>StorageProcessor health</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Health_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}&lt;>5</expression>
                  <name>{HOST.NAME} -> Storage Processor "{#ID}" health status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
            <item_prototype>
              <name>Running status of Storage Processors "{#ID}"</name>
              <type>TRAP</type>
              <key>running.storageProcessor.[{#ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>StorageProcessor health</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Running_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}&lt;>8</expression>
                  <name>{HOST.NAME} -> Storage Processor "{#ID}" running status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
          </item_prototypes>
          <request_method>POST</request_method>
        </discovery_rule>
        <discovery_rule>
          <name>Uncommitted Port</name>
          <type>TRAP</type>
          <key>uncommittedPort</key>
          <delay>0</delay>
          <lifetime>1d</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>Health status of Uncommitted Port "{#ID}"</name>
              <type>TRAP</type>
              <key>health.uncommittedPort.[{#ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>Uncommitted Port health</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Health_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}&lt;>5</expression>
                  <name>{HOST.NAME} -> Uncommited Port "{#ID}" health status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
            <item_prototype>
              <name>Running status of Uncommitted Port "{#ID}"</name>
              <type>TRAP</type>
              <key>running.uncommittedPort.[{#ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>Uncommitted Port health</name>
                </application>
              </applications>
              <valuemap>
                <name>Unity_Running_Status</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}&lt;>8</expression>
                  <name>{HOST.NAME} -> Uncommited Port "{#ID}" running status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
          </item_prototypes>
          <request_method>POST</request_method>
        </discovery_rule>
      </discovery_rules>
      <macros>
        <macro>
          <macro>{$API_PASSWORD}</macro>
        </macro>
        <macro>
          <macro>{$API_PORT}</macro>
          <value>443</value>
        </macro>
        <macro>
          <macro>{$API_USER}</macro>
        </macro>
        <macro>
          <macro>{$SUBSCRIBED_PERCENT}</macro>
          <value>91</value>
        </macro>
        <macro>
          <macro>{$USED_PERCENT}</macro>
          <value>91</value>
        </macro>
      </macros>
    </template>
  </templates>
  <value_maps>
    <value_map>
      <name>Unity_Health_Status</name>
      <mappings>
        <mapping>
          <value>0</value>
          <newvalue>UNKNOWN</newvalue>
        </mapping>
        <mapping>
          <value>5</value>
          <newvalue>OK</newvalue>
        </mapping>
        <mapping>
          <value>7</value>
          <newvalue>OK_BUT</newvalue>
        </mapping>
        <mapping>
          <value>10</value>
          <newvalue>DEGRADED</newvalue>
        </mapping>
        <mapping>
          <value>15</value>
          <newvalue>MINOR</newvalue>
        </mapping>
        <mapping>
          <value>20</value>
          <newvalue>MAJOR</newvalue>
        </mapping>
        <mapping>
          <value>25</value>
          <newvalue>CRITICAL</newvalue>
        </mapping>
        <mapping>
          <value>30</value>
          <newvalue>NON_RECOVERABLE</newvalue>
        </mapping>
      </mappings>
    </value_map>
    <value_map>
      <name>Unity_Running_Status</name>
      <mappings>
        <mapping>
          <value>5</value>
          <newvalue>NOT_OK</newvalue>
        </mapping>
        <mapping>
          <value>6</value>
          <newvalue>DISK_SLOT_EMPTY</newvalue>
        </mapping>
        <mapping>
          <value>8</value>
          <newvalue>COMPONENT_OK</newvalue>
        </mapping>
        <mapping>
          <value>10</value>
          <newvalue>Link_up</newvalue>
        </mapping>
        <mapping>
          <value>11</value>
          <newvalue>Link_down</newvalue>
        </mapping>
      </mappings>
    </value_map>
  </value_maps>
</zabbix_export>