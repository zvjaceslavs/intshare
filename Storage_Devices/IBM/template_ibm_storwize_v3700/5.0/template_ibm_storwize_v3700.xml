<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
  <version>5.0</version>
  <date>2021-11-09T08:35:40Z</date>
  <groups>
    <group>
      <name>Templates</name>
    </group>
  </groups>
  <templates>
    <template>
      <template>IBM-Storwize-3700 CLI v2</template>
      <name>IBM-Storwize-3700 CLI v2</name>
      <description>## Overview Tested on Storwize 3700. This script get next metrics: Disk, Enclosure, Battery, Enclosure Canister, PSU, Mdisk, Pool, PortFibreChannel, PortSas, Volume</description>
      <groups>
        <group>
          <name>Templates</name>
        </group>
      </groups>
      <applications>
        <application>
          <name>BBU health</name>
        </application>
        <application>
          <name>Canister health</name>
        </application>
        <application>
          <name>Disk health</name>
        </application>
        <application>
          <name>Enclosure health</name>
        </application>
        <application>
          <name>FC health</name>
        </application>
        <application>
          <name>Internal</name>
        </application>
        <application>
          <name>Mdisk health</name>
        </application>
        <application>
          <name>Pool</name>
        </application>
        <application>
          <name>PSU health</name>
        </application>
        <application>
          <name>SAS health</name>
        </application>
        <application>
          <name>Volume Health</name>
        </application>
      </applications>
      <items>
        <item>
          <name>Count of enclosure</name>
          <type>TRAP</type>
          <key>is_there_expansion_enclosure</key>
          <delay>0</delay>
          <request_method>POST</request_method>
        </item>
        <item>
          <name>get discovery</name>
          <type>EXTERNAL</type>
          <key>storwize_get_state.py["--storwize_ip={HOST.IP}","--storwize_port={$STORWIZE_PORT}","--storwize_user={$STORWIZE_USER}","--storwize_password={$STORWIZE_PASSWORD}","--storage_name={HOST.NAME}","--discovery"]</key>
          <delay>30m</delay>
          <request_method>POST</request_method>
        </item>
        <item>
          <name>get status</name>
          <type>EXTERNAL</type>
          <key>storwize_get_state.py["--storwize_ip={HOST.IP}","--storwize_port={$STORWIZE_PORT}","--storwize_user={$STORWIZE_USER}","--storwize_password={$STORWIZE_PASSWORD}","--storage_name={HOST.NAME}","--status"]</key>
          <delay>3m</delay>
          <request_method>POST</request_method>
          <triggers>
            <trigger>
              <expression>{last()}=1000</expression>
              <name>{HOST.NAME} -> Error connecting to storage device</name>
              <priority>AVERAGE</priority>
            </trigger>
            <trigger>
              <expression>{last()}=1100</expression>
              <name>{HOST.NAME} -> Error getting metrics from storage device</name>
              <priority>AVERAGE</priority>
            </trigger>
            <trigger>
              <expression>{count(2h,2,eq)}>35</expression>
              <name>{HOST.NAME} -> Error processing metrics on zabbix</name>
              <priority>AVERAGE</priority>
              <description>Кол-во значений равных 2 и полученных за последний час больше или равно 35</description>
            </trigger>
            <trigger>
              <expression>{count(2h,1,eq)}>35</expression>
              <name>{HOST.NAME} -> Error sending metrics to zabbix</name>
              <priority>AVERAGE</priority>
              <description>Кол-во значений равных 1 и полученных за последний час больше или равно 35</description>
            </trigger>
            <trigger>
              <expression>{nodata(3600)}=1</expression>
              <name>{HOST.NAME} -> No data from storage device for 1 hour</name>
              <priority>AVERAGE</priority>
            </trigger>
          </triggers>
        </item>
        <item>
          <name>Count of unsupported items</name>
          <type>INTERNAL</type>
          <key>zabbix[host,,items_unsupported]</key>
          <delay>10m</delay>
          <applications>
            <application>
              <name>Internal</name>
            </application>
          </applications>
          <triggers>
            <trigger>
              <expression>({last()}-1)>1</expression>
              <name>{HOST.NAME} -> Exist unsupported items</name>
              <priority>AVERAGE</priority>
            </trigger>
          </triggers>
        </item>
      </items>
      <discovery_rules>
        <discovery_rule>
          <name>Disk</name>
          <type>TRAP</type>
          <key>lsdrive</key>
          <delay>0</delay>
          <lifetime>1d</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>Health status of disk "{#SLOT_ID}" in enclosure "{#ENCLOSURE_ID}"</name>
              <type>TRAP</type>
              <key>health.lsdrive.[{#ENCLOSURE_ID}.{#SLOT_ID}]</key>
              <delay>0</delay>
              <description>online - which indicates that the drive is available through all drive ports degraded - which indicates that the drive is available but not through all drive ports offline - which indicates that the drive is unavailable</description>
              <applications>
                <application>
                  <name>Disk health</name>
                </application>
              </applications>
              <valuemap>
                <name>Storwize_HEALTH_STATUS</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}>0</expression>
                  <name>{HOST.NAME} -> Hard disk {#SLOT_ID} in enclosure {#ENCLOSURE_ID} health status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
          </item_prototypes>
          <request_method>POST</request_method>
        </discovery_rule>
        <discovery_rule>
          <name>Enclosure</name>
          <type>TRAP</type>
          <key>lsenclosure</key>
          <delay>0</delay>
          <lifetime>1d</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>Fault LED of enclosure ID - "{#ID}", Serial Number - "{#SERIAL_NUMBER}"</name>
              <type>TRAP</type>
              <key>faultLED.lsenclosure.[{#ID}.{#SERIAL_NUMBER}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>Enclosure health</name>
                </application>
              </applications>
              <valuemap>
                <name>Storwize_HEALTH_STATUS</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}=8 or {last()}=10</expression>
                  <name>{HOST.NAME} -> Enclosure ID - "{#ID}", Serial Number - "{#SERIAL_NUMBER}" LED status is failed</name>
                  <priority>HIGH</priority>
                  <description>Indicates the status of the fault light-emitting diode (LED) on the enclosure: on - if a service action is required immediately on the enclosure or a component within the enclosure (including a canister, power unit, or non-spared drive). slow_flashing - if there is insufficient battery power to run I/O off - if there are not faults on the enclosure or its components</description>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
            <item_prototype>
              <name>Health status of enclosure ID - "{#ID}", Serial Number - "{#SERIAL_NUMBER}"</name>
              <type>TRAP</type>
              <key>health.lsenclosure.[{#ID}.{#SERIAL_NUMBER}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>Enclosure health</name>
                </application>
              </applications>
              <valuemap>
                <name>Storwize_HEALTH_STATUS</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}>0</expression>
                  <name>{HOST.NAME} -> Enclosure ID - "{#ID}", Serial Number - "{#SERIAL_NUMBER}" health status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
          </item_prototypes>
          <request_method>POST</request_method>
        </discovery_rule>
        <discovery_rule>
          <name>Enclosure Battery</name>
          <type>TRAP</type>
          <key>lsenclosurebattery</key>
          <delay>0</delay>
          <lifetime>1d</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>Health status of BBU "{#BATTERY_ID}" in enclosure "{#ENCLOSURE_ID}"</name>
              <type>TRAP</type>
              <key>health.lsenclosurebattery.[{#ENCLOSURE_ID}.{#BATTERY_ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>BBU health</name>
                </application>
              </applications>
              <valuemap>
                <name>Storwize_HEALTH_STATUS</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}>0</expression>
                  <name>{HOST.NAME} -> BBU "{#BATTERY_ID}" in enclosure "{#ENCLOSURE_ID}" health status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
          </item_prototypes>
          <request_method>POST</request_method>
        </discovery_rule>
        <discovery_rule>
          <name>Enclosure Canister</name>
          <type>TRAP</type>
          <key>lsenclosurecanister</key>
          <delay>0</delay>
          <lifetime>1d</lifetime>
          <description>Node Canister Контроллер, голова</description>
          <item_prototypes>
            <item_prototype>
              <name>Health status of Canister "{#CANISTER_ID}" in enclosure "{#ENCLOSURE_ID}"</name>
              <type>TRAP</type>
              <key>health.lsenclosurecanister.[{#ENCLOSURE_ID}.{#CANISTER_ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>Canister health</name>
                </application>
              </applications>
              <valuemap>
                <name>Storwize_HEALTH_STATUS</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}>0</expression>
                  <name>{HOST.NAME} -> Canister "{#CANISTER_ID}" in enclosure "{#ENCLOSURE_ID}" health status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
          </item_prototypes>
          <request_method>POST</request_method>
        </discovery_rule>
        <discovery_rule>
          <name>Enclosure PSU</name>
          <type>TRAP</type>
          <key>lsenclosurepsu</key>
          <delay>0</delay>
          <lifetime>1d</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>Fan of PSU "{#PSU_ID}" in enclosure "{#ENCLOSURE_ID}"</name>
              <type>TRAP</type>
              <key>fanFailed.lsenclosurepsu.[{#ENCLOSURE_ID}.{#PSU_ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>PSU health</name>
                </application>
              </applications>
              <valuemap>
                <name>Storwize_HEALTH_STATUS</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}=8</expression>
                  <name>{HOST.NAME} -> PSU "{#PSU_ID}" in enclosure "{#ENCLOSURE_ID}" fan status is failed</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
            <item_prototype>
              <name>Health status of PSU "{#PSU_ID}" in enclosure "{#ENCLOSURE_ID}"</name>
              <type>TRAP</type>
              <key>health.lsenclosurepsu.[{#ENCLOSURE_ID}.{#PSU_ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>PSU health</name>
                </application>
              </applications>
              <valuemap>
                <name>Storwize_HEALTH_STATUS</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}>0</expression>
                  <name>{HOST.NAME} -> PSU "{#PSU_ID}" in enclosure "{#ENCLOSURE_ID}" health status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
            <item_prototype>
              <name>Input Power of PSU "{#PSU_ID}" in enclosure "{#ENCLOSURE_ID}"</name>
              <type>TRAP</type>
              <key>inFailed.lsenclosurepsu.[{#ENCLOSURE_ID}.{#PSU_ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>PSU health</name>
                </application>
              </applications>
              <valuemap>
                <name>Storwize_HEALTH_STATUS</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}=8</expression>
                  <name>{HOST.NAME} -> PSU "{#PSU_ID}" in enclosure "{#ENCLOSURE_ID}" input power status is failed</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
            <item_prototype>
              <name>Output Power of PSU "{#PSU_ID}" in enclosure "{#ENCLOSURE_ID}"</name>
              <type>TRAP</type>
              <key>outFailed.lsenclosurepsu.[{#ENCLOSURE_ID}.{#PSU_ID}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>PSU health</name>
                </application>
              </applications>
              <valuemap>
                <name>Storwize_HEALTH_STATUS</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}=8</expression>
                  <name>{HOST.NAME} -> PSU "{#PSU_ID}" in enclosure "{#ENCLOSURE_ID}" output power status is failed</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
          </item_prototypes>
          <request_method>POST</request_method>
        </discovery_rule>
        <discovery_rule>
          <name>Mdisk</name>
          <type>TRAP</type>
          <key>lsmdisk</key>
          <delay>0</delay>
          <lifetime>1d</lifetime>
          <description>Display a concise list or a detailed view of managed disks (MDisks). RAID-массивы показывает</description>
          <item_prototypes>
            <item_prototype>
              <name>Health status of Mdisk "{#NAME}"</name>
              <type>TRAP</type>
              <key>health.lsmdisk.[{#NAME}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>Mdisk health</name>
                </application>
              </applications>
              <valuemap>
                <name>Storwize_HEALTH_STATUS</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}>0</expression>
                  <name>{HOST.NAME} -> Mdisk "{#NAME}" health status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
          </item_prototypes>
          <request_method>POST</request_method>
        </discovery_rule>
        <discovery_rule>
          <name>Pool</name>
          <type>TRAP</type>
          <key>lsmdiskgrp</key>
          <delay>0</delay>
          <lifetime>1d</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>Free capacity of a Pool "{#NAME}"</name>
              <type>TRAP</type>
              <key>free.lsmdiskgrp.[{#NAME}]</key>
              <delay>0</delay>
              <trends>0</trends>
              <units>B</units>
              <applications>
                <application>
                  <name>Pool</name>
                </application>
              </applications>
              <request_method>POST</request_method>
            </item_prototype>
            <item_prototype>
              <name>Health status of a Pool "{#NAME}"</name>
              <type>TRAP</type>
              <key>health.lsmdiskgrp.[{#NAME}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>Pool</name>
                </application>
              </applications>
              <valuemap>
                <name>Storwize_HEALTH_STATUS</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}>0</expression>
                  <name>{HOST.NAME} -> Pool "{#NAME}" health status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
            <item_prototype>
              <name>Percent overallocation on Pool "{#NAME}"</name>
              <type>TRAP</type>
              <key>overallocation.lsmdiskgrp.[{#NAME}]</key>
              <delay>0</delay>
              <units>%</units>
              <applications>
                <application>
                  <name>Pool</name>
                </application>
              </applications>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}>{$SUBSCRIBED_PERCENT:"{#NAME}"}</expression>
                  <name>{HOST.NAME} -> Subscribed capacity on pool "{#NAME}" > {$SUBSCRIBED_PERCENT:"{#NAME}"}%</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
            <item_prototype>
              <name>Real capacity of a Pool "{#NAME}"</name>
              <type>TRAP</type>
              <key>real.lsmdiskgrp.[{#NAME}]</key>
              <delay>0</delay>
              <trends>0</trends>
              <units>B</units>
              <applications>
                <application>
                  <name>Pool</name>
                </application>
              </applications>
              <request_method>POST</request_method>
            </item_prototype>
            <item_prototype>
              <name>Total capacity of a Pool "{#NAME}"</name>
              <type>TRAP</type>
              <key>total.lsmdiskgrp.[{#NAME}]</key>
              <delay>0</delay>
              <trends>0</trends>
              <units>B</units>
              <applications>
                <application>
                  <name>Pool</name>
                </application>
              </applications>
              <request_method>POST</request_method>
            </item_prototype>
            <item_prototype>
              <name>Used capacity of a Pool "{#NAME}"</name>
              <type>TRAP</type>
              <key>used.lsmdiskgrp.[{#NAME}]</key>
              <delay>0</delay>
              <trends>0</trends>
              <units>B</units>
              <applications>
                <application>
                  <name>Pool</name>
                </application>
              </applications>
              <request_method>POST</request_method>
            </item_prototype>
            <item_prototype>
              <name>Virtual capacity of a Pool "{#NAME}"</name>
              <type>TRAP</type>
              <key>virtual.lsmdiskgrp.[{#NAME}]</key>
              <delay>0</delay>
              <trends>0</trends>
              <units>B</units>
              <applications>
                <application>
                  <name>Pool</name>
                </application>
              </applications>
              <request_method>POST</request_method>
            </item_prototype>
          </item_prototypes>
          <request_method>POST</request_method>
        </discovery_rule>
        <discovery_rule>
          <name>PortFibreChannel</name>
          <type>TRAP</type>
          <key>lsportfc</key>
          <delay>0</delay>
          <lifetime>1d</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>Running status of Fibre Channel port ID - "{#PORT_ID}", node name - "{#NODE_NAME}"</name>
              <type>TRAP</type>
              <key>running.lsportfc.[{#PORT_ID}.{#NODE_NAME}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>FC health</name>
                </application>
              </applications>
              <valuemap>
                <name>Storwize_HEALTH_STATUS</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}=4</expression>
                  <name>{HOST.NAME} - > PortFibreChannel ID - "{#PORT_ID}", node name - "{#NODE_NAME}" running status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                  <description>Indicates whether the port is configured to a device of Fibre Channel (FC) port. The values are: active inactive_configured inactive_unconfigured</description>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
          </item_prototypes>
          <request_method>POST</request_method>
        </discovery_rule>
        <discovery_rule>
          <name>PortSAS</name>
          <type>TRAP</type>
          <key>lsportsas</key>
          <delay>0</delay>
          <lifetime>1d</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>Running status of SAS port ID - "{#PORT_ID}", node name - "{#NODE_NAME}"</name>
              <type>TRAP</type>
              <key>running.lsportsas.[{#PORT_ID}.{#NODE_NAME}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>SAS health</name>
                </application>
              </applications>
              <valuemap>
                <name>Storwize_HEALTH_STATUS</name>
              </valuemap>
              <request_method>POST</request_method>
            </item_prototype>
          </item_prototypes>
          <trigger_prototypes>
            <trigger_prototype>
              <expression>({TRIGGER.VALUE}=0 and {IBM-Storwize-3700 CLI v2:running.lsportsas.[{#PORT_ID}.{#NODE_NAME}].last()}&lt;>0 and {IBM-Storwize-3700 CLI v2:running.lsportsas.[{#PORT_ID}.{#NODE_NAME}].change()}=1) or ({TRIGGER.VALUE}=1 and {IBM-Storwize-3700 CLI v2:is_there_expansion_enclosure.last()}&lt;>0)</expression>
              <name>{HOST.NAME} -> PortSas ID - "{#PORT_ID}", node name - "{#NODE_NAME}" running status is {ITEM.VALUE}</name>
              <priority>HIGH</priority>
              <description>Indicates the status of the port (numeric string). The values can be: online - if the port is functioning offline - if the port is not functioning offline_unconfigured - if not functioning but not configured by the user degraded - if one or more ports are not functioning or have a lower speed than others excluded - if excluded by the user or system Если на сторвайзе нет полок-расширения, то SAS-порты на контроллере будут оффлайн</description>
            </trigger_prototype>
          </trigger_prototypes>
          <request_method>POST</request_method>
        </discovery_rule>
        <discovery_rule>
          <name>Volume</name>
          <type>TRAP</type>
          <key>lsvdisk</key>
          <delay>0</delay>
          <lifetime>1d</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>Health status of Volume "{#NAME}"</name>
              <type>TRAP</type>
              <key>health.lsvdisk.[{#NAME}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>Volume Health</name>
                </application>
              </applications>
              <valuemap>
                <name>Storwize_HEALTH_STATUS</name>
              </valuemap>
              <request_method>POST</request_method>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}>0</expression>
                  <name>{HOST.NAME} -> Volume "{#NAME}" health status is {ITEM.VALUE}</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
          </item_prototypes>
          <request_method>POST</request_method>
        </discovery_rule>
      </discovery_rules>
      <macros>
        <macro>
          <macro>{$STORWIZE_PASSWORD}</macro>
        </macro>
        <macro>
          <macro>{$STORWIZE_PORT}</macro>
          <value>22</value>
        </macro>
        <macro>
          <macro>{$STORWIZE_USER}</macro>
        </macro>
        <macro>
          <macro>{$SUBSCRIBED_PERCENT}</macro>
          <value>91</value>
        </macro>
      </macros>
    </template>
  </templates>
  <value_maps>
    <value_map>
      <name>Storwize_HEALTH_STATUS</name>
      <mappings>
        <mapping>
          <value>0</value>
          <newvalue>ONLINE</newvalue>
        </mapping>
        <mapping>
          <value>1</value>
          <newvalue>OFFLINE</newvalue>
        </mapping>
        <mapping>
          <value>2</value>
          <newvalue>Degraded</newvalue>
        </mapping>
        <mapping>
          <value>3</value>
          <newvalue>Active</newvalue>
        </mapping>
        <mapping>
          <value>4</value>
          <newvalue>Inactive_Configured</newvalue>
        </mapping>
        <mapping>
          <value>5</value>
          <newvalue>Inactive_Unconfigured</newvalue>
        </mapping>
        <mapping>
          <value>6</value>
          <newvalue>Offline_unconfigured</newvalue>
        </mapping>
        <mapping>
          <value>7</value>
          <newvalue>Excluded</newvalue>
        </mapping>
        <mapping>
          <value>8</value>
          <newvalue>on</newvalue>
        </mapping>
        <mapping>
          <value>9</value>
          <newvalue>off</newvalue>
        </mapping>
        <mapping>
          <value>10</value>
          <newvalue>slow_flashing</newvalue>
        </mapping>
        <mapping>
          <value>11</value>
          <newvalue>degraded_paths</newvalue>
        </mapping>
        <mapping>
          <value>12</value>
          <newvalue>degraded_ports</newvalue>
        </mapping>
        <mapping>
          <value>100</value>
          <newvalue>Unknown</newvalue>
        </mapping>
      </mappings>
    </value_map>
  </value_maps>
</zabbix_export>