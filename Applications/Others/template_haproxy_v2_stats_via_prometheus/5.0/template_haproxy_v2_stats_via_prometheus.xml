<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
  <version>5.0</version>
  <date>2021-10-22T10:09:09Z</date>
  <groups>
    <group>
      <name>_Templates_Linux</name>
    </group>
  </groups>
  <templates>
    <template>
      <template>_T_Zbx_Lin_HAPROXY2_stats_Prometheus</template>
      <name>_T_Zbx_Lin_HAPROXY2_stats_Prometheus</name>
      <description>frontend stats bind *:8880 http-request use-service prometheus-exporter if { path /metrics } stats enable stats uri /stats stats refresh 10s</description>
      <groups>
        <group>
          <name>_Templates_Linux</name>
        </group>
      </groups>
      <applications>
        <application>
          <name>Linux : App : Haproxy</name>
        </application>
      </applications>
      <items>
        <item>
          <name>Haproxy Prometheus Metrics</name>
          <type>HTTP_AGENT</type>
          <key>haproxy.prometheus.allmetrics</key>
          <history>0</history>
          <trends>0</trends>
          <value_type>TEXT</value_type>
          <applications>
            <application>
              <name>Linux : App : Haproxy</name>
            </application>
          </applications>
          <url>http://{HOST.CONN}:8880/metrics</url>
        </item>
      </items>
      <discovery_rules>
        <discovery_rule>
          <name>HAProxy Backend Discover</name>
          <type>DEPENDENT</type>
          <key>haproxy.backend.discovery</key>
          <delay>0</delay>
          <filter>
            <conditions>
              <condition>
                <macro>{#BACKEND_NAME}</macro>
                <value>@HAProxyNotStats</value>
                <formulaid>A</formulaid>
              </condition>
            </conditions>
          </filter>
          <lifetime>0d</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>backend [{#BACKEND_NAME}] active</name>
              <type>DEPENDENT</type>
              <key>haproxy.stats[{#BACKEND_NAME},BACKEND,act]</key>
              <delay>0</delay>
              <history>1d</history>
              <application_prototypes>
                <application_prototype>
                  <name>Linux : App : Haproxy : Backends : {#BACKEND_NAME}</name>
                </application_prototype>
              </application_prototypes>
              <preprocessing>
                <step>
                  <type>PROMETHEUS_PATTERN</type>
                  <params>haproxy_backend_active_servers{proxy="{#BACKEND_NAME}"}</params>
                </step>
              </preprocessing>
              <master_item>
                <key>haproxy.prometheus.allmetrics</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>backend [{#BACKEND_NAME}] backup</name>
              <type>DEPENDENT</type>
              <key>haproxy.stats[{#BACKEND_NAME},BACKEND,bck]</key>
              <delay>0</delay>
              <history>1d</history>
              <application_prototypes>
                <application_prototype>
                  <name>Linux : App : Haproxy : Backends : {#BACKEND_NAME}</name>
                </application_prototype>
              </application_prototypes>
              <preprocessing>
                <step>
                  <type>PROMETHEUS_PATTERN</type>
                  <params>haproxy_backend_backup_servers{proxy="{#BACKEND_NAME}"}</params>
                </step>
              </preprocessing>
              <master_item>
                <key>haproxy.prometheus.allmetrics</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>backend [{#BACKEND_NAME}] backend up-down transitions</name>
              <type>DEPENDENT</type>
              <key>haproxy.stats[{#BACKEND_NAME},BACKEND,chkdown]</key>
              <delay>0</delay>
              <history>1d</history>
              <application_prototypes>
                <application_prototype>
                  <name>Linux : App : Haproxy : Backends : {#BACKEND_NAME}</name>
                </application_prototype>
              </application_prototypes>
              <preprocessing>
                <step>
                  <type>PROMETHEUS_PATTERN</type>
                  <params>haproxy_backend_check_up_down_total{proxy="{#BACKEND_NAME}"}</params>
                </step>
              </preprocessing>
              <master_item>
                <key>haproxy.prometheus.allmetrics</key>
              </master_item>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last(0)}>{last(#1)}</expression>
                  <name>Backend {#BACKEND_NAME} number of down state change</name>
                  <priority>HIGH</priority>
                  <manual_close>YES</manual_close>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
            <item_prototype>
              <name>backend [{#BACKEND_NAME}] downtime</name>
              <type>DEPENDENT</type>
              <key>haproxy.stats[{#BACKEND_NAME},BACKEND,downtime]</key>
              <delay>0</delay>
              <history>1d</history>
              <units>s</units>
              <application_prototypes>
                <application_prototype>
                  <name>Linux : App : Haproxy : Backends : {#BACKEND_NAME}</name>
                </application_prototype>
              </application_prototypes>
              <preprocessing>
                <step>
                  <type>PROMETHEUS_PATTERN</type>
                  <params>haproxy_backend_downtime_seconds_total{proxy="{#BACKEND_NAME}"}</params>
                </step>
              </preprocessing>
              <master_item>
                <key>haproxy.prometheus.allmetrics</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>backend [{#BACKEND_NAME}] Number of available servers</name>
              <type>DEPENDENT</type>
              <key>haproxy.stats[{#BACKEND_NAME},BACKEND,nb_available_servers_by_backend]</key>
              <delay>0</delay>
              <history>1d</history>
              <application_prototypes>
                <application_prototype>
                  <name>Linux : App : Haproxy : Backends : {#BACKEND_NAME}</name>
                </application_prototype>
              </application_prototypes>
              <preprocessing>
                <step>
                  <type>PROMETHEUS_TO_JSON</type>
                  <params>haproxy_server_status{proxy="{#BACKEND_NAME}"}==1</params>
                  <error_handler>CUSTOM_VALUE</error_handler>
                  <error_handler_params>0</error_handler_params>
                </step>
                <step>
                  <type>JSONPATH</type>
                  <params>$.*.labels.server</params>
                  <error_handler>CUSTOM_VALUE</error_handler>
                  <error_handler_params>0</error_handler_params>
                </step>
                <step>
                  <type>JAVASCRIPT</type>
                  <params>return value.split(",").length</params>
                </step>
              </preprocessing>
              <master_item>
                <key>haproxy.prometheus.allmetrics</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>backend [{#BACKEND_NAME}] Number of servers</name>
              <type>DEPENDENT</type>
              <key>haproxy.stats[{#BACKEND_NAME},BACKEND,nb_servers_by_backend]</key>
              <delay>0</delay>
              <history>1d</history>
              <application_prototypes>
                <application_prototype>
                  <name>Linux : App : Haproxy : Backends : {#BACKEND_NAME}</name>
                </application_prototype>
              </application_prototypes>
              <preprocessing>
                <step>
                  <type>PROMETHEUS_TO_JSON</type>
                  <params>haproxy_server_status{proxy="{#BACKEND_NAME}"}</params>
                  <error_handler>CUSTOM_VALUE</error_handler>
                  <error_handler_params>0</error_handler_params>
                </step>
                <step>
                  <type>JSONPATH</type>
                  <params>$.*.labels.server</params>
                  <error_handler>CUSTOM_VALUE</error_handler>
                  <error_handler_params>0</error_handler_params>
                </step>
                <step>
                  <type>JAVASCRIPT</type>
                  <params>return value.split(",").length</params>
                </step>
              </preprocessing>
              <master_item>
                <key>haproxy.prometheus.allmetrics</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>backend [{#BACKEND_NAME}] current sessions</name>
              <type>DEPENDENT</type>
              <key>haproxy.stats[{#BACKEND_NAME},BACKEND,scur]</key>
              <delay>0</delay>
              <history>1d</history>
              <units>ses</units>
              <application_prototypes>
                <application_prototype>
                  <name>Linux : App : Haproxy : Backends : {#BACKEND_NAME}</name>
                </application_prototype>
              </application_prototypes>
              <preprocessing>
                <step>
                  <type>PROMETHEUS_PATTERN</type>
                  <params>haproxy_backend_current_sessions{proxy="{#BACKEND_NAME}"}</params>
                </step>
              </preprocessing>
              <master_item>
                <key>haproxy.prometheus.allmetrics</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>backend [{#BACKEND_NAME}] max sessions</name>
              <type>DEPENDENT</type>
              <key>haproxy.stats[{#BACKEND_NAME},BACKEND,smax]</key>
              <delay>0</delay>
              <history>1d</history>
              <units>ses</units>
              <application_prototypes>
                <application_prototype>
                  <name>Linux : App : Haproxy : Backends : {#BACKEND_NAME}</name>
                </application_prototype>
              </application_prototypes>
              <preprocessing>
                <step>
                  <type>PROMETHEUS_PATTERN</type>
                  <params>haproxy_backend_max_sessions{proxy="{#BACKEND_NAME}"}</params>
                </step>
              </preprocessing>
              <master_item>
                <key>haproxy.prometheus.allmetrics</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>backend [{#BACKEND_NAME}] status</name>
              <type>DEPENDENT</type>
              <key>haproxy.stats[{#BACKEND_NAME},BACKEND,status]</key>
              <delay>0</delay>
              <history>1d</history>
              <application_prototypes>
                <application_prototype>
                  <name>Linux : App : Haproxy : Backends : {#BACKEND_NAME}</name>
                </application_prototype>
              </application_prototypes>
              <preprocessing>
                <step>
                  <type>PROMETHEUS_PATTERN</type>
                  <params>haproxy_backend_status{proxy="{#BACKEND_NAME}"}</params>
                </step>
              </preprocessing>
              <master_item>
                <key>haproxy.prometheus.allmetrics</key>
              </master_item>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last(#1)}&lt;>1</expression>
                  <name>Backend {#BACKEND_NAME} state is not UP</name>
                  <priority>HIGH</priority>
                  <manual_close>YES</manual_close>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
          </item_prototypes>
          <trigger_prototypes>
            <trigger_prototype>
              <expression>({_T_Zbx_Lin_HAPROXY2_stats_Prometheus:haproxy.stats[{#BACKEND_NAME},BACKEND,nb_available_servers_by_backend].last()} / {_T_Zbx_Lin_HAPROXY2_stats_Prometheus:haproxy.stats[{#BACKEND_NAME},BACKEND,nb_servers_by_backend].last()} ) &lt;0.5</expression>
              <name>Backend {#BACKEND_NAME} is degraded</name>
              <priority>AVERAGE</priority>
              <manual_close>YES</manual_close>
            </trigger_prototype>
          </trigger_prototypes>
          <master_item>
            <key>haproxy.prometheus.allmetrics</key>
          </master_item>
          <lld_macro_paths>
            <lld_macro_path>
              <lld_macro>{#BACKEND_NAME}</lld_macro>
              <path>$.proxy</path>
            </lld_macro_path>
          </lld_macro_paths>
          <preprocessing>
            <step>
              <type>PROMETHEUS_TO_JSON</type>
              <params>haproxy_backend_status</params>
            </step>
            <step>
              <type>JSONPATH</type>
              <params>$.*.labels</params>
            </step>
          </preprocessing>
        </discovery_rule>
        <discovery_rule>
          <name>HAProxy Frontend Discover</name>
          <type>DEPENDENT</type>
          <key>haproxy.frontend.discovery</key>
          <delay>0</delay>
          <lifetime>0d</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>frontend [{#FRONTEND_NAME}] current sessions</name>
              <type>DEPENDENT</type>
              <key>haproxy.stats[{#FRONTEND_NAME},FRONTEND,scur]</key>
              <delay>0</delay>
              <history>1d</history>
              <trends>30d</trends>
              <units>ses</units>
              <application_prototypes>
                <application_prototype>
                  <name>Linux : App : Haproxy : Frontends : {#FRONTEND_NAME}</name>
                </application_prototype>
              </application_prototypes>
              <valuemap>
                <name>_T_Zbx_Lin_HAPROXY_Prometheus:frontend status</name>
              </valuemap>
              <preprocessing>
                <step>
                  <type>PROMETHEUS_PATTERN</type>
                  <params>haproxy_frontend_current_sessions{proxy="{#FRONTEND_NAME}"}</params>
                </step>
              </preprocessing>
              <master_item>
                <key>haproxy.prometheus.allmetrics</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>frontend [{#FRONTEND_NAME}] session limit</name>
              <type>DEPENDENT</type>
              <key>haproxy.stats[{#FRONTEND_NAME},FRONTEND,slim]</key>
              <delay>0</delay>
              <history>1d</history>
              <trends>1d</trends>
              <units>ses</units>
              <application_prototypes>
                <application_prototype>
                  <name>Linux : App : Haproxy : Frontends : {#FRONTEND_NAME}</name>
                </application_prototype>
              </application_prototypes>
              <valuemap>
                <name>_T_Zbx_Lin_HAPROXY_Prometheus:frontend status</name>
              </valuemap>
              <preprocessing>
                <step>
                  <type>PROMETHEUS_PATTERN</type>
                  <params>haproxy_frontend_limit_sessions{proxy="{#FRONTEND_NAME}"}</params>
                </step>
              </preprocessing>
              <master_item>
                <key>haproxy.prometheus.allmetrics</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>frontend [{#FRONTEND_NAME}] max sessions</name>
              <type>DEPENDENT</type>
              <key>haproxy.stats[{#FRONTEND_NAME},FRONTEND,smax]</key>
              <delay>0</delay>
              <history>1d</history>
              <trends>30d</trends>
              <units>ses</units>
              <application_prototypes>
                <application_prototype>
                  <name>Linux : App : Haproxy : Frontends : {#FRONTEND_NAME}</name>
                </application_prototype>
              </application_prototypes>
              <preprocessing>
                <step>
                  <type>PROMETHEUS_PATTERN</type>
                  <params>haproxy_frontend_max_sessions{proxy="{#FRONTEND_NAME}"}</params>
                </step>
              </preprocessing>
              <master_item>
                <key>haproxy.prometheus.allmetrics</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>frontend [{#FRONTEND_NAME}] status</name>
              <type>DEPENDENT</type>
              <key>haproxy.stats[{#FRONTEND_NAME},FRONTEND,status]</key>
              <delay>0</delay>
              <history>1d</history>
              <trends>0</trends>
              <application_prototypes>
                <application_prototype>
                  <name>Linux : App : Haproxy : Frontends : {#FRONTEND_NAME}</name>
                </application_prototype>
              </application_prototypes>
              <valuemap>
                <name>_T_Zbx_Lin_HAPROXY_Prometheus:frontend status</name>
              </valuemap>
              <preprocessing>
                <step>
                  <type>PROMETHEUS_PATTERN</type>
                  <params>haproxy_frontend_status{proxy="{#FRONTEND_NAME}"}</params>
                </step>
              </preprocessing>
              <master_item>
                <key>haproxy.prometheus.allmetrics</key>
              </master_item>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last(#1)}&lt;>1</expression>
                  <name>Frontend {#FRONTEND_NAME} state is not OPEN</name>
                  <priority>HIGH</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
          </item_prototypes>
          <trigger_prototypes>
            <trigger_prototype>
              <expression>{_T_Zbx_Lin_HAPROXY2_stats_Prometheus:haproxy.stats[{#FRONTEND_NAME},FRONTEND,scur].last(0)} * 100 / {_T_Zbx_Lin_HAPROXY2_stats_Prometheus:haproxy.stats[{#FRONTEND_NAME},FRONTEND,slim].last(0)} > 90</expression>
              <name>Frontend {#FRONTEND_NAME} current connexion > 90% of limit</name>
              <priority>AVERAGE</priority>
            </trigger_prototype>
            <trigger_prototype>
              <expression>{_T_Zbx_Lin_HAPROXY2_stats_Prometheus:haproxy.stats[{#FRONTEND_NAME},FRONTEND,scur].last(0)} * 100 / {_T_Zbx_Lin_HAPROXY2_stats_Prometheus:haproxy.stats[{#FRONTEND_NAME},FRONTEND,slim].last(0)} > 95</expression>
              <name>Frontend {#FRONTEND_NAME} current connexion > 95% of limit</name>
              <priority>HIGH</priority>
            </trigger_prototype>
          </trigger_prototypes>
          <master_item>
            <key>haproxy.prometheus.allmetrics</key>
          </master_item>
          <lld_macro_paths>
            <lld_macro_path>
              <lld_macro>{#FRONTEND_NAME}</lld_macro>
              <path>$.proxy</path>
            </lld_macro_path>
          </lld_macro_paths>
          <preprocessing>
            <step>
              <type>PROMETHEUS_TO_JSON</type>
              <params>haproxy_frontend_status</params>
            </step>
            <step>
              <type>JSONPATH</type>
              <params>$.*.labels</params>
            </step>
          </preprocessing>
        </discovery_rule>
        <discovery_rule>
          <name>HAProxy Server discovery</name>
          <type>DEPENDENT</type>
          <key>haproxy.server.discovery</key>
          <delay>0</delay>
          <lifetime>0d</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>Server [{#BACKEND_NAME}/{#SERVER_NAME}] backend server up-down transitions</name>
              <type>DEPENDENT</type>
              <key>haproxy.stats[{#BACKEND_NAME},{#SERVER_NAME},chkdown]</key>
              <delay>0</delay>
              <history>1d</history>
              <trends>30d</trends>
              <application_prototypes>
                <application_prototype>
                  <name>Linux : App : Haproxy : Servers : {#BACKEND_NAME}/{#SERVER_NAME}</name>
                </application_prototype>
              </application_prototypes>
              <preprocessing>
                <step>
                  <type>PROMETHEUS_PATTERN</type>
                  <params>haproxy_server_check_up_down_total{proxy="{#BACKEND_NAME}",server="{#SERVER_NAME}"}</params>
                </step>
              </preprocessing>
              <master_item>
                <key>haproxy.prometheus.allmetrics</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>Server [{#BACKEND_NAME}/{#SERVER_NAME}] backend server downtime</name>
              <type>DEPENDENT</type>
              <key>haproxy.stats[{#BACKEND_NAME},{#SERVER_NAME},downtime]</key>
              <delay>0</delay>
              <history>1d</history>
              <trends>90d</trends>
              <units>s</units>
              <application_prototypes>
                <application_prototype>
                  <name>Linux : App : Haproxy : Servers : {#BACKEND_NAME}/{#SERVER_NAME}</name>
                </application_prototype>
              </application_prototypes>
              <preprocessing>
                <step>
                  <type>PROMETHEUS_PATTERN</type>
                  <params>haproxy_server_downtime_seconds_total{proxy="{#BACKEND_NAME}",server="{#SERVER_NAME}"}</params>
                </step>
              </preprocessing>
              <master_item>
                <key>haproxy.prometheus.allmetrics</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>Server [{#BACKEND_NAME}/{#SERVER_NAME}] backend server status</name>
              <type>DEPENDENT</type>
              <key>haproxy.stats[{#BACKEND_NAME},{#SERVER_NAME},status]</key>
              <delay>0</delay>
              <history>1d</history>
              <trends>0</trends>
              <application_prototypes>
                <application_prototype>
                  <name>Linux : App : Haproxy : Servers : {#BACKEND_NAME}/{#SERVER_NAME}</name>
                </application_prototype>
              </application_prototypes>
              <valuemap>
                <name>_T_Zbx_Lin_HAPROXY_Prometheus:server status</name>
              </valuemap>
              <preprocessing>
                <step>
                  <type>PROMETHEUS_PATTERN</type>
                  <params>haproxy_server_status{proxy="{#BACKEND_NAME}",server="{#SERVER_NAME}"}</params>
                </step>
              </preprocessing>
              <master_item>
                <key>haproxy.prometheus.allmetrics</key>
              </master_item>
            </item_prototype>
          </item_prototypes>
          <master_item>
            <key>haproxy.prometheus.allmetrics</key>
          </master_item>
          <lld_macro_paths>
            <lld_macro_path>
              <lld_macro>{#BACKEND_NAME}</lld_macro>
              <path>$.proxy</path>
            </lld_macro_path>
            <lld_macro_path>
              <lld_macro>{#SERVER_NAME}</lld_macro>
              <path>$.server</path>
            </lld_macro_path>
          </lld_macro_paths>
          <preprocessing>
            <step>
              <type>PROMETHEUS_TO_JSON</type>
              <params>haproxy_server_status</params>
              <error_handler>CUSTOM_ERROR</error_handler>
              <error_handler_params>No server detected</error_handler_params>
            </step>
            <step>
              <type>JSONPATH</type>
              <params>$.*.labels</params>
            </step>
          </preprocessing>
        </discovery_rule>
      </discovery_rules>
    </template>
  </templates>
  <value_maps>
    <value_map>
      <name>_T_Zbx_Lin_HAPROXY_Prometheus:frontend status</name>
      <mappings>
        <mapping>
          <value>0</value>
          <newvalue>STOP</newvalue>
        </mapping>
        <mapping>
          <value>1</value>
          <newvalue>UP</newvalue>
        </mapping>
        <mapping>
          <value>2</value>
          <newvalue>FULL</newvalue>
        </mapping>
      </mappings>
    </value_map>
    <value_map>
      <name>_T_Zbx_Lin_HAPROXY_Prometheus:server status</name>
      <mappings>
        <mapping>
          <value>0</value>
          <newvalue>DOWN</newvalue>
        </mapping>
        <mapping>
          <value>1</value>
          <newvalue>UP</newvalue>
        </mapping>
        <mapping>
          <value>2</value>
          <newvalue>MAINT</newvalue>
        </mapping>
        <mapping>
          <value>3</value>
          <newvalue>DRAIN</newvalue>
        </mapping>
        <mapping>
          <value>4</value>
          <newvalue>NOLB</newvalue>
        </mapping>
      </mappings>
    </value_map>
  </value_maps>
</zabbix_export>