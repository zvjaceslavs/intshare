<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
  <version>5.0</version>
  <date>2021-11-09T08:44:12Z</date>
  <groups>
    <group>
      <name>Templates</name>
    </group>
  </groups>
  <templates>
    <template>
      <template>OS Linux diskstats</template>
      <name>OS Linux diskstats</name>
      <description>## Description Self-contained template for monitoring disk statistics on Linux systems. Source: https://github.com/frei-style/zabbix-linux-diskstats-template ## Overview This is a self-contained monitoring template to get I/O statistics of block devices on Linux systems. ## Author Manuel Frei</description>
      <groups>
        <group>
          <name>Templates</name>
        </group>
      </groups>
      <applications>
        <application>
          <name>diskstats</name>
        </application>
      </applications>
      <items>
        <item>
          <name>diskstats (master)</name>
          <type>ZABBIX_ACTIVE</type>
          <key>vfs.file.contents[/proc/diskstats]</key>
          <delay>30s</delay>
          <history>0</history>
          <trends>0</trends>
          <value_type>TEXT</value_type>
          <applications>
            <application>
              <name>diskstats</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JAVASCRIPT</type>
              <params>// https://www.kernel.org/doc/Documentation/ABI/testing/procfs-diskstats // https://www.kernel.org/doc/Documentation/admin-guide/iostats.rst function zeroTest(element) { return parseInt(element) === 0; } var returnData = []; var lines = value.split("\n"); var lineCount = lines.length; for(var lineNumber = 0; lineNumber &lt; lineCount; lineNumber++) { var fields = lines[lineNumber].trim().split(/[ ]+/); // skip devices by name if(/^(ram[0-9]+|dm-[0-9]+|loop[0-9]+)$/.test(fields[2])) { continue; } var allZero = fields.slice(3).every(zeroTest); // skip devices where all values are 0 if(allZero) { continue; } var diskData = { "majorNumber": parseInt(fields[0]), "minorNumber": parseInt(fields[1]), "deviceName": fields[2], "readsCompleted": parseInt(fields[3]), "readsMerged": parseInt(fields[4]), "sectorsRead": parseInt(fields[5]), "timeSpentReading": parseInt(fields[6]), "writesCompleted": parseInt(fields[7]), "writesMerged": parseInt(fields[8]), "sectorsWritten": parseInt(fields[9]), "timeSpentWriting": parseInt(fields[10]), "iOsCurrentlyInProgress": parseInt(fields[11]), "timeSpentDoingIOs": parseInt(fields[12]), "weightedTimeSpentDoingIOs": parseInt(fields[13]), } if(fields.length>=18) { diskData["discardsCompleted"] = parseInt(fields[14]); diskData["discardsMerged"] = parseInt(fields[15]); diskData["sectorsDiscarded"] = parseInt(fields[16]); diskData["timeSpentDiscarding"] = parseInt(fields[17]); } if(fields.length>=20) { diskData["flushRequestsCompleted"] = parseInt(fields[18]); diskData["timeSpentFlushing"] = parseInt(fields[19]); } returnData.push(diskData); } return JSON.stringify(returnData);</params>
            </step>
          </preprocessing>
        </item>
      </items>
      <discovery_rules>
        <discovery_rule>
          <name>Discover Block Devices</name>
          <type>DEPENDENT</type>
          <key>linux.diskstats.discovery</key>
          <delay>0</delay>
          <lifetime>7d</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>{#DEVICE_NAME}: discards completed</name>
              <type>DEPENDENT</type>
              <key>linux.diskstats[{#DEVICE_NAME},discardsCompleted]</key>
              <delay>0</delay>
              <units>!requests/s</units>
              <description>This is the total number of discards completed successfully. Linux 4.18+</description>
              <applications>
                <application>
                  <name>diskstats</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$.[?(@.deviceName == "{#DEVICE_NAME}")].discardsCompleted.first()</params>
                </step>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
                <step>
                  <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                  <params>5m</params>
                </step>
              </preprocessing>
              <master_item>
                <key>vfs.file.contents[/proc/diskstats]</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>{#DEVICE_NAME}: discards merged</name>
              <type>DEPENDENT</type>
              <key>linux.diskstats[{#DEVICE_NAME},discardsMerged]</key>
              <delay>0</delay>
              <units>!requests/s</units>
              <description>Discards which are adjacent to each other may be merged for efficiency. Thus two 4K reads may become one 8K read before it is ultimately handed to the disk, and so it will be counted (and queued) as only one I/O. This field lets you know how often this was done. Linux 4.18+</description>
              <applications>
                <application>
                  <name>diskstats</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$.[?(@.deviceName == "{#DEVICE_NAME}")].discardsMerged.first()</params>
                </step>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
                <step>
                  <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                  <params>5m</params>
                </step>
              </preprocessing>
              <master_item>
                <key>vfs.file.contents[/proc/diskstats]</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>{#DEVICE_NAME}: flush requests completed</name>
              <type>DEPENDENT</type>
              <key>linux.diskstats[{#DEVICE_NAME},flushRequestsCompleted]</key>
              <delay>0</delay>
              <units>!requests/s</units>
              <description>This is the number of flush requests completed successfully per second. Block layer combines flush requests and executes at most one at a time. This counts flush requests executed by disk. Not tracked for partitions. Linux 5.5+</description>
              <applications>
                <application>
                  <name>diskstats</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$.[?(@.deviceName == "{#DEVICE_NAME}")].flushRequestsCompleted.first()</params>
                </step>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
                <step>
                  <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                  <params>5m</params>
                </step>
              </preprocessing>
              <master_item>
                <key>vfs.file.contents[/proc/diskstats]</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>{#DEVICE_NAME}: I/Os currently in progress</name>
              <type>DEPENDENT</type>
              <key>linux.diskstats[{#DEVICE_NAME},iOsCurrentlyInProgress]</key>
              <delay>0</delay>
              <units>!I/Os</units>
              <description>Number of I/Os currently in progress.</description>
              <applications>
                <application>
                  <name>diskstats</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$.[?(@.deviceName == "{#DEVICE_NAME}")].iOsCurrentlyInProgress.first()</params>
                </step>
                <step>
                  <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                  <params>5m</params>
                </step>
              </preprocessing>
              <master_item>
                <key>vfs.file.contents[/proc/diskstats]</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>{#DEVICE_NAME}: reads completed</name>
              <type>DEPENDENT</type>
              <key>linux.diskstats[{#DEVICE_NAME},readsCompleted]</key>
              <delay>0</delay>
              <units>!requests/s</units>
              <description>This is the total number of reads completed successfully.</description>
              <applications>
                <application>
                  <name>diskstats</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$.[?(@.deviceName == "{#DEVICE_NAME}")].readsCompleted.first()</params>
                </step>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
                <step>
                  <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                  <params>5m</params>
                </step>
              </preprocessing>
              <master_item>
                <key>vfs.file.contents[/proc/diskstats]</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>{#DEVICE_NAME}: reads merged</name>
              <type>DEPENDENT</type>
              <key>linux.diskstats[{#DEVICE_NAME},readsMerged]</key>
              <delay>0</delay>
              <units>!requests/s</units>
              <description>Number of reads merged per second.</description>
              <applications>
                <application>
                  <name>diskstats</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$.[?(@.deviceName == "{#DEVICE_NAME}")].readsMerged.first()</params>
                </step>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
                <step>
                  <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                  <params>5m</params>
                </step>
              </preprocessing>
              <master_item>
                <key>vfs.file.contents[/proc/diskstats]</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>{#DEVICE_NAME}: sectors discarded</name>
              <type>DEPENDENT</type>
              <key>linux.diskstats[{#DEVICE_NAME},sectorsDiscarded]</key>
              <delay>0</delay>
              <units>!requests/s</units>
              <description>This is the total number of sectors discarded successfully. Linux 4.18+</description>
              <applications>
                <application>
                  <name>diskstats</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$.[?(@.deviceName == "{#DEVICE_NAME}")].sectorsDiscarded.first()</params>
                </step>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
                <step>
                  <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                  <params>5m</params>
                </step>
              </preprocessing>
              <master_item>
                <key>vfs.file.contents[/proc/diskstats]</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>{#DEVICE_NAME}: sectors read</name>
              <type>DEPENDENT</type>
              <key>linux.diskstats[{#DEVICE_NAME},sectorsRead]</key>
              <delay>0</delay>
              <units>!requests/s</units>
              <description>Number of sectors read per second.</description>
              <applications>
                <application>
                  <name>diskstats</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$.[?(@.deviceName == "{#DEVICE_NAME}")].sectorsRead.first()</params>
                </step>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
                <step>
                  <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                  <params>5m</params>
                </step>
              </preprocessing>
              <master_item>
                <key>vfs.file.contents[/proc/diskstats]</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>{#DEVICE_NAME}: sectors written</name>
              <type>DEPENDENT</type>
              <key>linux.diskstats[{#DEVICE_NAME},sectorsWritten]</key>
              <delay>0</delay>
              <units>!requests/s</units>
              <description>This is the total number of sectors written successfully per second.</description>
              <applications>
                <application>
                  <name>diskstats</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$.[?(@.deviceName == "{#DEVICE_NAME}")].sectorsWritten.first()</params>
                </step>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
                <step>
                  <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                  <params>5m</params>
                </step>
              </preprocessing>
              <master_item>
                <key>vfs.file.contents[/proc/diskstats]</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>{#DEVICE_NAME}: time spent discarding</name>
              <type>DEPENDENT</type>
              <key>linux.diskstats[{#DEVICE_NAME},timeSpentDiscarding]</key>
              <delay>0</delay>
              <units>!ms</units>
              <description>This is the total number of milliseconds spent by all discards (as measured from __make_request() to end_that_request_last()). Linux 4.18+</description>
              <applications>
                <application>
                  <name>diskstats</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$.[?(@.deviceName == "{#DEVICE_NAME}")].timeSpentDiscarding.first()</params>
                </step>
                <step>
                  <type>SIMPLE_CHANGE</type>
                  <params></params>
                </step>
                <step>
                  <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                  <params>5m</params>
                </step>
              </preprocessing>
              <master_item>
                <key>vfs.file.contents[/proc/diskstats]</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>{#DEVICE_NAME}: time spent doing I/Os</name>
              <type>DEPENDENT</type>
              <key>linux.diskstats[{#DEVICE_NAME},timeSpentDoingIOs]</key>
              <delay>0</delay>
              <units>!ms</units>
              <description>Number of milliseconds spent doing I/Os. Since Linux 5.0 this field counts jiffies when at least one request was started or completed. If request runs more than 2 jiffies then some I/O time might be not accounted in case of concurrent requests.</description>
              <applications>
                <application>
                  <name>diskstats</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$.[?(@.deviceName == "{#DEVICE_NAME}")].timeSpentDoingIOs.first()</params>
                </step>
                <step>
                  <type>SIMPLE_CHANGE</type>
                  <params></params>
                </step>
                <step>
                  <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                  <params>5m</params>
                </step>
              </preprocessing>
              <master_item>
                <key>vfs.file.contents[/proc/diskstats]</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>{#DEVICE_NAME}: time spent flushing</name>
              <type>DEPENDENT</type>
              <key>linux.diskstats[{#DEVICE_NAME},timeSpentFlushing]</key>
              <delay>0</delay>
              <units>!ms</units>
              <description>This is the total number of milliseconds spent by all discards (as measured from __make_request() to end_that_request_last()). Linux 5.5+</description>
              <applications>
                <application>
                  <name>diskstats</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$.[?(@.deviceName == "{#DEVICE_NAME}")].timeSpentFlushing.first()</params>
                </step>
                <step>
                  <type>SIMPLE_CHANGE</type>
                  <params></params>
                </step>
                <step>
                  <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                  <params>5m</params>
                </step>
              </preprocessing>
              <master_item>
                <key>vfs.file.contents[/proc/diskstats]</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>{#DEVICE_NAME}: time spent reading</name>
              <type>DEPENDENT</type>
              <key>linux.diskstats[{#DEVICE_NAME},timeSpentReading]</key>
              <delay>0</delay>
              <units>!ms</units>
              <description>This is the total number of milliseconds spent by all reads (as measured from __make_request() to end_that_request_last()).</description>
              <applications>
                <application>
                  <name>diskstats</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$.[?(@.deviceName == "{#DEVICE_NAME}")].timeSpentReading.first()</params>
                </step>
                <step>
                  <type>SIMPLE_CHANGE</type>
                  <params></params>
                </step>
                <step>
                  <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                  <params>5m</params>
                </step>
              </preprocessing>
              <master_item>
                <key>vfs.file.contents[/proc/diskstats]</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>{#DEVICE_NAME}: time spent writing</name>
              <type>DEPENDENT</type>
              <key>linux.diskstats[{#DEVICE_NAME},timeSpentWriting]</key>
              <delay>0</delay>
              <units>!ms</units>
              <description>This is the total number of milliseconds spent by all writes (as measured from __make_request() to end_that_request_last()).</description>
              <applications>
                <application>
                  <name>diskstats</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$.[?(@.deviceName == "{#DEVICE_NAME}")].timeSpentWriting.first()</params>
                </step>
                <step>
                  <type>SIMPLE_CHANGE</type>
                  <params></params>
                </step>
                <step>
                  <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                  <params>5m</params>
                </step>
              </preprocessing>
              <master_item>
                <key>vfs.file.contents[/proc/diskstats]</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>{#DEVICE_NAME}: weighted time spent doing I/Os</name>
              <type>DEPENDENT</type>
              <key>linux.diskstats[{#DEVICE_NAME},weightedTimeSpentDoingIOs]</key>
              <delay>0</delay>
              <units>!ms</units>
              <description>This is the numer per second of each of this actions: I/O start, I/O completion, I/O merge, or read. This can provide an easy measure of both I/O completion time and the backlog that may be accumulating.</description>
              <applications>
                <application>
                  <name>diskstats</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$.[?(@.deviceName == "{#DEVICE_NAME}")].weightedTimeSpentDoingIOs.first()</params>
                </step>
                <step>
                  <type>SIMPLE_CHANGE</type>
                  <params></params>
                </step>
                <step>
                  <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                  <params>5m</params>
                </step>
              </preprocessing>
              <master_item>
                <key>vfs.file.contents[/proc/diskstats]</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>{#DEVICE_NAME}: writes completed</name>
              <type>DEPENDENT</type>
              <key>linux.diskstats[{#DEVICE_NAME},writesCompleted]</key>
              <delay>0</delay>
              <units>!requests/s</units>
              <description>This is the total number of writes completed successfully per second.</description>
              <applications>
                <application>
                  <name>diskstats</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$.[?(@.deviceName == "{#DEVICE_NAME}")].writesCompleted.first()</params>
                </step>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
                <step>
                  <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                  <params>5m</params>
                </step>
              </preprocessing>
              <master_item>
                <key>vfs.file.contents[/proc/diskstats]</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>{#DEVICE_NAME}: writes merged</name>
              <type>DEPENDENT</type>
              <key>linux.diskstats[{#DEVICE_NAME},writesMerged]</key>
              <delay>0</delay>
              <units>!requests/s</units>
              <description>This is the total number of writes merged per second.</description>
              <applications>
                <application>
                  <name>diskstats</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$.[?(@.deviceName == "{#DEVICE_NAME}")].writesMerged.first()</params>
                </step>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
                <step>
                  <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                  <params>5m</params>
                </step>
              </preprocessing>
              <master_item>
                <key>vfs.file.contents[/proc/diskstats]</key>
              </master_item>
            </item_prototype>
          </item_prototypes>
          <graph_prototypes>
            <graph_prototype>
              <name>{#DEVICE_NAME}: I/O Times</name>
              <graph_items>
                <graph_item>
                  <color>1A7C11</color>
                  <item>
                    <host>OS Linux diskstats</host>
                    <key>linux.diskstats[{#DEVICE_NAME},timeSpentReading]</key>
                  </item>
                </graph_item>
                <graph_item>
                  <sortorder>1</sortorder>
                  <color>3949AB</color>
                  <item>
                    <host>OS Linux diskstats</host>
                    <key>linux.diskstats[{#DEVICE_NAME},timeSpentWriting]</key>
                  </item>
                </graph_item>
              </graph_items>
            </graph_prototype>
            <graph_prototype>
              <name>{#DEVICE_NAME}: IOPS</name>
              <graph_items>
                <graph_item>
                  <color>1A7C11</color>
                  <item>
                    <host>OS Linux diskstats</host>
                    <key>linux.diskstats[{#DEVICE_NAME},readsCompleted]</key>
                  </item>
                </graph_item>
                <graph_item>
                  <sortorder>1</sortorder>
                  <color>303F9F</color>
                  <item>
                    <host>OS Linux diskstats</host>
                    <key>linux.diskstats[{#DEVICE_NAME},writesCompleted]</key>
                  </item>
                </graph_item>
              </graph_items>
            </graph_prototype>
          </graph_prototypes>
          <master_item>
            <key>vfs.file.contents[/proc/diskstats]</key>
          </master_item>
          <lld_macro_paths>
            <lld_macro_path>
              <lld_macro>{#DEVICE_NAME}</lld_macro>
              <path>$.deviceName</path>
            </lld_macro_path>
          </lld_macro_paths>
        </discovery_rule>
      </discovery_rules>
    </template>
  </templates>
</zabbix_export>