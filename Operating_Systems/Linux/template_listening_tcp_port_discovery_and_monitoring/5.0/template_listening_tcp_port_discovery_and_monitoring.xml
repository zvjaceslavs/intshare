<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
  <version>5.0</version>
  <date>2021-11-09T05:15:47Z</date>
  <groups>
    <group>
      <name>Templates/Modules</name>
    </group>
  </groups>
  <templates>
    <template>
      <template>TCP port monitoring</template>
      <name>TCP port monitoring</name>
      <description>## Overview The following template is utilizing Zabbix agent to discover TCP ports in listening state. Underneath the hood it will use the command: ``` ss --tcp --listening --numeric ``` This means the remote commands must be enabled. Or you need to convert it as an UserParameter. See discovery section for details. After that, it will use JavaScript preprocessing step to transform the output suitable for discovery. By default, the item will check port every 5 minutes. If the port is not reachable for 5 consecutive checks (25 minutes) it is a called a "Disaster". Explaining video: &lt;https://www.youtube.com/watch?v=BwQwWXoGzGM> Cheers!</description>
      <groups>
        <group>
          <name>Templates/Modules</name>
        </group>
      </groups>
      <applications>
        <application>
          <name>TCP port</name>
        </application>
      </applications>
      <discovery_rules>
        <discovery_rule>
          <name>Listening TCP port discovery</name>
          <key>system.run["ss --tcp --listening --numeric"]</key>
          <delay>1d</delay>
          <filter>
            <conditions>
              <condition>
                <macro>{#PORT}</macro>
                <value>{$TCP.PORT.NOT_MATCHES}</value>
                <operator>NOT_MATCHES_REGEX</operator>
                <formulaid>A</formulaid>
              </condition>
              <condition>
                <macro>{#PORT}</macro>
                <value>{$TCP.PORT.MATCHES}</value>
                <formulaid>B</formulaid>
              </condition>
            </conditions>
          </filter>
          <description>Install UserParameter for zabbix-agent: echo 'UserParameter=ss.tcp.listening,netstat --tcp --listening --numeric-ports' | sudo tee /etc/zabbix/zabbix_agentd.d/ss.tcp.listening.conf Install UserParameter for zabbix-agent2: echo 'UserParameter=ss.tcp.listening,netstat --tcp --listening --numeric-ports' | sudo tee /etc/zabbix/zabbix_agent2.d/ss.tcp.listening.conf Restart Zabbix agent systemctl restart zabbix-agent systemctl restart zabbix-agent2 In this section replace Key: system.run["ss --tcp --listening --numeric"] with: netstat.tcp.listening</description>
          <item_prototypes>
            <item_prototype>
              <name>Port {#PORT} is listening</name>
              <type>ZABBIX_ACTIVE</type>
              <key>net.tcp.listen[{#PORT}]</key>
              <delay>5m</delay>
              <applications>
                <application>
                  <name>TCP port</name>
                </application>
              </applications>
              <valuemap>
                <name>Service state</name>
              </valuemap>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{max(#5)}=0</expression>
                  <name>Port {#PORT} is down for some time</name>
                  <priority>DISASTER</priority>
                  <manual_close>YES</manual_close>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
          </item_prototypes>
          <preprocessing>
            <step>
              <type>JAVASCRIPT</type>
              <params>var lld = []; var lines = value.match(/:[0-9]+ /gm).reduce(function(a,b){if(a.indexOf(b) &lt; 0)a.push(b);return a;},[]).join("\n").replace(/:/g,"").replace(/ /g,"").split("\n"); var lines_num = lines.length; for (i = 0; i &lt; lines_num; i++) { var row = {}; row["{#PORT}"] = lines[i] lld.push(row); } return JSON.stringify(lld);</params>
            </step>
          </preprocessing>
        </discovery_rule>
      </discovery_rules>
      <macros>
        <macro>
          <macro>{$TCP.PORT.MATCHES}</macro>
          <value>.*</value>
        </macro>
        <macro>
          <macro>{$TCP.PORT.NOT_MATCHES}</macro>
          <value>^\s$</value>
        </macro>
      </macros>
    </template>
  </templates>
  <value_maps>
    <value_map>
      <name>Service state</name>
      <mappings>
        <mapping>
          <value>0</value>
          <newvalue>Down</newvalue>
        </mapping>
        <mapping>
          <value>1</value>
          <newvalue>Up</newvalue>
        </mapping>
      </mappings>
    </value_map>
  </value_maps>
</zabbix_export>