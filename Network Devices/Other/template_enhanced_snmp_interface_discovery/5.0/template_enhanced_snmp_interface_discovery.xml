<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
  <version>5.0</version>
  <date>2021-10-19T20:37:36Z</date>
  <groups>
    <group>
      <name>Templates</name>
    </group>
  </groups>
  <templates>
    <template>
      <template>enhanced_snmp_interface_discovery</template>
      <name>Enhanced SNMP Interface Discovery</name>
      <description>Enhanced SNMP interface discovery 1.0.1 Template made by Twan Kamans. https://www.twan-it.nl This template searches for 4 different categories: - Interfaces that are administratively disabled - Interfaces that are working onder normal condition - Interfaces with priority, such as switch uplink - Virtual interfaces such as tunnel, port channel and vlan interfaces. Revision 0.7 - Added support for virtual interfaces Revision 0.7.1 - Added support for (filtering) stack switch ports - Fixed a bug in which VLAN interfaces with the number 0 in them would still be discovered by the normal LLD rule Revision 0.7.2 - Filtering VLAN's 1002 - 1005 interfaces - Added support for subinterfaces for Junos Revision 0.8 - Completely revisited the filtering of items using Regex due to introduction of Junos devices. You can adjust the regex for physical devices using a macro. Revision 0.9 - Added support for enduser ports. Triggers will not activate if port description contains macro value. Revision 1.0 - Tested template on posible errors. Revision 1.0.1 - Added bandwidth statistics for virtual interfaces. Revision 1.0.2 - Bandwidth triggers now make use of user macro context, making individual port bandwidth limits posible. - The interface changed state severity has been lowered by default. The new default severity for all interfaces is "warning". Exceptions to this are the priority interfaces which are "average".</description>
      <groups>
        <group>
          <name>Templates</name>
        </group>
      </groups>
      <applications>
        <application>
          <name>Network Interfaces</name>
        </application>
      </applications>
      <items>
        <item>
          <name>Total amount of interfaces</name>
          <type>SNMP_AGENT</type>
          <snmp_oid>IF-MIB::ifNumber.0</snmp_oid>
          <key>net.if.total</key>
          <delay>10m</delay>
          <history>1w</history>
          <trends>0</trends>
          <description>Shows the total amount of interfaces.</description>
          <applications>
            <application>
              <name>Network Interfaces</name>
            </application>
          </applications>
        </item>
      </items>
      <discovery_rules>
        <discovery_rule>
          <name>Network Interfaces Discovery - Normal</name>
          <type>SNMP_AGENT</type>
          <snmp_oid>discovery[{#SNMPVALUE},1.3.6.1.2.1.2.2.1.8,{#IFADMINSTATUS},1.3.6.1.2.1.2.2.1.7,{#IFALIAS},1.3.6.1.2.1.31.1.1.1.18,{#IFNAME},1.3.6.1.2.1.31.1.1.1.1,{#IFDESCR},1.3.6.1.2.1.2.2.1.2,{#IFTYPE},1.3.6.1.2.1.2.2.1.3]</snmp_oid>
          <key>net.if.discovery</key>
          <delay>{$INT_LLD_UPDATE_INTERVAL}</delay>
          <filter>
            <conditions>
              <condition>
                <macro>{#IFALIAS}</macro>
                <value>^(?!{$INT_PRIO_STRING}).*</value>
                <formulaid>B</formulaid>
              </condition>
              <condition>
                <macro>{#IFADMINSTATUS}</macro>
                <value>(1|3)</value>
                <formulaid>A</formulaid>
              </condition>
              <condition>
                <macro>{#IFNAME}</macro>
                <value>{$INT_NAME_PHYSICAL}</value>
                <formulaid>C</formulaid>
              </condition>
            </conditions>
          </filter>
          <lifetime>8h</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>Interface {#IFNAME}: Admin status</name>
              <type>SNMP_AGENT</type>
              <snmp_oid>1.3.6.1.2.1.2.2.1.7.{#SNMPINDEX}</snmp_oid>
              <key>net.if.status[ifAdminStatus.{#SNMPINDEX}]</key>
              <history>1w</history>
              <trends>0</trends>
              <applications>
                <application>
                  <name>Network Interfaces</name>
                </application>
              </applications>
              <valuemap>
                <name>IF-MIB::ifAdminStatus</name>
              </valuemap>
            </item_prototype>
            <item_prototype>
              <name>Interface {#IFNAME}: Alias</name>
              <type>SNMP_AGENT</type>
              <snmp_oid>1.3.6.1.2.1.31.1.1.1.18.{#SNMPINDEX}</snmp_oid>
              <key>net.if.status[ifAlias.{#SNMPINDEX}]</key>
              <delay>1h</delay>
              <history>1w</history>
              <trends>0</trends>
              <value_type>TEXT</value_type>
              <applications>
                <application>
                  <name>Network Interfaces</name>
                </application>
              </applications>
            </item_prototype>
            <item_prototype>
              <name>Interface {#IFNAME}: Inbound packets discarded</name>
              <type>SNMP_AGENT</type>
              <snmp_oid>1.3.6.1.2.1.2.2.1.13.{#SNMPINDEX}</snmp_oid>
              <key>net.if.status[ifInDiscards.{#SNMPINDEX}]</key>
              <delay>5m</delay>
              <history>1w</history>
              <applications>
                <application>
                  <name>Network Interfaces</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
              </preprocessing>
            </item_prototype>
            <item_prototype>
              <name>Interface {#IFNAME}: Inbound packets with errors</name>
              <type>SNMP_AGENT</type>
              <snmp_oid>1.3.6.1.2.1.2.2.1.14.{#SNMPINDEX}</snmp_oid>
              <key>net.if.status[ifInErrors.{#SNMPINDEX}]</key>
              <delay>5m</delay>
              <history>1w</history>
              <applications>
                <application>
                  <name>Network Interfaces</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
              </preprocessing>
            </item_prototype>
            <item_prototype>
              <name>Interface {#IFNAME}: Bits received</name>
              <type>SNMP_AGENT</type>
              <snmp_oid>1.3.6.1.2.1.2.2.1.10.{#SNMPINDEX}</snmp_oid>
              <key>net.if.status[ifInOctets.{#SNMPINDEX}]</key>
              <delay>3m</delay>
              <history>30d</history>
              <value_type>FLOAT</value_type>
              <units>bps</units>
              <applications>
                <application>
                  <name>Network Interfaces</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
                <step>
                  <type>MULTIPLIER</type>
                  <params>8</params>
                </step>
              </preprocessing>
            </item_prototype>
            <item_prototype>
              <name>Interface {#IFNAME}: Operational status</name>
              <type>SNMP_AGENT</type>
              <snmp_oid>1.3.6.1.2.1.2.2.1.8.{#SNMPINDEX}</snmp_oid>
              <key>net.if.status[ifOperStatus.{#SNMPINDEX}]</key>
              <history>1w</history>
              <trends>0</trends>
              <applications>
                <application>
                  <name>Network Interfaces</name>
                </application>
              </applications>
              <valuemap>
                <name>IF-MIB::ifOperStatus</name>
              </valuemap>
            </item_prototype>
            <item_prototype>
              <name>Interface {#IFNAME}: Outbound packets discarded</name>
              <type>SNMP_AGENT</type>
              <snmp_oid>1.3.6.1.2.1.2.2.1.19.{#SNMPINDEX}</snmp_oid>
              <key>net.if.status[ifOutDiscards.{#SNMPINDEX}]</key>
              <delay>5m</delay>
              <history>1w</history>
              <applications>
                <application>
                  <name>Network Interfaces</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
              </preprocessing>
            </item_prototype>
            <item_prototype>
              <name>Interface {#IFNAME}: Outbound packets with errors</name>
              <type>SNMP_AGENT</type>
              <snmp_oid>1.3.6.1.2.1.2.2.1.20.{#SNMPINDEX}</snmp_oid>
              <key>net.if.status[ifOutErrors.{#SNMPINDEX}]</key>
              <delay>5m</delay>
              <history>1w</history>
              <applications>
                <application>
                  <name>Network Interfaces</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
              </preprocessing>
            </item_prototype>
            <item_prototype>
              <name>Interface {#IFNAME}: Bits sent</name>
              <type>SNMP_AGENT</type>
              <snmp_oid>1.3.6.1.2.1.2.2.1.16.{#SNMPINDEX}</snmp_oid>
              <key>net.if.status[ifOutOctets.{#SNMPINDEX}]</key>
              <delay>3m</delay>
              <history>30d</history>
              <value_type>FLOAT</value_type>
              <units>bps</units>
              <applications>
                <application>
                  <name>Network Interfaces</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
                <step>
                  <type>MULTIPLIER</type>
                  <params>8</params>
                </step>
              </preprocessing>
            </item_prototype>
            <item_prototype>
              <name>Interface {#IFNAME}: Speed</name>
              <type>SNMP_AGENT</type>
              <snmp_oid>1.3.6.1.2.1.2.2.1.5.{#SNMPINDEX}</snmp_oid>
              <key>net.if.status[ifSpeed.{#SNMPINDEX}]</key>
              <delay>5m</delay>
              <history>1w</history>
              <units>bps</units>
              <description>Speed of the interface</description>
              <applications>
                <application>
                  <name>Network Interfaces</name>
                </application>
              </applications>
            </item_prototype>
          </item_prototypes>
          <trigger_prototypes>
            <trigger_prototype>
              <expression>{enhanced_snmp_interface_discovery:net.if.status[ifOperStatus.{#SNMPINDEX}].avg(3600)}&lt;>2 and {enhanced_snmp_interface_discovery:net.if.status[ifOperStatus.{#SNMPINDEX}].last()}=2 and {enhanced_snmp_interface_discovery:net.if.status[ifAlias.{#SNMPINDEX}].regexp({$INT_NO_TRIGGER_STRING},#3)}=0</expression>
              <recovery_mode>RECOVERY_EXPRESSION</recovery_mode>
              <recovery_expression>{enhanced_snmp_interface_discovery:net.if.status[ifOperStatus.{#SNMPINDEX}].last(#5)}&lt;>2</recovery_expression>
              <name>Interface status has changed on port {#IFNAME}</name>
              <priority>WARNING</priority>
              <description>Triggers when the interface state changes.</description>
            </trigger_prototype>
            <trigger_prototype>
              <expression>{enhanced_snmp_interface_discovery:net.if.status[ifInOctets.{#SNMPINDEX}].avg(10m)}>(({$INT_BANDWIDTH_WARNING:"{#IFNAME}"}/100)*{enhanced_snmp_interface_discovery:net.if.status[ifSpeed.{#SNMPINDEX}].last()}) or {enhanced_snmp_interface_discovery:net.if.status[ifOutOctets.{#SNMPINDEX}].avg(10m)}>(({$INT_BANDWIDTH_WARNING:"{#IFNAME}"}/100)*{enhanced_snmp_interface_discovery:net.if.status[ifSpeed.{#SNMPINDEX}].last()}) and {enhanced_snmp_interface_discovery:net.if.status[ifSpeed.{#SNMPINDEX}].last()}>0</expression>
              <recovery_mode>RECOVERY_EXPRESSION</recovery_mode>
              <recovery_expression>{enhanced_snmp_interface_discovery:net.if.status[ifInOctets.{#SNMPINDEX}].avg(10m)}&lt;((({$INT_BANDWIDTH_WARNING:"{#IFNAME}"}-3)/100)*{enhanced_snmp_interface_discovery:net.if.status[ifSpeed.{#SNMPINDEX}].last()}) or {enhanced_snmp_interface_discovery:net.if.status[ifOutOctets.{#SNMPINDEX}].avg(10m)}&lt;((({$INT_BANDWIDTH_WARNING:"{#IFNAME}"}-3)/100)*{enhanced_snmp_interface_discovery:net.if.status[ifSpeed.{#SNMPINDEX}].last()})</recovery_expression>
              <name>Interface {#IFNAME}: Bandwidth usage over {$INT_BANDWIDTH_WARNING:"{#IFNAME}"}%</name>
              <priority>WARNING</priority>
              <description>Triggers when incoming or outgoing traffic exceeds limit of the INT_BANDWIDTH_WARNING macro.</description>
            </trigger_prototype>
            <trigger_prototype>
              <expression>{enhanced_snmp_interface_discovery:net.if.status[ifInErrors.{#SNMPINDEX}].avg(5m)}>{$INT_ERRORS_WARN} or {enhanced_snmp_interface_discovery:net.if.status[ifOutErrors.{#SNMPINDEX}].avg(5m)}>{$INT_ERRORS_WARN}</expression>
              <name>Interface {#IFNAME}: High error rate</name>
              <priority>WARNING</priority>
              <description>Triggers when incoming or outgoing errors exceeds limit of the INT_ERRORS_WARN macro.</description>
            </trigger_prototype>
            <trigger_prototype>
              <expression>{enhanced_snmp_interface_discovery:net.if.status[ifAdminStatus.{#SNMPINDEX}].last()}&lt;>2 and {enhanced_snmp_interface_discovery:net.if.status[ifOperStatus.{#SNMPINDEX}].avg(1w)}=2 and {$SEARCH_FOR_INACTIVE_PORTS}=1</expression>
              <name>Port {#IFNAME} is enabled but not connected!</name>
              <priority>INFO</priority>
              <description>Zabbix detects a "notconnected" port on {HOST.NAME} Interface {#IFNAME}.</description>
            </trigger_prototype>
          </trigger_prototypes>
          <graph_prototypes>
            <graph_prototype>
              <name>Interface {#IFNAME}: Network statistics</name>
              <graph_items>
                <graph_item>
                  <drawtype>GRADIENT_LINE</drawtype>
                  <color>1A7C11</color>
                  <item>
                    <host>enhanced_snmp_interface_discovery</host>
                    <key>net.if.status[ifInOctets.{#SNMPINDEX}]</key>
                  </item>
                </graph_item>
                <graph_item>
                  <sortorder>1</sortorder>
                  <drawtype>BOLD_LINE</drawtype>
                  <color>2774A4</color>
                  <item>
                    <host>enhanced_snmp_interface_discovery</host>
                    <key>net.if.status[ifOutOctets.{#SNMPINDEX}]</key>
                  </item>
                </graph_item>
                <graph_item>
                  <sortorder>2</sortorder>
                  <color>F63100</color>
                  <yaxisside>RIGHT</yaxisside>
                  <item>
                    <host>enhanced_snmp_interface_discovery</host>
                    <key>net.if.status[ifInDiscards.{#SNMPINDEX}]</key>
                  </item>
                </graph_item>
                <graph_item>
                  <sortorder>3</sortorder>
                  <color>FC6EA3</color>
                  <yaxisside>RIGHT</yaxisside>
                  <item>
                    <host>enhanced_snmp_interface_discovery</host>
                    <key>net.if.status[ifOutDiscards.{#SNMPINDEX}]</key>
                  </item>
                </graph_item>
                <graph_item>
                  <sortorder>4</sortorder>
                  <color>A54F10</color>
                  <yaxisside>RIGHT</yaxisside>
                  <item>
                    <host>enhanced_snmp_interface_discovery</host>
                    <key>net.if.status[ifInErrors.{#SNMPINDEX}]</key>
                  </item>
                </graph_item>
                <graph_item>
                  <sortorder>5</sortorder>
                  <color>6C59DC</color>
                  <yaxisside>RIGHT</yaxisside>
                  <item>
                    <host>enhanced_snmp_interface_discovery</host>
                    <key>net.if.status[ifOutErrors.{#SNMPINDEX}]</key>
                  </item>
                </graph_item>
              </graph_items>
            </graph_prototype>
          </graph_prototypes>
        </discovery_rule>
        <discovery_rule>
          <name>Network Interfaces Discovery - Disabled</name>
          <type>SNMP_AGENT</type>
          <snmp_oid>discovery[{#SNMPVALUE},1.3.6.1.2.1.2.2.1.8,{#IFADMINSTATUS},1.3.6.1.2.1.2.2.1.7,{#IFALIAS},1.3.6.1.2.1.31.1.1.1.18,{#IFNAME},1.3.6.1.2.1.31.1.1.1.1]</snmp_oid>
          <key>net.if.down.discovery</key>
          <delay>{$INT_LLD_UPDATE_INTERVAL}</delay>
          <filter>
            <conditions>
              <condition>
                <macro>{#IFALIAS}</macro>
                <value>^(?!{$INT_PRIO_STRING})</value>
                <formulaid>B</formulaid>
              </condition>
              <condition>
                <macro>{#IFADMINSTATUS}</macro>
                <value>(2)</value>
                <formulaid>A</formulaid>
              </condition>
              <condition>
                <macro>{#IFNAME}</macro>
                <value>{$INT_NAME_PHYSICAL}</value>
                <formulaid>C</formulaid>
              </condition>
            </conditions>
          </filter>
          <lifetime>1h</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>Interface {#IFNAME}: Admin status</name>
              <type>SNMP_AGENT</type>
              <snmp_oid>1.3.6.1.2.1.2.2.1.7.{#SNMPINDEX}</snmp_oid>
              <key>net.if.down.status[ifAdminStatus.{#SNMPINDEX}]</key>
              <delay>3m</delay>
              <history>1d</history>
              <trends>0</trends>
              <description>Shows if interface is administrative disabled.</description>
              <applications>
                <application>
                  <name>Network Interfaces</name>
                </application>
              </applications>
              <valuemap>
                <name>IF-MIB::ifAdminStatus</name>
              </valuemap>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}=1</expression>
                  <name>Port {#IFNAME} has gone UP!</name>
                  <priority>INFO</priority>
                  <description>Interface state has changed. This is most likely due to enabeling an interface.</description>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
          </item_prototypes>
        </discovery_rule>
        <discovery_rule>
          <name>Network Interfaces Discovery - Priority</name>
          <type>SNMP_AGENT</type>
          <snmp_oid>discovery[{#SNMPVALUE},1.3.6.1.2.1.2.2.1.8,{#IFADMINSTATUS},1.3.6.1.2.1.2.2.1.7,{#IFALIAS},1.3.6.1.2.1.31.1.1.1.18,{#IFNAME},1.3.6.1.2.1.31.1.1.1.1,{#IFDESCR},1.3.6.1.2.1.2.2.1.2,{#IFTYPE},1.3.6.1.2.1.2.2.1.3]</snmp_oid>
          <key>net.if.prio.discovery</key>
          <delay>{$INT_LLD_UPDATE_INTERVAL}</delay>
          <filter>
            <evaltype>AND</evaltype>
            <conditions>
              <condition>
                <macro>{#IFALIAS}</macro>
                <value>^({$INT_PRIO_STRING}).*</value>
                <formulaid>A</formulaid>
              </condition>
              <condition>
                <macro>{#IFNAME}</macro>
                <value>{$INT_NAME_PHYSICAL}</value>
                <formulaid>B</formulaid>
              </condition>
            </conditions>
          </filter>
          <item_prototypes>
            <item_prototype>
              <name>Interface {#IFNAME} (priority): Admin status</name>
              <type>SNMP_AGENT</type>
              <snmp_oid>1.3.6.1.2.1.2.2.1.7.{#SNMPINDEX}</snmp_oid>
              <key>net.if.prio.status[ifAdminStatus.{#SNMPINDEX}]</key>
              <delay>30s</delay>
              <history>1w</history>
              <trends>0</trends>
              <applications>
                <application>
                  <name>Network Interfaces</name>
                </application>
              </applications>
              <valuemap>
                <name>IF-MIB::ifAdminStatus</name>
              </valuemap>
            </item_prototype>
            <item_prototype>
              <name>Interface {#IFNAME} (priority): Alias</name>
              <type>SNMP_AGENT</type>
              <snmp_oid>1.3.6.1.2.1.31.1.1.1.18.{#SNMPINDEX}</snmp_oid>
              <key>net.if.prio.status[ifDescription.{#SNMPINDEX}]</key>
              <delay>1h</delay>
              <history>1w</history>
              <trends>0</trends>
              <value_type>TEXT</value_type>
              <applications>
                <application>
                  <name>Network Interfaces</name>
                </application>
              </applications>
            </item_prototype>
            <item_prototype>
              <name>Interface {#IFNAME} (priority): Inbound packets discarded</name>
              <type>SNMP_AGENT</type>
              <snmp_oid>1.3.6.1.2.1.2.2.1.13.{#SNMPINDEX}</snmp_oid>
              <key>net.if.prio.status[ifInDiscards.{#SNMPINDEX}]</key>
              <delay>5m</delay>
              <history>1w</history>
              <applications>
                <application>
                  <name>Network Interfaces</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
              </preprocessing>
            </item_prototype>
            <item_prototype>
              <name>Interface {#IFNAME} (priority): Inbound packets with errors</name>
              <type>SNMP_AGENT</type>
              <snmp_oid>1.3.6.1.2.1.2.2.1.14.{#SNMPINDEX}</snmp_oid>
              <key>net.if.prio.status[ifInErrors.{#SNMPINDEX}]</key>
              <delay>5m</delay>
              <history>1w</history>
              <applications>
                <application>
                  <name>Network Interfaces</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
              </preprocessing>
            </item_prototype>
            <item_prototype>
              <name>Interface {#IFNAME} (priority): Bits received</name>
              <type>SNMP_AGENT</type>
              <snmp_oid>1.3.6.1.2.1.2.2.1.10.{#SNMPINDEX}</snmp_oid>
              <key>net.if.prio.status[ifInOctets.{#SNMPINDEX}]</key>
              <delay>3m</delay>
              <history>30d</history>
              <units>bps</units>
              <applications>
                <application>
                  <name>Network Interfaces</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
                <step>
                  <type>MULTIPLIER</type>
                  <params>8</params>
                </step>
              </preprocessing>
            </item_prototype>
            <item_prototype>
              <name>Interface {#IFNAME} (priority): Operational status</name>
              <type>SNMP_AGENT</type>
              <snmp_oid>1.3.6.1.2.1.2.2.1.8.{#SNMPINDEX}</snmp_oid>
              <key>net.if.prio.status[ifOperStatus.{#SNMPINDEX}]</key>
              <delay>30s</delay>
              <history>1w</history>
              <trends>0</trends>
              <applications>
                <application>
                  <name>Network Interfaces</name>
                </application>
              </applications>
              <valuemap>
                <name>IF-MIB::ifAdminStatus</name>
              </valuemap>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{avg(3600)}&lt;>2 and {last()}=2</expression>
                  <name>Interface status has changed on host {HOST.NAME} port {#IFNAME}: {#SNMPVALUE}</name>
                  <priority>AVERAGE</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
            <item_prototype>
              <name>Interface {#IFNAME} (priority): Outbound packets discarded</name>
              <type>SNMP_AGENT</type>
              <snmp_oid>1.3.6.1.2.1.2.2.1.19.{#SNMPINDEX}</snmp_oid>
              <key>net.if.prio.status[ifOutDiscards.{#SNMPINDEX}]</key>
              <delay>5m</delay>
              <history>1w</history>
              <applications>
                <application>
                  <name>Network Interfaces</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
              </preprocessing>
            </item_prototype>
            <item_prototype>
              <name>Interface {#IFNAME} (priority): Outbound packets with errors</name>
              <type>SNMP_AGENT</type>
              <snmp_oid>1.3.6.1.2.1.2.2.1.20.{#SNMPINDEX}</snmp_oid>
              <key>net.if.prio.status[ifOutErrors.{#SNMPINDEX}]</key>
              <delay>5m</delay>
              <history>1w</history>
              <applications>
                <application>
                  <name>Network Interfaces</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
              </preprocessing>
            </item_prototype>
            <item_prototype>
              <name>Interface {#IFNAME} (priority): Bits sent</name>
              <type>SNMP_AGENT</type>
              <snmp_oid>1.3.6.1.2.1.2.2.1.16.{#SNMPINDEX}</snmp_oid>
              <key>net.if.prio.status[ifOutOctets.{#SNMPINDEX}]</key>
              <delay>3m</delay>
              <history>30d</history>
              <units>bps</units>
              <applications>
                <application>
                  <name>Network Interfaces</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
                <step>
                  <type>MULTIPLIER</type>
                  <params>8</params>
                </step>
              </preprocessing>
            </item_prototype>
            <item_prototype>
              <name>Interface {#IFNAME} (priority): Speed</name>
              <type>SNMP_AGENT</type>
              <snmp_oid>1.3.6.1.2.1.2.2.1.5.{#SNMPINDEX}</snmp_oid>
              <key>net.if.prio.status[ifSpeed.{#SNMPINDEX}]</key>
              <delay>5m</delay>
              <history>1w</history>
              <units>bps</units>
              <applications>
                <application>
                  <name>Network Interfaces</name>
                </application>
              </applications>
            </item_prototype>
          </item_prototypes>
          <trigger_prototypes>
            <trigger_prototype>
              <expression>{enhanced_snmp_interface_discovery:net.if.prio.status[ifInOctets.{#SNMPINDEX}].avg(10m)}>(({$INT_BANDWIDTH_WARNING:"{#IFNAME}"}/100)*{enhanced_snmp_interface_discovery:net.if.prio.status[ifSpeed.{#SNMPINDEX}].last()}) or {enhanced_snmp_interface_discovery:net.if.prio.status[ifOutOctets.{#SNMPINDEX}].avg(10m)}>(({$INT_BANDWIDTH_WARNING:"{#IFNAME}"}/100)*{enhanced_snmp_interface_discovery:net.if.prio.status[ifSpeed.{#SNMPINDEX}].last()}) and {enhanced_snmp_interface_discovery:net.if.prio.status[ifSpeed.{#SNMPINDEX}].last()}>0</expression>
              <recovery_mode>RECOVERY_EXPRESSION</recovery_mode>
              <recovery_expression>{enhanced_snmp_interface_discovery:net.if.prio.status[ifInOctets.{#SNMPINDEX}].avg(10m)}&lt;((({$INT_BANDWIDTH_WARNING:"{#IFNAME}"}-3)/100)*{enhanced_snmp_interface_discovery:net.if.prio.status[ifSpeed.{#SNMPINDEX}].last()}) or {enhanced_snmp_interface_discovery:net.if.prio.status[ifOutOctets.{#SNMPINDEX}].avg(10m)}&lt;((({$INT_BANDWIDTH_WARNING:"{#IFNAME}"}-3)/100)*{enhanced_snmp_interface_discovery:net.if.prio.status[ifSpeed.{#SNMPINDEX}].last()})</recovery_expression>
              <name>Interface {#IFNAME}: Bandwidth usage over {$INT_BANDWIDTH_WARNING:"{#IFNAME}"}%</name>
              <priority>WARNING</priority>
              <description>Triggers when incoming or outgoing traffic exceeds limit of the INT_BANDWIDTH_WARNING macro.</description>
            </trigger_prototype>
            <trigger_prototype>
              <expression>{enhanced_snmp_interface_discovery:net.if.prio.status[ifInErrors.{#SNMPINDEX}].avg(5m)}>{$INT_ERRORS_WARN} or {enhanced_snmp_interface_discovery:net.if.prio.status[ifOutErrors.{#SNMPINDEX}].avg(5m)}>{$INT_ERRORS_WARN}</expression>
              <name>Interface {#IFNAME}: High error rate</name>
              <priority>WARNING</priority>
            </trigger_prototype>
          </trigger_prototypes>
          <graph_prototypes>
            <graph_prototype>
              <name>Interface {#IFNAME} (priority): Network traffic</name>
              <graph_items>
                <graph_item>
                  <drawtype>GRADIENT_LINE</drawtype>
                  <color>1A7C11</color>
                  <item>
                    <host>enhanced_snmp_interface_discovery</host>
                    <key>net.if.prio.status[ifInOctets.{#SNMPINDEX}]</key>
                  </item>
                </graph_item>
                <graph_item>
                  <sortorder>1</sortorder>
                  <drawtype>BOLD_LINE</drawtype>
                  <color>2774A4</color>
                  <item>
                    <host>enhanced_snmp_interface_discovery</host>
                    <key>net.if.prio.status[ifOutOctets.{#SNMPINDEX}]</key>
                  </item>
                </graph_item>
                <graph_item>
                  <sortorder>2</sortorder>
                  <color>F63100</color>
                  <yaxisside>RIGHT</yaxisside>
                  <item>
                    <host>enhanced_snmp_interface_discovery</host>
                    <key>net.if.prio.status[ifInDiscards.{#SNMPINDEX}]</key>
                  </item>
                </graph_item>
                <graph_item>
                  <sortorder>3</sortorder>
                  <color>FC6EA3</color>
                  <yaxisside>RIGHT</yaxisside>
                  <item>
                    <host>enhanced_snmp_interface_discovery</host>
                    <key>net.if.prio.status[ifOutDiscards.{#SNMPINDEX}]</key>
                  </item>
                </graph_item>
                <graph_item>
                  <sortorder>4</sortorder>
                  <color>A54F10</color>
                  <yaxisside>RIGHT</yaxisside>
                  <item>
                    <host>enhanced_snmp_interface_discovery</host>
                    <key>net.if.prio.status[ifInErrors.{#SNMPINDEX}]</key>
                  </item>
                </graph_item>
                <graph_item>
                  <sortorder>5</sortorder>
                  <color>6C59DC</color>
                  <yaxisside>RIGHT</yaxisside>
                  <item>
                    <host>enhanced_snmp_interface_discovery</host>
                    <key>net.if.prio.status[ifOutErrors.{#SNMPINDEX}]</key>
                  </item>
                </graph_item>
              </graph_items>
            </graph_prototype>
          </graph_prototypes>
        </discovery_rule>
        <discovery_rule>
          <name>Network Interfaces Discovery - Virtual</name>
          <type>SNMP_AGENT</type>
          <snmp_oid>discovery[{#SNMPVALUE},1.3.6.1.2.1.2.2.1.8,{#IFADMINSTATUS},1.3.6.1.2.1.2.2.1.7,{#IFALIAS},1.3.6.1.2.1.31.1.1.1.18,{#IFNAME},1.3.6.1.2.1.31.1.1.1.1,{#IFDESCR},1.3.6.1.2.1.2.2.1.2,{#IFTYPE},1.3.6.1.2.1.2.2.1.3]</snmp_oid>
          <key>net.if.virt.discovery</key>
          <delay>{$INT_LLD_UPDATE_INTERVAL}</delay>
          <filter>
            <conditions>
              <condition>
                <macro>{#IFNAME}</macro>
                <value>^bond[0-9]+$</value>
                <formulaid>B</formulaid>
              </condition>
              <condition>
                <macro>{#IFNAME}</macro>
                <value>^[A-Z|a-z]{2}-?[0-9]\/[0-9]{1,2}(\/[0-9]{1,2})?\.[A-Z|0-9]+$</value>
                <formulaid>C</formulaid>
              </condition>
              <condition>
                <macro>{#IFNAME}</macro>
                <value>^VLAN-(?!100[2-5])[0-9]+$</value>
                <formulaid>D</formulaid>
              </condition>
              <condition>
                <macro>{#IFNAME}</macro>
                <value>^irb\.[0-9]{1,4}$</value>
                <formulaid>E</formulaid>
              </condition>
              <condition>
                <macro>{#IFNAME}</macro>
                <value>^(Po|VI|Vl|Tu)[0-9]*$</value>
                <formulaid>F</formulaid>
              </condition>
              <condition>
                <macro>{#IFALIAS}</macro>
                <value>^(?!{$INT_PRIO_STRING}).*</value>
                <formulaid>A</formulaid>
              </condition>
            </conditions>
          </filter>
          <item_prototypes>
            <item_prototype>
              <name>Interface {#IFNAME}: Admin status</name>
              <type>SNMP_AGENT</type>
              <snmp_oid>1.3.6.1.2.1.2.2.1.7.{#SNMPINDEX}</snmp_oid>
              <key>net.if.virt.status[ifAdminStatus.{#SNMPINDEX}]</key>
              <history>1w</history>
              <trends>0</trends>
              <applications>
                <application>
                  <name>Network Interfaces</name>
                </application>
              </applications>
              <valuemap>
                <name>IF-MIB::ifAdminStatus</name>
              </valuemap>
            </item_prototype>
            <item_prototype>
              <name>Interface {#IFNAME}: Alias</name>
              <type>SNMP_AGENT</type>
              <snmp_oid>1.3.6.1.2.1.31.1.1.1.18.{#SNMPINDEX}</snmp_oid>
              <key>net.if.virt.status[ifAlias.{#SNMPINDEX}]</key>
              <delay>1h</delay>
              <history>1w</history>
              <trends>0</trends>
              <value_type>TEXT</value_type>
              <applications>
                <application>
                  <name>Network Interfaces</name>
                </application>
              </applications>
            </item_prototype>
            <item_prototype>
              <name>Interface {#IFNAME}: Bits received</name>
              <type>SNMP_AGENT</type>
              <snmp_oid>1.3.6.1.2.1.2.2.1.10.{#SNMPINDEX}</snmp_oid>
              <key>net.if.virt.status[ifInOctets.{#SNMPINDEX}]</key>
              <delay>3m</delay>
              <history>30d</history>
              <value_type>FLOAT</value_type>
              <units>bps</units>
              <applications>
                <application>
                  <name>Network Interfaces</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
                <step>
                  <type>MULTIPLIER</type>
                  <params>8</params>
                </step>
              </preprocessing>
            </item_prototype>
            <item_prototype>
              <name>Interface {#IFNAME}: Operational status</name>
              <type>SNMP_AGENT</type>
              <snmp_oid>1.3.6.1.2.1.2.2.1.8.{#SNMPINDEX}</snmp_oid>
              <key>net.if.virt.status[ifOperStatus.{#SNMPINDEX}]</key>
              <history>1w</history>
              <trends>0</trends>
              <applications>
                <application>
                  <name>Network Interfaces</name>
                </application>
              </applications>
              <valuemap>
                <name>IF-MIB::ifOperStatus</name>
              </valuemap>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{avg(3600)}&lt;>2 and {last()}=2</expression>
                  <recovery_mode>RECOVERY_EXPRESSION</recovery_mode>
                  <recovery_expression>{last(5m)}&lt;>2</recovery_expression>
                  <name>Interface status has changed on port {#IFNAME}</name>
                  <priority>WARNING</priority>
                  <description>Triggers when the interface state changes.</description>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
            <item_prototype>
              <name>Interface {#IFNAME}: Bits sent</name>
              <type>SNMP_AGENT</type>
              <snmp_oid>1.3.6.1.2.1.2.2.1.16.{#SNMPINDEX}</snmp_oid>
              <key>net.if.virt.status[ifOutOctets.{#SNMPINDEX}]</key>
              <delay>3m</delay>
              <history>30d</history>
              <value_type>FLOAT</value_type>
              <units>bps</units>
              <applications>
                <application>
                  <name>Network Interfaces</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
                <step>
                  <type>MULTIPLIER</type>
                  <params>8</params>
                </step>
              </preprocessing>
            </item_prototype>
          </item_prototypes>
          <graph_prototypes>
            <graph_prototype>
              <name>Interface {#IFNAME}: Network traffic</name>
              <graph_items>
                <graph_item>
                  <drawtype>GRADIENT_LINE</drawtype>
                  <color>1A7C11</color>
                  <item>
                    <host>enhanced_snmp_interface_discovery</host>
                    <key>net.if.virt.status[ifInOctets.{#SNMPINDEX}]</key>
                  </item>
                </graph_item>
                <graph_item>
                  <sortorder>1</sortorder>
                  <drawtype>BOLD_LINE</drawtype>
                  <color>2774A4</color>
                  <item>
                    <host>enhanced_snmp_interface_discovery</host>
                    <key>net.if.virt.status[ifOutOctets.{#SNMPINDEX}]</key>
                  </item>
                </graph_item>
              </graph_items>
            </graph_prototype>
          </graph_prototypes>
        </discovery_rule>
      </discovery_rules>
      <macros>
        <macro>
          <macro>{$INT_BANDWIDTH_WARNING}</macro>
          <value>80</value>
        </macro>
        <macro>
          <macro>{$INT_ERRORS_WARN}</macro>
          <value>2</value>
        </macro>
        <macro>
          <macro>{$INT_LLD_UPDATE_INTERVAL}</macro>
          <value>30m</value>
        </macro>
        <macro>
          <macro>{$INT_NAME_PHYSICAL}</macro>
          <value>^[A-Z|a-z]{2}-?[0-9]+\/[0-9]{1,2}(\/[0-9]+)?$</value>
        </macro>
        <macro>
          <macro>{$INT_NO_TRIGGER_STRING}</macro>
          <value>^(EDGEPORT)$</value>
        </macro>
        <macro>
          <macro>{$INT_PRIO_STRING}</macro>
          <value>UPLINK</value>
        </macro>
        <macro>
          <macro>{$SEARCH_FOR_INACTIVE_PORTS}</macro>
          <value>0</value>
        </macro>
      </macros>
    </template>
  </templates>
  <value_maps>
    <value_map>
      <name>IF-MIB::ifAdminStatus</name>
      <mappings>
        <mapping>
          <value>1</value>
          <newvalue>up</newvalue>
        </mapping>
        <mapping>
          <value>2</value>
          <newvalue>disabled</newvalue>
        </mapping>
        <mapping>
          <value>3</value>
          <newvalue>testing</newvalue>
        </mapping>
      </mappings>
    </value_map>
    <value_map>
      <name>IF-MIB::ifOperStatus</name>
      <mappings>
        <mapping>
          <value>1</value>
          <newvalue>up</newvalue>
        </mapping>
        <mapping>
          <value>2</value>
          <newvalue>down</newvalue>
        </mapping>
        <mapping>
          <value>3</value>
          <newvalue>testing</newvalue>
        </mapping>
        <mapping>
          <value>4</value>
          <newvalue>unknown</newvalue>
        </mapping>
        <mapping>
          <value>5</value>
          <newvalue>dormant</newvalue>
        </mapping>
        <mapping>
          <value>6</value>
          <newvalue>notPresent</newvalue>
        </mapping>
        <mapping>
          <value>7</value>
          <newvalue>lowerLayerDown</newvalue>
        </mapping>
      </mappings>
    </value_map>
  </value_maps>
</zabbix_export>