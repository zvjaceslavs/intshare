<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
  <version>5.0</version>
  <date>2021-11-09T08:43:52Z</date>
  <groups>
    <group>
      <name>Templates/storage controllers</name>
    </group>
  </groups>
  <templates>
    <template>
      <template>Intel RST with js</template>
      <name>Intel RST with js</name>
      <description>## Overview This template is for discovering and monitoring Intel RST (Intel VROC) storage controllers. Works with zabbix 4.2 and higher. Template uses action with zabbix API. Instuctions is on github page &lt;https://github.com/mykolq/zabbix_intel_rst_template></description>
      <groups>
        <group>
          <name>Templates/storage controllers</name>
        </group>
      </groups>
      <applications>
        <application>
          <name>Intel RST internal items</name>
        </application>
        <application>
          <name>Intel RST Logical Disks</name>
        </application>
        <application>
          <name>Intel RST Physical Disks</name>
        </application>
        <application>
          <name>Intel RST Physical Disks SMART</name>
        </application>
      </applications>
      <items>
        <item>
          <name>Intel RST All Info</name>
          <key>irst.allinfo[{$IRST_CLI}]</key>
          <delay>{$STOR_CTRL_REQUEST_PERIOD}</delay>
          <history>{$INTERNAL_ITEMS_HISTORY_PERIOD}</history>
          <trends>0</trends>
          <value_type>TEXT</value_type>
          <description>Get all info from rst controller(cli path + 'I' key)</description>
          <applications>
            <application>
              <name>Intel RST internal items</name>
            </application>
          </applications>
        </item>
        <item>
          <name>Intel RST All Lds info</name>
          <type>DEPENDENT</type>
          <key>irst.ld</key>
          <delay>0</delay>
          <history>{$INTERNAL_ITEMS_HISTORY_PERIOD}</history>
          <trends>0</trends>
          <value_type>TEXT</value_type>
          <applications>
            <application>
              <name>Intel RST internal items</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JAVASCRIPT</type>
              <params>value=(value.match(/.*/gm)).toString(); var matches = value.match(/Name:\s*\S*Raid Level:\s*\d{1,}\S*Size:(\s*\S*){2}StripeSize:(\s*\S*){1,2}Num Disks:\s*\d{1,2}\S*State:\s*\w*/gmi); var prejson = []; for(var i = 0; i &lt; matches.length; i++){ var myobj={}; var str = matches[i].split(/,{1,}/); for(var x = 0; x &lt; str.length; x++){ var temp = str[x].split(':'); myobj[temp[0].trim('\t')] = temp[1].trim('\t'); } var Name = myobj['Name']; delete myobj['Name']; prejson.push(('"' + Name + '":') + JSON.stringify(myobj,null,space=0)); } json=("[{" + prejson + "}]"); return json</params>
            </step>
          </preprocessing>
          <master_item>
            <key>irst.allinfo[{$IRST_CLI}]</key>
          </master_item>
        </item>
        <item>
          <name>Intel RST All Pds info</name>
          <type>DEPENDENT</type>
          <key>irst.pd</key>
          <delay>0</delay>
          <history>{$INTERNAL_ITEMS_HISTORY_PERIOD}</history>
          <trends>0</trends>
          <value_type>TEXT</value_type>
          <applications>
            <application>
              <name>Intel RST internal items</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JAVASCRIPT</type>
              <params>value=(value.match(/.*/gm)).toString(); var re=/(ID:\s*(\d{1,}-){3}\d{1,})(.*?)(Serial Number:(\s*\S*\s*|\s*\S*:\d{1,2}\s*))/gmi; var matches = value.match(re); var prejson = []; for(var i = 0; i &lt; matches.length; i++){ var myobj={}; var str = matches[i].split(/,{1,}/); for(var x = 0; x &lt; str.length; x++){ var temp = str[x].replace(/(:\d{1,2})$/,'_nocorrectsn'); var temp = temp.split(':'); myobj[temp[0].trim('\t')] = temp[1].trim('\t'); } var ID = myobj['ID']; delete myobj['ID']; prejson.push(('"' + ID + '":') + JSON.stringify(myobj,null,space=0)); } json=("[{" + prejson + "}]"); return json</params>
            </step>
          </preprocessing>
          <master_item>
            <key>irst.allinfo[{$IRST_CLI}]</key>
          </master_item>
        </item>
        <item>
          <name>Intel RST All Pds LLD info</name>
          <type>DEPENDENT</type>
          <key>irst.SMART.lld</key>
          <delay>0</delay>
          <history>3600</history>
          <trends>0</trends>
          <value_type>TEXT</value_type>
          <description>JSON for lld of physical disks and for SMART template</description>
          <applications>
            <application>
              <name>Intel RST internal items</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JAVASCRIPT</type>
              <params>value=(value.match(/.*/gm)).toString(); var re=/(ID:\s*(\d{1,}-){3}\d{1,})(.*?)(Serial Number:(\s*\S*\s*|\s*\S*:\d{1,2}\s*))/gmi; var matches = value.match(re); var prejson = []; for(var i = 0; i &lt; matches.length; i++) { var myobj={}; var str = matches[i].split(',,,'); for(var x = 0; x &lt; str.length; x++){ var temp = str[x].split(':'); if (temp[0].match(/ID.*|Serial Number.*/gm)){ myobj[temp[0].trim('\t')] = temp[1].trim('\t'); myobj['slotname_source'] = 'Intel RST'; } } prejson.push(JSON.stringify(myobj,null,space=0)); } json=("[" + prejson + "]").replace(/ID":/gm,'SLOT":') return json</params>
            </step>
            <step>
              <type>DISCARD_UNCHANGED_HEARTBEAT</type>
              <params>{$PD_THROTTLING_HB_PERIOD}</params>
            </step>
          </preprocessing>
          <master_item>
            <key>irst.allinfo[{$IRST_CLI}]</key>
          </master_item>
        </item>
        <item>
          <name>RST cli path</name>
          <key>wmi.get[root\cimv2,select DriverVersion from Win32_PnPSignedDriver WHERE DriverProviderName like '%Intel%' and DeviceClass like 'SCSIADAPTER' and not DeviceName like '%Ethernet Virtual Storage%']</key>
          <delay>{$INTERNAL_ITEMS_REQUEST_PERIOD}</delay>
          <history>7200</history>
          <trends>0</trends>
          <value_type>TEXT</value_type>
          <description>Path to needed version of utility (depends on driver version)</description>
          <applications>
            <application>
              <name>Intel RST internal items</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JAVASCRIPT</type>
              <params>var DriverVer = value.match(/\d{1,2}.\d.\d/); DriverVer=(DriverVer[0].replace(/\./gm,"")).match(/\d{3}/); // var IrstPath = 'C:\\\\zabbix_agent\\\\diskutils\\\\rst\\\\'; var IrstVer = (DriverVer &lt; 170) ? '13_16_rstcli64.exe': (DriverVer &lt; 500) ? '4.6.0_rstcli64.exe': (DriverVer &lt; 503) ? '5.0.0_rstcli64.exe': (DriverVer &lt; 530) ? '5.0.3_rstcli64.exe': (DriverVer &lt; 540) ? '5.3.0_rstcli64.exe': (DriverVer &lt; 560) ? '5.6.0_rstcli64.exe': (DriverVer &lt; 650) ? 'IntelVROCCli.exe': 'rstcli64.exe'; //var IrstCli = IrstPath + IrstVer; var IrstCli=IrstVer; return IrstCli</params>
            </step>
          </preprocessing>
          <triggers>
            <trigger>
              <expression>{diff()}=1 or {count(#2)}&lt;2</expression>
              <name>{ITEM.VALUE}</name>
              <description>Changing if driver version for Irst changed or if it's first check</description>
              <manual_close>YES</manual_close>
              <tags>
                <tag>
                  <tag>NOTIFY</tag>
                  <value>NO</value>
                </tag>
                <tag>
                  <tag>SOURCE</tag>
                  <value>Intel RST path</value>
                </tag>
              </tags>
            </trigger>
          </triggers>
        </item>
      </items>
      <discovery_rules>
        <discovery_rule>
          <name>Logical disks discovery</name>
          <type>DEPENDENT</type>
          <key>ldlld</key>
          <delay>0</delay>
          <item_prototypes>
            <item_prototype>
              <name>Logical disk "{#LDNAME}" level</name>
              <type>DEPENDENT</type>
              <key>irst.raid.level.[{#LDNAME}]</key>
              <delay>0</delay>
              <history>{$LD_HISTORY_PERIOD}</history>
              <trends>0</trends>
              <applications>
                <application>
                  <name>Intel RST Logical Disks</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[0]['{#LDNAME}']['Raid Level']</params>
                </step>
                <step>
                  <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                  <params>{$LD_THROTTLING_HB_PERIOD}</params>
                </step>
              </preprocessing>
              <master_item>
                <key>irst.ld</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>Logical disk "{#LDNAME}" disks count</name>
              <type>DEPENDENT</type>
              <key>irst.raid.pdcount.[{#LDNAME}]</key>
              <delay>0</delay>
              <history>{$LD_HISTORY_PERIOD}</history>
              <trends>0</trends>
              <applications>
                <application>
                  <name>Intel RST Logical Disks</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[0]['{#LDNAME}']['Num Disks']</params>
                </step>
                <step>
                  <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                  <params>{$LD_THROTTLING_HB_PERIOD}</params>
                </step>
              </preprocessing>
              <master_item>
                <key>irst.ld</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>Logical disk "{#LDNAME}" state</name>
              <type>DEPENDENT</type>
              <key>irst.raid.state.[{#LDNAME}]</key>
              <delay>0</delay>
              <history>{$LD_HISTORY_PERIOD}</history>
              <trends>0</trends>
              <value_type>TEXT</value_type>
              <applications>
                <application>
                  <name>Intel RST Logical Disks</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[0]['{#LDNAME}']['State']</params>
                </step>
                <step>
                  <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                  <params>{$LD_THROTTLING_HB_PERIOD}</params>
                </step>
              </preprocessing>
              <master_item>
                <key>irst.ld</key>
              </master_item>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{regexp({$LD_INFORMATION_SEVERITY_STATES})}=1</expression>
                  <recovery_mode>RECOVERY_EXPRESSION</recovery_mode>
                  <recovery_expression>{regexp({$LD_RECOVERY_STATES})}=1</recovery_expression>
                  <name>Intel RST: Logical disk "{#LDNAME}" is "{ITEM.VALUE}"</name>
                  <priority>INFO</priority>
                  <dependencies>
                    <dependency>
                      <name>Intel RST: Logical disk "{#LDNAME}" is "{ITEM.VALUE}"</name>
                      <expression>{Intel RST with js:irst.raid.state.[{#LDNAME}].regexp({$LD_WARNING_SEVERITY_STATES},#1)}=1 and {Intel RST with js:irst.raid.state.[{#LDNAME}].regexp({$LD_HIGH_SEVERITY_STATES},#3)}=0</expression>
                      <recovery_expression>{Intel RST with js:irst.raid.state.[{#LDNAME}].regexp({$LD_RECOVERY_STATES})}=1</recovery_expression>
                    </dependency>
                  </dependencies>
                  <tags>
                    <tag>
                      <tag>SOURCE</tag>
                      <value>Intel RST LD state</value>
                    </tag>
                  </tags>
                </trigger_prototype>
                <trigger_prototype>
                  <expression>{regexp({$LD_WARNING_SEVERITY_STATES},#1)}=1 and {regexp({$LD_HIGH_SEVERITY_STATES},#3)}=0</expression>
                  <recovery_mode>RECOVERY_EXPRESSION</recovery_mode>
                  <recovery_expression>{regexp({$LD_RECOVERY_STATES})}=1</recovery_expression>
                  <name>Intel RST: Logical disk "{#LDNAME}" is "{ITEM.VALUE}"</name>
                  <priority>WARNING</priority>
                  <tags>
                    <tag>
                      <tag>SOURCE</tag>
                      <value>Intel RST LD state</value>
                    </tag>
                  </tags>
                </trigger_prototype>
                <trigger_prototype>
                  <expression>{regexp({$LD_WARNING_SEVERITY_STATES},#1)}=1 and {regexp(Degraded,#2)}=1</expression>
                  <name>Intel RST: Logical disk "{#LDNAME}" state was changed from "Degraded" state to "{ITEM.VALUE}"</name>
                  <priority>INFO</priority>
                  <tags>
                    <tag>
                      <tag>SOURCE</tag>
                      <value>Intel RST LD state</value>
                    </tag>
                  </tags>
                </trigger_prototype>
                <trigger_prototype>
                  <expression>{regexp({$LD_WARNING_SEVERITY_STATES},#1)}=1 and {regexp(Failed,#2)}=1</expression>
                  <name>Intel RST: Logical disk "{#LDNAME}" state was changed from "Failed" state to "{ITEM.VALUE}"</name>
                  <priority>INFO</priority>
                  <tags>
                    <tag>
                      <tag>SOURCE</tag>
                      <value>Intel RST LD state</value>
                    </tag>
                  </tags>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
          </item_prototypes>
          <trigger_prototypes>
            <trigger_prototype>
              <expression>{Intel RST with js:irst.raid.state.[{#LDNAME}].regexp({$LD_HIGH_SEVERITY_STATES})}=1 and {Intel RST with js:irst.raid.level.[{#LDNAME}].last()}>0 and {Intel RST with js:irst.raid.pdcount.[{#LDNAME}].last()}>0</expression>
              <recovery_mode>RECOVERY_EXPRESSION</recovery_mode>
              <recovery_expression>{Intel RST with js:irst.raid.state.[{#LDNAME}].regexp({$LD_RECOVERY_STATES})}=1</recovery_expression>
              <name>Intel RST: Logical disk "{#LDNAME}" is "{ITEM.VALUE1}". LD level: {ITEM.VALUE2} Disks count: {ITEM.VALUE3}</name>
              <priority>HIGH</priority>
              <tags>
                <tag>
                  <tag>SOURCE</tag>
                  <value>Intel RST LD state</value>
                </tag>
              </tags>
            </trigger_prototype>
          </trigger_prototypes>
          <master_item>
            <key>irst.allinfo[{$IRST_CLI}]</key>
          </master_item>
          <lld_macro_paths>
            <lld_macro_path>
              <lld_macro>{#LDNAME}</lld_macro>
              <path>$.LDNAME</path>
            </lld_macro_path>
          </lld_macro_paths>
          <preprocessing>
            <step>
              <type>JAVASCRIPT</type>
              <params>value=(value.match(/.*/gm)).toString(); var re=/Name:\s*\S*Raid Level:\s*\d{1,}/gmi; var matches = value.match(re); var prejson = []; for(var i = 0; i &lt; matches.length; i++){ myobj={}; var str = matches[i].split(/,{1,}/); for(var x = 0; x &lt; str.length; x++){ var temp = str[x].split(':'); myobj[temp[0].trim('\t')] = temp[1].trim('\t'); } prejson.push(JSON.stringify(myobj,null,space=0)); } json=("[" + prejson + "]").replace(/Name":/g,'LDNAME":'); return json</params>
            </step>
            <step>
              <type>DISCARD_UNCHANGED_HEARTBEAT</type>
              <params>{$LD_THROTTLING_HB_PERIOD}</params>
            </step>
          </preprocessing>
        </discovery_rule>
        <discovery_rule>
          <name>Physical disks discovery</name>
          <type>DEPENDENT</type>
          <key>pdlld</key>
          <delay>0</delay>
          <item_prototypes>
            <item_prototype>
              <name>Physical disk "{#SLOT}" serial number</name>
              <type>DEPENDENT</type>
              <key>irst.pd.sn.["{#SLOT}"]</key>
              <delay>0</delay>
              <history>{$PD_HISTORY_PERIOD}</history>
              <trends>0</trends>
              <value_type>TEXT</value_type>
              <applications>
                <application>
                  <name>Intel RST Physical Disks</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[0]['{#SLOT}']['Serial Number']</params>
                </step>
                <step>
                  <type>NOT_MATCHES_REGEX</type>
                  <params>.*(_nocorrectsn$)</params>
                </step>
                <step>
                  <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                  <params>{$PD_THROTTLING_HB_PERIOD}</params>
                </step>
              </preprocessing>
              <master_item>
                <key>irst.pd</key>
              </master_item>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{diff()}=1 and {strlen()}>2</expression>
                  <name>Intel RST: Physical disk "{#SLOT}" was replaced by sn "{ITEM.VALUE}"</name>
                  <priority>INFO</priority>
                  <manual_close>YES</manual_close>
                  <tags>
                    <tag>
                      <tag>SOURCE</tag>
                      <value>Intel RST PD replace</value>
                    </tag>
                  </tags>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
            <item_prototype>
              <name>Physical disk "{#SLOT}" state</name>
              <type>DEPENDENT</type>
              <key>irst.pd.state.["{#SLOT}"]</key>
              <delay>0</delay>
              <history>{$PD_HISTORY_PERIOD}</history>
              <trends>0</trends>
              <value_type>TEXT</value_type>
              <applications>
                <application>
                  <name>Intel RST Physical Disks</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[0]['{#SLOT}']['State']</params>
                </step>
                <step>
                  <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                  <params>{$PD_THROTTLING_HB_PERIOD}</params>
                </step>
              </preprocessing>
              <master_item>
                <key>irst.pd</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>Physical disk "{#SLOT}" usage</name>
              <type>DEPENDENT</type>
              <key>irst.pd.usage.["{#SLOT}"]</key>
              <delay>0</delay>
              <history>{$PD_HISTORY_PERIOD}</history>
              <trends>0</trends>
              <value_type>TEXT</value_type>
              <applications>
                <application>
                  <name>Intel RST Physical Disks</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[0]['{#SLOT}']['Usage']</params>
                </step>
                <step>
                  <type>DISCARD_UNCHANGED_HEARTBEAT</type>
                  <params>{$PD_THROTTLING_HB_PERIOD}</params>
                </step>
              </preprocessing>
              <master_item>
                <key>irst.pd</key>
              </master_item>
            </item_prototype>
          </item_prototypes>
          <trigger_prototypes>
            <trigger_prototype>
              <expression>{Intel RST with js:irst.pd.state.["{#SLOT}"].iregexp({$PD_INFORMATION_SEVERITY_STATES})}=1 and {Intel RST with js:irst.pd.sn.["{#SLOT}"].strlen()}>0</expression>
              <recovery_mode>NONE</recovery_mode>
              <name>Intel RST: Physical disk "{#SLOT}" is "{ITEM.VALUE1}". Disk SN is "{ITEM.VALUE2}"</name>
              <priority>INFO</priority>
              <manual_close>YES</manual_close>
              <tags>
                <tag>
                  <tag>SOURCE</tag>
                  <value>Intel RST PD state</value>
                </tag>
              </tags>
            </trigger_prototype>
            <trigger_prototype>
              <expression>{Intel RST with js:irst.pd.state.["{#SLOT}"].iregexp({$PD_WARNING_SEVERITY_STATES})}=1 and {Intel RST with js:irst.pd.sn.["{#SLOT}"].strlen()}>0</expression>
              <recovery_mode>RECOVERY_EXPRESSION</recovery_mode>
              <recovery_expression>{Intel RST with js:irst.pd.state.["{#SLOT}"].iregexp({$PD_RECOVERY_STATES})}=1</recovery_expression>
              <name>Intel RST: Physical disk "{#SLOT}" is "{ITEM.VALUE1}". Disk SN is "{ITEM.VALUE2}"</name>
              <priority>WARNING</priority>
              <dependencies>
                <dependency>
                  <name>Intel RST: Physical disk "{#SLOT}" is "{ITEM.VALUE}". Disk SN is "{ITEM.VALUE2}"</name>
                  <expression>{Intel RST with js:irst.pd.state.["{#SLOT}"].iregexp({$PD_HIGH_SEVERITY_STATES})}=1 and {Intel RST with js:irst.pd.sn.["{#SLOT}"].strlen()}>0</expression>
                  <recovery_expression>{Intel RST with js:irst.pd.state.["{#SLOT}"].iregexp({$PD_RECOVERY_STATES})}=1</recovery_expression>
                </dependency>
              </dependencies>
              <tags>
                <tag>
                  <tag>SOURCE</tag>
                  <value>Intel RST PD state</value>
                </tag>
              </tags>
            </trigger_prototype>
            <trigger_prototype>
              <expression>{Intel RST with js:irst.pd.state.["{#SLOT}"].iregexp({$PD_HIGH_SEVERITY_STATES})}=1 and {Intel RST with js:irst.pd.sn.["{#SLOT}"].strlen()}>0</expression>
              <recovery_mode>RECOVERY_EXPRESSION</recovery_mode>
              <recovery_expression>{Intel RST with js:irst.pd.state.["{#SLOT}"].iregexp({$PD_RECOVERY_STATES})}=1</recovery_expression>
              <name>Intel RST: Physical disk "{#SLOT}" is "{ITEM.VALUE}". Disk SN is "{ITEM.VALUE2}"</name>
              <priority>HIGH</priority>
              <tags>
                <tag>
                  <tag>SOURCE</tag>
                  <value>Intel RST PD state</value>
                </tag>
              </tags>
            </trigger_prototype>
          </trigger_prototypes>
          <master_item>
            <key>irst.SMART.lld</key>
          </master_item>
          <lld_macro_paths>
            <lld_macro_path>
              <lld_macro>{#SLOT}</lld_macro>
              <path>$.['SLOT']</path>
            </lld_macro_path>
          </lld_macro_paths>
        </discovery_rule>
      </discovery_rules>
      <tags>
        <tag>
          <tag>APP</tag>
          <value>Intel RST storage controller</value>
        </tag>
      </tags>
      <macros>
        <macro>
          <macro>{$INTERNAL_ITEMS_HISTORY_PERIOD}</macro>
          <value>0</value>
          <description>Time interval for saving data. For debagging use you can set not null</description>
        </macro>
        <macro>
          <macro>{$INTERNAL_ITEMS_REQUEST_PERIOD}</macro>
          <value>60m</value>
          <description>Time interval for getting internal information for template. Like driver version for controllers</description>
        </macro>
        <macro>
          <macro>{$LD_HIGH_SEVERITY_STATES}</macro>
          <value>Degraded|Failed</value>
          <description>Logical disks high severity states (using in regex of triggers)</description>
        </macro>
        <macro>
          <macro>{$LD_INFORMATION_SEVERITY_STATES}</macro>
          <value>Initializing</value>
          <description>Logical disks information severity states (using in regex of triggers)</description>
        </macro>
        <macro>
          <macro>{$LD_RECOVERY_STATES}</macro>
          <value>Normal</value>
          <description>Logical disks recovery states (using in regex of triggers)</description>
        </macro>
        <macro>
          <macro>{$LD_THROTTLING_HB_PERIOD}</macro>
          <value>3h</value>
          <description>Logical disk throttling heartbeat period</description>
        </macro>
        <macro>
          <macro>{$LD_WARNING_SEVERITY_STATES}</macro>
          <value>Rebuilding|Verify and Fix</value>
          <description>Logical disks warning severity states (using in regex of triggers)</description>
        </macro>
        <macro>
          <macro>{$PD_HIGH_SEVERITY_STATES}</macro>
          <value>Missing|Failed|Smart event triggered</value>
          <description>Physical disks high severity states (using in regex of triggers)</description>
        </macro>
        <macro>
          <macro>{$PD_INFORMATION_SEVERITY_STATES}</macro>
          <value>need to set it</value>
          <description>Physical disks information severity states</description>
        </macro>
        <macro>
          <macro>{$PD_RECOVERY_STATES}</macro>
          <value>Normal</value>
          <description>Physicall disks recovery states (using in regex of triggers)</description>
        </macro>
        <macro>
          <macro>{$PD_THROTTLING_HB_PERIOD}</macro>
          <value>3h</value>
          <description>Physical disk throttling heartbeat period</description>
        </macro>
        <macro>
          <macro>{$PD_WARNING_SEVERITY_STATES}</macro>
          <value>Verify|Rebuilding</value>
          <description>Physicall disks warning severity states (using in regex of triggers)</description>
        </macro>
        <macro>
          <macro>{$STOR_CTRL_REQUEST_PERIOD}</macro>
          <value>5m</value>
          <description>Time interval for getting all information from storage contrroller</description>
        </macro>
      </macros>
    </template>
  </templates>
</zabbix_export>