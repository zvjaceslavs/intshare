<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
  <version>5.0</version>
  <date>2021-10-22T08:00:49Z</date>
  <groups>
    <group>
      <name>Templates</name>
    </group>
  </groups>
  <templates>
    <template>
      <template>Template..Docker.OSLinux.ShortTermContainers</template>
      <name>Template..Docker.OSLinux.ShortTermContainers</name>
      <templates>
        <template>
          <name>Template.Docker.ContainerDetails</name>
        </template>
      </templates>
      <groups>
        <group>
          <name>Templates</name>
        </group>
      </groups>
      <macros>
        <macro>
          <macro>{$DISCOVERY_TTL}</macro>
          <value>1d</value>
        </macro>
        <macro>
          <macro>{$DISCOVERY_UPDATE_INTERVAL}</macro>
          <value>60s</value>
        </macro>
        <macro>
          <macro>{$ITEM_HISTORY_STORAGE_PERIOD}</macro>
          <value>14d</value>
        </macro>
        <macro>
          <macro>{$ITEM_UPDATE_INTERVAL}</macro>
          <value>300s</value>
        </macro>
        <macro>
          <macro>{$NETWORK_ITEM_UPDATE_INTERVAL}</macro>
          <value>60s</value>
        </macro>
      </macros>
    </template>
    <template>
      <template>Template.Docker.ContainerDetails</template>
      <name>Template.Docker.ContainerDetails</name>
      <description>Monitor Docker Container Details</description>
      <groups>
        <group>
          <name>Templates</name>
        </group>
      </groups>
      <applications>
        <application>
          <name>Docker</name>
        </application>
      </applications>
      <discovery_rules>
        <discovery_rule>
          <name>Docker Container Discovery (by Names)</name>
          <key>system.run[echo "{ \"data\": `curl -s --unix-socket /var/run/docker.sock http:/containers/json| {$JQ_DOCKER_NAMES}` }"]</key>
          <delay>{$DISCOVERY_UPDATE_INTERVAL}</delay>
          <lifetime>{$DISCOVERY_TTL}</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>Container: {#NAMES}</name>
              <key>system.run[curl -s --unix-socket /var/run/docker.sock http:/containers{#NAMES}/json| jq .Created]</key>
              <delay>30s</delay>
              <history>30d</history>
              <trends>0</trends>
              <value_type>TEXT</value_type>
              <applications>
                <application>
                  <name>Docker</name>
                </application>
              </applications>
              <request_method>POST</request_method>
            </item_prototype>
            <item_prototype>
              <name>Container: {#NAMES} - Status</name>
              <key>system.run[curl -s --unix-socket /var/run/docker.sock http:/containers{#NAMES}/json| jq .State.Status]</key>
              <delay>30s</delay>
              <history>30d</history>
              <trends>0</trends>
              <value_type>TEXT</value_type>
              <applications>
                <application>
                  <name>Docker</name>
                </application>
              </applications>
              <request_method>POST</request_method>
            </item_prototype>
            <item_prototype>
              <name>Container: {#NAMES} - Env.Branch</name>
              <key>system.run[curl -s --unix-socket /var/run/docker.sock http:/containers{#NAMES}/json| {$JQ_DOCKER_ENV_BRANCH}]</key>
              <delay>30s</delay>
              <history>30d</history>
              <trends>0</trends>
              <value_type>TEXT</value_type>
              <applications>
                <application>
                  <name>Docker</name>
                </application>
              </applications>
              <request_method>POST</request_method>
            </item_prototype>
            <item_prototype>
              <name>Container: {#NAMES} - Mounts</name>
              <key>system.run[curl -s --unix-socket /var/run/docker.sock http:/containers{#NAMES}/json| {$JQ_DOCKER_MOUNTS}]</key>
              <delay>30s</delay>
              <history>30d</history>
              <trends>0</trends>
              <value_type>TEXT</value_type>
              <applications>
                <application>
                  <name>Docker</name>
                </application>
              </applications>
              <request_method>POST</request_method>
            </item_prototype>
            <item_prototype>
              <name>Container: {#NAMES} - Volumes</name>
              <key>system.run[curl -s --unix-socket /var/run/docker.sock http:/containers{#NAMES}/json| {$JQ_DOCKER_VOLUMES}]</key>
              <delay>30s</delay>
              <history>30d</history>
              <trends>0</trends>
              <value_type>TEXT</value_type>
              <applications>
                <application>
                  <name>Docker</name>
                </application>
              </applications>
              <request_method>POST</request_method>
            </item_prototype>
          </item_prototypes>
          <request_method>POST</request_method>
        </discovery_rule>
      </discovery_rules>
      <macros>
        <macro>
          <macro>{$JQ_DOCKER_ENV_BRANCH}</macro>
          <value>jq .Config.Env[0]</value>
        </macro>
        <macro>
          <macro>{$JQ_DOCKER_MOUNTS}</macro>
          <value>jq .Mounts[].Destination</value>
        </macro>
        <macro>
          <macro>{$JQ_DOCKER_NAMES}</macro>
          <value>jq '[ .[].Names[0]|{ "{#NAMES}": .} ]'</value>
        </macro>
        <macro>
          <macro>{$JQ_DOCKER_VOLUMES}</macro>
          <value>jq .Mounts[].Source</value>
        </macro>
      </macros>
    </template>
  </templates>
</zabbix_export>