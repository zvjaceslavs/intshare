<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
  <version>5.0</version>
  <date>2021-10-22T10:57:21Z</date>
  <groups>
    <group>
      <name>Templates/Applications</name>
    </group>
  </groups>
  <templates>
    <template>
      <template>Template App Docker swarm</template>
      <name>Template App Docker swarm</name>
      <groups>
        <group>
          <name>Templates/Applications</name>
        </group>
      </groups>
      <applications>
        <application>
          <name>Docker swarm general</name>
        </application>
        <application>
          <name>Docker swarm nodes</name>
        </application>
        <application>
          <name>Docker swarm raw</name>
        </application>
        <application>
          <name>Docker swarm services</name>
        </application>
      </applications>
      <items>
        <item>
          <name>Docker swarm raw info</name>
          <type>HTTP_AGENT</type>
          <key>docker.swarm.info.raw</key>
          <history>0</history>
          <trends>0</trends>
          <value_type>TEXT</value_type>
          <applications>
            <application>
              <name>Docker swarm raw</name>
            </application>
          </applications>
          <timeout>10s</timeout>
          <url>https://{HOST.DNS}:2376/swarm</url>
          <ssl_cert_file>{$CERT_FNAME}</ssl_cert_file>
          <ssl_key_file>{$KEY_FNAME}</ssl_key_file>
        </item>
        <item>
          <name>Docker swarm leader node</name>
          <type>DEPENDENT</type>
          <key>docker.swarm.nodes.leader</key>
          <delay>0</delay>
          <trends>0</trends>
          <value_type>CHAR</value_type>
          <applications>
            <application>
              <name>Docker swarm nodes</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.ManagerStatus.Leader== "true")].Description.Hostname.first()</params>
            </step>
          </preprocessing>
          <master_item>
            <key>docker.swarm.nodes.raw</key>
          </master_item>
          <triggers>
            <trigger>
              <expression>{diff()}=1</expression>
              <name>Docker swarm leader node changed</name>
              <priority>HIGH</priority>
            </trigger>
          </triggers>
        </item>
        <item>
          <name>Docker swarm managers nodes</name>
          <type>DEPENDENT</type>
          <key>docker.swarm.nodes.manager</key>
          <delay>0</delay>
          <applications>
            <application>
              <name>Docker swarm nodes</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.ManagerStatus.Reachability== 'reachable')].ID.length()</params>
            </step>
          </preprocessing>
          <master_item>
            <key>docker.swarm.nodes.raw</key>
          </master_item>
        </item>
        <item>
          <name>Docker swarm nodes raw</name>
          <type>HTTP_AGENT</type>
          <key>docker.swarm.nodes.raw</key>
          <history>0</history>
          <trends>0</trends>
          <value_type>TEXT</value_type>
          <applications>
            <application>
              <name>Docker swarm raw</name>
            </application>
          </applications>
          <timeout>10s</timeout>
          <url>https://{HOST.DNS}:2376/nodes</url>
          <ssl_cert_file>{$CERT_FNAME}</ssl_cert_file>
          <ssl_key_file>{$KEY_FNAME}</ssl_key_file>
        </item>
        <item>
          <name>Docker swarm ready nodes</name>
          <type>DEPENDENT</type>
          <key>docker.swarm.nodes.ready</key>
          <delay>0</delay>
          <applications>
            <application>
              <name>Docker swarm nodes</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.Status.State== 'ready')].ID.length()</params>
              <error_handler>CUSTOM_VALUE</error_handler>
              <error_handler_params>0</error_handler_params>
            </step>
          </preprocessing>
          <master_item>
            <key>docker.swarm.nodes.raw</key>
          </master_item>
          <triggers>
            <trigger>
              <expression>{diff()}=1</expression>
              <name>Docker swarm ready nodes changed</name>
              <priority>HIGH</priority>
            </trigger>
          </triggers>
        </item>
        <item>
          <name>Docker swarm nodes</name>
          <type>DEPENDENT</type>
          <key>docker.swarm.nodes.total</key>
          <delay>0</delay>
          <applications>
            <application>
              <name>Docker swarm nodes</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.ID!= 'nothing')].ID.length()</params>
              <error_handler>CUSTOM_VALUE</error_handler>
              <error_handler_params>0</error_handler_params>
            </step>
          </preprocessing>
          <master_item>
            <key>docker.swarm.nodes.raw</key>
          </master_item>
        </item>
        <item>
          <name>Docker swarm services raw</name>
          <type>HTTP_AGENT</type>
          <key>docker.swarm.services.raw</key>
          <delay>5m</delay>
          <history>0</history>
          <trends>0</trends>
          <value_type>TEXT</value_type>
          <applications>
            <application>
              <name>Docker swarm raw</name>
            </application>
          </applications>
          <timeout>10s</timeout>
          <url>https://{HOST.DNS}:2376/services</url>
          <ssl_cert_file>{$CERT_FNAME}</ssl_cert_file>
          <ssl_key_file>{$KEY_FNAME}</ssl_key_file>
        </item>
        <item>
          <name>Docker swarm tasks raw info</name>
          <type>HTTP_AGENT</type>
          <key>docker.swarm.tasks.raw.info</key>
          <history>0</history>
          <trends>0</trends>
          <value_type>TEXT</value_type>
          <applications>
            <application>
              <name>Docker swarm raw</name>
            </application>
          </applications>
          <timeout>10s</timeout>
          <url>https://{HOST.DNS}:2376/tasks</url>
          <ssl_cert_file>{$CERT_FNAME}</ssl_cert_file>
          <ssl_key_file>{$KEY_FNAME}</ssl_key_file>
        </item>
        <item>
          <name>Docker swarm updated at</name>
          <type>DEPENDENT</type>
          <key>docker.swarm.updated_at</key>
          <delay>0</delay>
          <units>unixtime</units>
          <applications>
            <application>
              <name>Docker swarm general</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$.UpdatedAt</params>
            </step>
            <step>
              <type>JAVASCRIPT</type>
              <params>return Math.floor(Date.parse(value) / 1000)</params>
            </step>
          </preprocessing>
          <master_item>
            <key>docker.swarm.info.raw</key>
          </master_item>
          <triggers>
            <trigger>
              <expression>{nodata(5m)}=1</expression>
              <name>Docker swarm no info last 5 min</name>
              <priority>HIGH</priority>
            </trigger>
          </triggers>
        </item>
      </items>
      <discovery_rules>
        <discovery_rule>
          <name>Docker swarm containers discovery</name>
          <type>HTTP_AGENT</type>
          <key>docker.containers.lld</key>
          <delay>10m</delay>
          <status>DISABLED</status>
          <lifetime>10d</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>{#NAME} CPU usage</name>
              <type>DEPENDENT</type>
              <key>docker.container.cpu[{#ID}]</key>
              <delay>0</delay>
              <history>30d</history>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$.cpu_stats.cpu_usage.total_usage</params>
                </step>
                <step>
                  <type>SIMPLE_CHANGE</type>
                  <params></params>
                </step>
              </preprocessing>
              <master_item>
                <key>docker.container.stats[{#ID}]</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>{#NAME} CPU load %</name>
              <type>CALCULATED</type>
              <key>docker.container.cpu_load[{#ID}]</key>
              <history>30d</history>
              <value_type>FLOAT</value_type>
              <units>!%</units>
              <params>last("docker.container.cpu[{#ID}]")/last("docker.container.system_cpu[{#ID}]")*last("docker.container.cpu_num[{#ID}]")</params>
            </item_prototype>
            <item_prototype>
              <name>{#NAME} CPU number</name>
              <type>DEPENDENT</type>
              <key>docker.container.cpu_num[{#ID}]</key>
              <delay>0</delay>
              <history>30d</history>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$.cpu_stats.cpu_usage.percpu_usage.length()</params>
                </step>
              </preprocessing>
              <master_item>
                <key>docker.container.stats[{#ID}]</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>{#NAME} Mem usage</name>
              <type>DEPENDENT</type>
              <key>docker.container.mem[{#ID}]</key>
              <delay>0</delay>
              <history>30d</history>
              <units>B</units>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$.memory_stats.usage</params>
                </step>
              </preprocessing>
              <master_item>
                <key>docker.container.stats[{#ID}]</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>Raw data container stats {#NAME}</name>
              <type>HTTP_AGENT</type>
              <key>docker.container.stats[{#ID}]</key>
              <history>2d</history>
              <trends>0</trends>
              <value_type>TEXT</value_type>
              <timeout>10s</timeout>
              <url>https://{HOST.DNS}:2376/containers/{#ID}/stats?stream=0</url>
              <ssl_cert_file>{$CERT_FNAME}</ssl_cert_file>
              <ssl_key_file>{$KEY_FNAME}</ssl_key_file>
            </item_prototype>
            <item_prototype>
              <name>{#NAME} CPU system usage</name>
              <type>DEPENDENT</type>
              <key>docker.container.system_cpu[{#ID}]</key>
              <delay>0</delay>
              <history>30d</history>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$.cpu_stats.system_cpu_usage</params>
                </step>
                <step>
                  <type>SIMPLE_CHANGE</type>
                  <params></params>
                </step>
              </preprocessing>
              <master_item>
                <key>docker.container.stats[{#ID}]</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>Raw data container info {#NAME}</name>
              <type>HTTP_AGENT</type>
              <key>docker.container[{#ID}]</key>
              <delay>5m</delay>
              <history>2d</history>
              <trends>0</trends>
              <value_type>TEXT</value_type>
              <timeout>10s</timeout>
              <url>https://{HOST.DNS}:2376/containers/{#ID}/json</url>
              <ssl_cert_file>{$CERT_FNAME}</ssl_cert_file>
              <ssl_key_file>{$KEY_FNAME}</ssl_key_file>
            </item_prototype>
          </item_prototypes>
          <timeout>10s</timeout>
          <url>https://{HOST.DNS}:2376/containers/json</url>
          <ssl_cert_file>{$CERT_FNAME}</ssl_cert_file>
          <ssl_key_file>{$KEY_FNAME}</ssl_key_file>
          <lld_macro_paths>
            <lld_macro_path>
              <lld_macro>{#ID}</lld_macro>
              <path>$.Id</path>
            </lld_macro_path>
            <lld_macro_path>
              <lld_macro>{#NAME}</lld_macro>
              <path>$.Names[*].first()</path>
            </lld_macro_path>
          </lld_macro_paths>
        </discovery_rule>
        <discovery_rule>
          <name>Docker swarm nodes discovery</name>
          <type>HTTP_AGENT</type>
          <key>docker.swarm.nodes.lld</key>
          <delay>1h</delay>
          <status>DISABLED</status>
          <lifetime>10d</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>Node {#NAME} availability</name>
              <type>DEPENDENT</type>
              <key>docker.node.availability[{#ID}]</key>
              <delay>0</delay>
              <trends>0</trends>
              <value_type>CHAR</value_type>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$.Spec.Availability</params>
                </step>
              </preprocessing>
              <master_item>
                <key>docker.nodes[{#ID}]</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>Node {#NAME} engine version</name>
              <type>DEPENDENT</type>
              <key>docker.node.engine_version[{#ID}]</key>
              <delay>0</delay>
              <trends>0</trends>
              <value_type>CHAR</value_type>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$.Description.Engine.EngineVersion</params>
                </step>
              </preprocessing>
              <master_item>
                <key>docker.nodes[{#ID}]</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>Node {#NAME} manager status</name>
              <type>DEPENDENT</type>
              <key>docker.node.manager_status[{#ID}]</key>
              <delay>0</delay>
              <trends>0</trends>
              <value_type>CHAR</value_type>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$.ManagerStatus.Reachability</params>
                </step>
              </preprocessing>
              <master_item>
                <key>docker.nodes[{#ID}]</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>Node {#NAME} resources CPUs</name>
              <type>DEPENDENT</type>
              <key>docker.node.resources.cpu[{#ID}]</key>
              <delay>0</delay>
              <units>Hz</units>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$.Description.Resources.NanoCPUs</params>
                </step>
              </preprocessing>
              <master_item>
                <key>docker.nodes[{#ID}]</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>Node {#NAME} resources memory</name>
              <type>DEPENDENT</type>
              <key>docker.node.resources.mem[{#ID}]</key>
              <delay>0</delay>
              <units>B</units>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$.Description.Resources.MemoryBytes</params>
                </step>
              </preprocessing>
              <master_item>
                <key>docker.nodes[{#ID}]</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>Node {#NAME} role</name>
              <type>DEPENDENT</type>
              <key>docker.node.role[{#ID}]</key>
              <delay>0</delay>
              <trends>0</trends>
              <value_type>CHAR</value_type>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$.Spec.Role</params>
                </step>
              </preprocessing>
              <master_item>
                <key>docker.nodes[{#ID}]</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>Node {#NAME} status</name>
              <type>DEPENDENT</type>
              <key>docker.node.status[{#ID}]</key>
              <delay>0</delay>
              <trends>0</trends>
              <value_type>CHAR</value_type>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$.Status.State</params>
                </step>
              </preprocessing>
              <master_item>
                <key>docker.nodes[{#ID}]</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>Raw data node {#NAME} at {#ADDR}</name>
              <type>HTTP_AGENT</type>
              <key>docker.nodes[{#ID}]</key>
              <delay>5m</delay>
              <trends>0</trends>
              <value_type>TEXT</value_type>
              <timeout>10s</timeout>
              <url>https://{HOST.DNS}:2376/nodes/{#ID}</url>
              <ssl_cert_file>{$CERT_FNAME}</ssl_cert_file>
              <ssl_key_file>{$KEY_FNAME}</ssl_key_file>
            </item_prototype>
          </item_prototypes>
          <timeout>10s</timeout>
          <url>https://{HOST.DNS}:2376/nodes</url>
          <ssl_cert_file>{$CERT_FNAME}</ssl_cert_file>
          <ssl_key_file>{$KEY_FNAME}</ssl_key_file>
          <lld_macro_paths>
            <lld_macro_path>
              <lld_macro>{#ADDR}</lld_macro>
              <path>$.Status.Addr</path>
            </lld_macro_path>
            <lld_macro_path>
              <lld_macro>{#ID}</lld_macro>
              <path>$.ID</path>
            </lld_macro_path>
            <lld_macro_path>
              <lld_macro>{#NAME}</lld_macro>
              <path>$.Description.Hostname</path>
            </lld_macro_path>
          </lld_macro_paths>
        </discovery_rule>
        <discovery_rule>
          <name>Docker swarm services discovery</name>
          <type>HTTP_AGENT</type>
          <key>docker.swarm.services.lld</key>
          <delay>5m</delay>
          <lifetime>10d</lifetime>
          <item_prototypes>
            <item_prototype>
              <name>Docker swarm uptime {#SERVICE}</name>
              <type>DEPENDENT</type>
              <key>docker.swarm.service.uptime[{#SERVICE}]</key>
              <delay>0</delay>
              <units>uptime</units>
              <applications>
                <application>
                  <name>Docker swarm services</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[?(@.ID == '{#ID}')].UpdatedAt.first()</params>
                </step>
                <step>
                  <type>JAVASCRIPT</type>
                  <params>return Math.floor((Date.now() - Date.parse(value)) / 1000)</params>
                </step>
              </preprocessing>
              <master_item>
                <key>docker.swarm.services.raw</key>
              </master_item>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}&lt;600</expression>
                  <name>Docker swarm updated service {#SERVICE}</name>
                  <priority>WARNING</priority>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
            <item_prototype>
              <name>Docker swarm number running tasks for {#SERVICE}</name>
              <type>DEPENDENT</type>
              <key>docker.swarm.tasks.running[{#SERVICE}]</key>
              <delay>0</delay>
              <applications>
                <application>
                  <name>Docker swarm services</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[?(@.Status.State == 'running' &amp;&amp; @.ServiceID == '{#ID}')].length()</params>
                </step>
              </preprocessing>
              <master_item>
                <key>docker.swarm.tasks.raw.info</key>
              </master_item>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{last()}=0</expression>
                  <recovery_mode>RECOVERY_EXPRESSION</recovery_mode>
                  <recovery_expression>{avg(30m)}&lt;1</recovery_expression>
                  <name>Docker swarm no running tasks for {#SERVICE}</name>
                  <priority>AVERAGE</priority>
                  <manual_close>YES</manual_close>
                </trigger_prototype>
                <trigger_prototype>
                  <expression>{diff()}=1</expression>
                  <name>Docker swarm no running tasks for {#SERVICE} changed</name>
                  <priority>AVERAGE</priority>
                  <manual_close>YES</manual_close>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
          </item_prototypes>
          <timeout>20s</timeout>
          <url>https://{HOST.DNS}:2376/services</url>
          <ssl_cert_file>{$CERT_FNAME}</ssl_cert_file>
          <ssl_key_file>{$KEY_FNAME}</ssl_key_file>
          <lld_macro_paths>
            <lld_macro_path>
              <lld_macro>{#ID}</lld_macro>
              <path>$.ID</path>
            </lld_macro_path>
            <lld_macro_path>
              <lld_macro>{#SERVICE}</lld_macro>
              <path>$.Spec.Name</path>
            </lld_macro_path>
            <lld_macro_path>
              <lld_macro>{#STACK}</lld_macro>
              <path>$.Spec.Labels['com.docker.stack.namespace']</path>
            </lld_macro_path>
          </lld_macro_paths>
        </discovery_rule>
      </discovery_rules>
      <macros>
        <macro>
          <macro>{$CERT_FNAME}</macro>
          <value>dclient-cert.pem</value>
        </macro>
        <macro>
          <macro>{$KEY_FNAME}</macro>
          <value>dclient-key.pem</value>
        </macro>
      </macros>
    </template>
  </templates>
</zabbix_export>