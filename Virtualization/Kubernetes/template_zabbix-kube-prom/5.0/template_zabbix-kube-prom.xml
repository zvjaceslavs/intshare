<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
  <version>5.0</version>
  <date>2021-10-22T10:11:10Z</date>
  <groups>
    <group>
      <name>Kube/Nodes</name>
    </group>
    <group>
      <name>Kube/Pods</name>
    </group>
    <group>
      <name>Templates</name>
    </group>
    <group>
      <name>Templates/Kubernetes</name>
    </group>
    <group>
      <name>Templates/Operating systems</name>
    </group>
  </groups>
  <templates>
    <template>
      <template>Template Kube by Prom API</template>
      <name>Template Kube by Prom API</name>
      <description>This template works out of the box as soon as Prometheus (Prometheus-operator) is available inside your cluster; it does not require any Zabbix agent installation or configuration. It allows external monitoring of the Kubernetes cluster through ingress, without any NodePort declaration. It uses the Prometheus API to create a Zabbix host for each pod available inside the Kubernetes cluster. {$PROM.API.URL} must contains the Prometheus entry point into your Kubernetes cluster. Zabbix pod hosts are created with the "Template Kube Pod by Prom API" template by default.</description>
      <groups>
        <group>
          <name>Templates</name>
        </group>
        <group>
          <name>Templates/Kubernetes</name>
        </group>
      </groups>
      <discovery_rules>
        <discovery_rule>
          <name>Kube node</name>
          <type>HTTP_AGENT</type>
          <key>prom.node.discovery</key>
          <filter>
            <evaltype>AND</evaltype>
            <conditions>
              <condition>
                <macro>{#NODE.IP}</macro>
                <value>{$PROM.NODE.IP.MATCHES}</value>
                <formulaid>A</formulaid>
              </condition>
              <condition>
                <macro>{#NODE.IP}</macro>
                <value>{$PROM.NODE.IP.NOT_MATCHES}</value>
                <operator>NOT_MATCHES_REGEX</operator>
                <formulaid>B</formulaid>
              </condition>
              <condition>
                <macro>{#NODE.NAME}</macro>
                <value>{$PROM.NODE.NAME.NOT_MATCHES}</value>
                <operator>NOT_MATCHES_REGEX</operator>
                <formulaid>C</formulaid>
              </condition>
            </conditions>
          </filter>
          <host_prototypes>
            <host_prototype>
              <host>{#NODE.IP}</host>
              <name>{#NODE.NAME}</name>
              <group_links>
                <group_link>
                  <group>
                    <name>Kube/Nodes</name>
                  </group>
                </group_link>
              </group_links>
              <templates>
                <template>
                  <name>Template Kube Node by Prom API</name>
                </template>
              </templates>
            </host_prototype>
          </host_prototypes>
          <url>{$PROM.API.URL}/query</url>
          <query_fields>
            <query_field>
              <name>query</name>
              <value>kubelet_node_name</value>
            </query_field>
          </query_fields>
          <lld_macro_paths>
            <lld_macro_path>
              <lld_macro>{#NODE.IP}</lld_macro>
              <path>$.instance</path>
            </lld_macro_path>
            <lld_macro_path>
              <lld_macro>{#NODE.NAME}</lld_macro>
              <path>$.node</path>
            </lld_macro_path>
          </lld_macro_paths>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$.data.result[?(@.metric.node=~'{$PROM.NODE.NAME.MATCHES}')].metric</params>
            </step>
            <step>
              <type>JAVASCRIPT</type>
              <params>return JSON.stringify(JSON.parse(value).map(function(metric){ metric.instance=metric.instance.split(":")[0]; return metric}))</params>
            </step>
          </preprocessing>
        </discovery_rule>
        <discovery_rule>
          <name>Kube pod</name>
          <type>HTTP_AGENT</type>
          <key>prom.pod.discovery</key>
          <filter>
            <evaltype>AND</evaltype>
            <conditions>
              <condition>
                <macro>{#NAMESPACE}</macro>
                <value>{$PROM.POD.NAMESPACE.NOT_MATCHES}</value>
                <operator>NOT_MATCHES_REGEX</operator>
                <formulaid>A</formulaid>
              </condition>
              <condition>
                <macro>{#SERVICE}</macro>
                <value>{$PROM.POD.SERVICE.NOT_MATCHES}</value>
                <operator>NOT_MATCHES_REGEX</operator>
                <formulaid>C</formulaid>
              </condition>
              <condition>
                <macro>{#PODNAME}</macro>
                <value>{$PROM.POD.NAME.NOT_MATCHES}</value>
                <operator>NOT_MATCHES_REGEX</operator>
                <formulaid>B</formulaid>
              </condition>
            </conditions>
          </filter>
          <host_prototypes>
            <host_prototype>
              <host>{#PODNAME}</host>
              <name>{#PODNAME}</name>
              <group_links>
                <group_link>
                  <group>
                    <name>Kube/Pods</name>
                  </group>
                </group_link>
              </group_links>
              <templates>
                <template>
                  <name>Template Kube Pod by Prom API</name>
                </template>
              </templates>
            </host_prototype>
          </host_prototypes>
          <url>{$PROM.API.URL}/query</url>
          <query_fields>
            <query_field>
              <name>query</name>
              <value>kube_pod_created</value>
            </query_field>
          </query_fields>
          <lld_macro_paths>
            <lld_macro_path>
              <lld_macro>{#NAMESPACE}</lld_macro>
              <path>$.namespace</path>
            </lld_macro_path>
            <lld_macro_path>
              <lld_macro>{#PODNAME}</lld_macro>
              <path>$.pod</path>
            </lld_macro_path>
            <lld_macro_path>
              <lld_macro>{#SERVICE}</lld_macro>
              <path>$.service</path>
            </lld_macro_path>
          </lld_macro_paths>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$.data.result[?(@.metric.namespace=~'{$PROM.POD.NAMESPACE.MATCHES}' &amp;&amp; @.metric.service=~'{$PROM.POD.SERVICE.MATCHES}' &amp;&amp; @.metric.pod=~'{$PROM.POD.NAME.MATCHES}')].metric</params>
            </step>
          </preprocessing>
        </discovery_rule>
      </discovery_rules>
      <macros>
        <macro>
          <macro>{$CPU.UTIL.CRIT}</macro>
          <value>90</value>
        </macro>
        <macro>
          <macro>{$IF.ERRORS.WARN}</macro>
          <value>2</value>
        </macro>
        <macro>
          <macro>{$IF.UTIL.MAX}</macro>
          <value>90</value>
        </macro>
        <macro>
          <macro>{$IFCONTROL}</macro>
          <value>1</value>
        </macro>
        <macro>
          <macro>{$KERNEL.MAXFILES.MIN}</macro>
          <value>256</value>
        </macro>
        <macro>
          <macro>{$LOAD_AVG_PER_CPU.MAX.WARN}</macro>
          <value>1.5</value>
          <description>Load per CPU considered sustainable. Tune if needed.</description>
        </macro>
        <macro>
          <macro>{$MEMORY.AVAILABLE.MIN}</macro>
          <value>20M</value>
        </macro>
        <macro>
          <macro>{$MEMORY.UTIL.MAX}</macro>
          <value>90</value>
        </macro>
        <macro>
          <macro>{$NET.IF.IFALIAS.MATCHES}</macro>
          <value>^.*$</value>
        </macro>
        <macro>
          <macro>{$NET.IF.IFALIAS.NOT_MATCHES}</macro>
          <value>CHANGE_IF_NEEDED</value>
        </macro>
        <macro>
          <macro>{$NET.IF.IFNAME.MATCHES}</macro>
          <value>^.*$</value>
        </macro>
        <macro>
          <macro>{$NET.IF.IFNAME.NOT_MATCHES}</macro>
          <value>(^Software Loopback Interface|^NULL[0-9.]*$|^[Ll]o[0-9.]*$|^[Ss]ystem$|^Nu[0-9.]*$|^veth[0-9a-z]+$|docker[0-9]+|br-[a-z0-9]{12})</value>
          <description>Filter out loopbacks, nulls, docker veth links and docker0 bridge by default</description>
        </macro>
        <macro>
          <macro>{$NET.IF.IFOPERSTATUS.MATCHES}</macro>
          <value>^.*$</value>
        </macro>
        <macro>
          <macro>{$NET.IF.IFOPERSTATUS.NOT_MATCHES}</macro>
          <value>^7$</value>
          <description>Ignore notPresent(7)</description>
        </macro>
        <macro>
          <macro>{$NODE_EXPORTER_PORT}</macro>
          <value>9100</value>
          <description>TCP Port node_exporter is listening on.</description>
        </macro>
        <macro>
          <macro>{$PROM.API.URL}</macro>
          <value>http://prometheus.k8scluster.nuci7.lan:8080/api/v1/</value>
          <description>Prometheus API URL. Can be overridden on the host or linked template level.</description>
        </macro>
        <macro>
          <macro>{$PROM.NODE.IP.MATCHES}</macro>
          <value>^.*$</value>
          <description>This macro is used in node discovery. Can be overridden on the host or linked template level.</description>
        </macro>
        <macro>
          <macro>{$PROM.NODE.IP.NOT_MATCHES}</macro>
          <value>CHANGE_IF_NEEDED</value>
          <description>This macro is used in node discovery. Can be overridden on the host or linked template level.</description>
        </macro>
        <macro>
          <macro>{$PROM.NODE.NAME.MATCHES}</macro>
          <value>^.*$</value>
          <description>This macro is used in node discovery. Can be overridden on the host or linked template level.</description>
        </macro>
        <macro>
          <macro>{$PROM.NODE.NAME.NOT_MATCHES}</macro>
          <value>CHANGE_IF_NEEDED</value>
          <description>This macro is used in node discovery. Can be overridden on the host or linked template level.</description>
        </macro>
        <macro>
          <macro>{$PROM.POD.DEVICE.MATCHES}</macro>
          <value>^.*$</value>
          <description>Device regex used in pod's metric discovery. Can be overridden on the host or linked template level.</description>
        </macro>
        <macro>
          <macro>{$PROM.POD.DEVICE.NOT_MATCHES}</macro>
          <value>CHANGE_IF_NEEDED</value>
          <description>Device interface regex used in pod's metric discovery. Can be overridden on the host or linked template level.</description>
        </macro>
        <macro>
          <macro>{$PROM.POD.IFNAME.MATCHES}</macro>
          <value>^.*$</value>
          <description>Network interface regex used in pod's metric discovery. Can be overridden on the host or linked template level.</description>
        </macro>
        <macro>
          <macro>{$PROM.POD.IFNAME.NOT_MATCHES}</macro>
          <value>CHANGE_IF_NEEDED</value>
          <description>Network interface regex used in pod's metric discovery. Can be overridden on the host or linked template level.</description>
        </macro>
        <macro>
          <macro>{$PROM.POD.NAME.MATCHES}</macro>
          <value>^.*$</value>
          <description>This macro is used in pod discovery. Can be overridden on the host or linked template level.</description>
        </macro>
        <macro>
          <macro>{$PROM.POD.NAME.NOT_MATCHES}</macro>
          <value>CHANGE_IF_NEEDED</value>
          <description>This macro is used in pod discovery. Can be overridden on the host or linked template level.</description>
        </macro>
        <macro>
          <macro>{$PROM.POD.NAMESPACE.MATCHES}</macro>
          <value>^.*$</value>
          <description>This macro is used in pod discovery. Can be overridden on the host or linked template level.</description>
        </macro>
        <macro>
          <macro>{$PROM.POD.NAMESPACE.NOT_MATCHES}</macro>
          <value>CHANGE_IF_NEEDED</value>
          <description>This macro is used in pod discovery. Can be overridden on the host or linked template level.</description>
        </macro>
        <macro>
          <macro>{$PROM.POD.SERVICE.MATCHES}</macro>
          <value>^.*$</value>
          <description>This macro is used in pod discovery. Can be overridden on the host or linked template level.</description>
        </macro>
        <macro>
          <macro>{$PROM.POD.SERVICE.NOT_MATCHES}</macro>
          <value>CHANGE_IF_NEEDED</value>
          <description>This macro is used in pod discovery. Can be overridden on the host or linked template level.</description>
        </macro>
        <macro>
          <macro>{$SWAP.PFREE.MIN.WARN}</macro>
          <value>50</value>
        </macro>
        <macro>
          <macro>{$SYSTEM.FUZZYTIME.MAX}</macro>
          <value>60</value>
        </macro>
        <macro>
          <macro>{$VFS.DEV.DEVNAME.MATCHES}</macro>
          <value>.+</value>
          <description>This macro is used in block devices discovery. Can be overridden on the host or linked template level</description>
        </macro>
        <macro>
          <macro>{$VFS.DEV.DEVNAME.NOT_MATCHES}</macro>
          <value>^(loop[0-9]*|sd[a-z][0-9]+|nbd[0-9]+|sr[0-9]+|fd[0-9]+|dm-[0-9]+|ram[0-9]+|ploop[a-z0-9]+|md[0-9]*|hcp[0-9]*|zram[0-9]*)</value>
          <description>This macro is used in block devices discovery. Can be overridden on the host or linked template level</description>
        </macro>
        <macro>
          <macro>{$VFS.DEV.READ.AWAIT.WARN}</macro>
          <value>20</value>
          <description>Disk read average response time (in ms) before the trigger would fire</description>
        </macro>
        <macro>
          <macro>{$VFS.DEV.WRITE.AWAIT.WARN}</macro>
          <value>20</value>
          <description>Disk write average response time (in ms) before the trigger would fire</description>
        </macro>
        <macro>
          <macro>{$VFS.FS.FSDEVICE.MATCHES}</macro>
          <value>^.+$</value>
          <description>This macro is used in filesystems discovery. Can be overridden on the host or linked template level</description>
        </macro>
        <macro>
          <macro>{$VFS.FS.FSDEVICE.NOT_MATCHES}</macro>
          <value>^\s$</value>
          <description>This macro is used in filesystems discovery. Can be overridden on the host or linked template level</description>
        </macro>
        <macro>
          <macro>{$VFS.FS.FSNAME.MATCHES}</macro>
          <value>.+</value>
          <description>This macro is used in filesystems discovery. Can be overridden on the host or linked template level</description>
        </macro>
        <macro>
          <macro>{$VFS.FS.FSNAME.NOT_MATCHES}</macro>
          <value>^(/dev|/sys|/run|/proc|.+/shm$)</value>
          <description>This macro is used in filesystems discovery. Can be overridden on the host or linked template level</description>
        </macro>
        <macro>
          <macro>{$VFS.FS.FSTYPE.MATCHES}</macro>
          <value>^(btrfs|ext2|ext3|ext4|reiser|xfs|ffs|ufs|jfs|jfs2|vxfs|hfs|apfs|refs|ntfs|fat32|zfs)$</value>
          <description>This macro is used in filesystems discovery. Can be overridden on the host or linked template level</description>
        </macro>
        <macro>
          <macro>{$VFS.FS.FSTYPE.NOT_MATCHES}</macro>
          <value>^\s$</value>
          <description>This macro is used in filesystems discovery. Can be overridden on the host or linked template level</description>
        </macro>
        <macro>
          <macro>{$VFS.FS.INODE.PFREE.MIN.CRIT}</macro>
          <value>10</value>
        </macro>
        <macro>
          <macro>{$VFS.FS.INODE.PFREE.MIN.WARN}</macro>
          <value>20</value>
        </macro>
        <macro>
          <macro>{$VFS.FS.PUSED.MAX.CRIT}</macro>
          <value>90</value>
        </macro>
        <macro>
          <macro>{$VFS.FS.PUSED.MAX.WARN}</macro>
          <value>80</value>
        </macro>
      </macros>
    </template>
    <template>
      <template>Template Kube Node by Prom API</template>
      <name>Template Kube Node by Prom API</name>
      <description>Official Linux template using node exporter. Known Issues: Description: node_exporter v0.16.0 renamed many metrics. CPU utilization for 'guest' and 'guest_nice' metrics are not supported in this template with node_exporter &lt; 0.16. Disk IO metrics are not supported. Other metrics provided as 'best effort'. See https://github.com/prometheus/node_exporter/releases/tag/v0.16.0 for details. Version: below 0.16.0 Description: metric node_network_info with label 'device' cannot be found, so network discovery is not possible. Version: below 0.18 You can discuss this template or leave feedback on our forum https://www.zabbix.com/forum/zabbix-suggestions-and-feedback/387225-discussion-thread-for-official-zabbix-template-for-linux Template tooling version used: 0.34</description>
      <groups>
        <group>
          <name>Templates/Operating systems</name>
        </group>
      </groups>
      <applications>
        <application>
          <name>CPU</name>
        </application>
        <application>
          <name>General</name>
        </application>
        <application>
          <name>Inventory</name>
        </application>
        <application>
          <name>Memory</name>
        </application>
        <application>
          <name>Monitoring agent</name>
        </application>
        <application>
          <name>Network interfaces</name>
        </application>
        <application>
          <name>Status</name>
        </application>
        <application>
          <name>Storage</name>
        </application>
        <application>
          <name>Zabbix raw items</name>
        </application>
      </applications>
      <items>
        <item>
          <name>Version of node_exporter running</name>
          <type>DEPENDENT</type>
          <key>agent.version[node_exporter]</key>
          <delay>0</delay>
          <history>7d</history>
          <trends>0</trends>
          <value_type>CHAR</value_type>
          <applications>
            <application>
              <name>Monitoring agent</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.metric['__name__']=='node_uname_info')].metric.version</params>
            </step>
            <step>
              <type>JAVASCRIPT</type>
              <params>return JSON.parse(value)[0];</params>
            </step>
            <step>
              <type>DISCARD_UNCHANGED_HEARTBEAT</type>
              <params>1d</params>
            </step>
          </preprocessing>
          <master_item>
            <key>node_exporter.get</key>
          </master_item>
        </item>
        <item>
          <name>Number of open file descriptors</name>
          <type>DEPENDENT</type>
          <key>fd.open[node_exporter]</key>
          <delay>0</delay>
          <history>7d</history>
          <value_type>FLOAT</value_type>
          <applications>
            <application>
              <name>General</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.metric['__name__']=='node_filefd_allocated')].value[1]</params>
            </step>
            <step>
              <type>JAVASCRIPT</type>
              <params>return JSON.parse(value).map(Number)</params>
            </step>
          </preprocessing>
          <master_item>
            <key>node_exporter.get</key>
          </master_item>
        </item>
        <item>
          <name>Maximum number of open file descriptors</name>
          <type>DEPENDENT</type>
          <key>kernel.maxfiles[node_exporter]</key>
          <delay>0</delay>
          <history>7d</history>
          <value_type>FLOAT</value_type>
          <description>It could be increased by using sysctrl utility or modifying file /etc/sysctl.conf.</description>
          <applications>
            <application>
              <name>General</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.metric['__name__']=='node_filefd_maximum')].value[1]</params>
            </step>
            <step>
              <type>JAVASCRIPT</type>
              <params>return JSON.parse(value).map(Number)</params>
            </step>
            <step>
              <type>DISCARD_UNCHANGED_HEARTBEAT</type>
              <params>1d</params>
            </step>
          </preprocessing>
          <master_item>
            <key>node_exporter.get</key>
          </master_item>
          <triggers>
            <trigger>
              <expression>{last()}&lt;{$KERNEL.MAXFILES.MIN}</expression>
              <name>Configured max number of open filedescriptors is too low (&lt; {$KERNEL.MAXFILES.MIN})</name>
              <priority>INFO</priority>
              <dependencies>
                <dependency>
                  <name>Running out of file descriptors (less than &lt; 20% free)</name>
                  <expression>{Template Kube Node by Prom API:fd.open[node_exporter].last()}/{Template Kube Node by Prom API:kernel.maxfiles[node_exporter].last()}*100>80</expression>
                </dependency>
              </dependencies>
            </trigger>
          </triggers>
        </item>
        <item>
          <name>Get node_exporter metrics</name>
          <type>HTTP_AGENT</type>
          <key>node_exporter.get</key>
          <history>1h</history>
          <trends>0</trends>
          <value_type>TEXT</value_type>
          <applications>
            <application>
              <name>Zabbix raw items</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$.data.result</params>
            </step>
          </preprocessing>
          <url>{$PROM.API.URL}/query</url>
          <query_fields>
            <query_field>
              <name>query</name>
              <value>sum({__name__=~'^node_.*$',instance=~'^{HOST.HOST}:{$NODE_EXPORTER_PORT}$',container='node-exporter'}) by (__name__,cpu,mode,device,ifalias,operstate,filesystem,mountpoint,fstype,nodename,machine,sysname,release,version)</value>
            </query_field>
          </query_fields>
          <triggers>
            <trigger>
              <expression>{nodata(30m)}=1</expression>
              <name>node_exporter is not available (or no data for 30m)</name>
              <priority>WARNING</priority>
              <description>Failed to fetch system metrics from node_exporter in time.</description>
              <manual_close>YES</manual_close>
            </trigger>
          </triggers>
        </item>
        <item>
          <name>System boot time</name>
          <type>DEPENDENT</type>
          <key>system.boottime[node_exporter]</key>
          <delay>0</delay>
          <history>7d</history>
          <value_type>FLOAT</value_type>
          <units>unixtime</units>
          <applications>
            <application>
              <name>General</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.metric['__name__']=='node_boot_time_seconds')].value[1]</params>
            </step>
            <step>
              <type>JAVASCRIPT</type>
              <params>return JSON.parse(value).map(Number)</params>
            </step>
          </preprocessing>
          <master_item>
            <key>node_exporter.get</key>
          </master_item>
        </item>
        <item>
          <name>CPU guest time</name>
          <type>DEPENDENT</type>
          <key>system.cpu.guest[node_exporter]</key>
          <delay>0</delay>
          <history>7d</history>
          <value_type>FLOAT</value_type>
          <units>%</units>
          <description>Guest time (time spent running a virtual CPU for a guest operating system)</description>
          <applications>
            <application>
              <name>CPU</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.metric['__name__']=='node_cpu_guest_seconds_total' &amp;&amp; @.metric.mode=='user')].value[1]</params>
            </step>
            <step>
              <type>JAVASCRIPT</type>
              <params>//calculates average, all cpu utilization var valueArr = JSON.parse(value); return valueArr.reduce(function(acc,obj){ return acc + parseFloat(obj) },0)/valueArr.length;</params>
            </step>
            <step>
              <type>CHANGE_PER_SECOND</type>
              <params></params>
            </step>
            <step>
              <type>MULTIPLIER</type>
              <params>100</params>
            </step>
          </preprocessing>
          <master_item>
            <key>node_exporter.get</key>
          </master_item>
        </item>
        <item>
          <name>CPU guest nice time</name>
          <type>DEPENDENT</type>
          <key>system.cpu.guest_nice[node_exporter]</key>
          <delay>0</delay>
          <history>7d</history>
          <value_type>FLOAT</value_type>
          <units>%</units>
          <description>Time spent running a niced guest (virtual CPU for guest operating systems under the control of the Linux kernel)</description>
          <applications>
            <application>
              <name>CPU</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.metric['__name__']=='node_cpu_guest_seconds_total' &amp;&amp; @.metric.mode=='nice')].value[1]</params>
            </step>
            <step>
              <type>JAVASCRIPT</type>
              <params>//calculates average, all cpu utilization var valueArr = JSON.parse(value); return valueArr.reduce(function(acc,obj){ return acc + parseFloat(obj) },0)/valueArr.length;</params>
            </step>
            <step>
              <type>CHANGE_PER_SECOND</type>
              <params></params>
            </step>
            <step>
              <type>MULTIPLIER</type>
              <params>100</params>
            </step>
          </preprocessing>
          <master_item>
            <key>node_exporter.get</key>
          </master_item>
        </item>
        <item>
          <name>CPU idle time</name>
          <type>DEPENDENT</type>
          <key>system.cpu.idle[node_exporter]</key>
          <delay>0</delay>
          <history>7d</history>
          <value_type>FLOAT</value_type>
          <units>%</units>
          <description>The time the CPU has spent doing nothing.</description>
          <applications>
            <application>
              <name>CPU</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.metric['__name__']=='node_cpu_seconds_total' &amp;&amp; @.metric.mode=='idle')].value[1]</params>
            </step>
            <step>
              <type>JAVASCRIPT</type>
              <params>//calculates average, all cpu utilization var valueArr = JSON.parse(value); return valueArr.reduce(function(acc,obj){ return acc + parseFloat(obj) },0)/valueArr.length;</params>
            </step>
            <step>
              <type>CHANGE_PER_SECOND</type>
              <params></params>
            </step>
            <step>
              <type>MULTIPLIER</type>
              <params>100</params>
            </step>
          </preprocessing>
          <master_item>
            <key>node_exporter.get</key>
          </master_item>
        </item>
        <item>
          <name>CPU interrupt time</name>
          <type>DEPENDENT</type>
          <key>system.cpu.interrupt[node_exporter]</key>
          <delay>0</delay>
          <history>7d</history>
          <value_type>FLOAT</value_type>
          <units>%</units>
          <description>The amount of time the CPU has been servicing hardware interrupts.</description>
          <applications>
            <application>
              <name>CPU</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.metric['__name__']=='node_cpu_seconds_total' &amp;&amp; @.metric.mode=='irq')].value[1]</params>
            </step>
            <step>
              <type>JAVASCRIPT</type>
              <params>//calculates average, all cpu utilization var valueArr = JSON.parse(value); return valueArr.reduce(function(acc,obj){ return acc + parseFloat(obj) },0)/valueArr.length;</params>
            </step>
            <step>
              <type>CHANGE_PER_SECOND</type>
              <params></params>
            </step>
            <step>
              <type>MULTIPLIER</type>
              <params>100</params>
            </step>
          </preprocessing>
          <master_item>
            <key>node_exporter.get</key>
          </master_item>
        </item>
        <item>
          <name>Interrupts per second</name>
          <type>DEPENDENT</type>
          <key>system.cpu.intr[node_exporter]</key>
          <delay>0</delay>
          <history>7d</history>
          <value_type>FLOAT</value_type>
          <applications>
            <application>
              <name>CPU</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.metric['__name__']=='node_intr_total')].value[1]</params>
            </step>
            <step>
              <type>JAVASCRIPT</type>
              <params>return JSON.parse(value).map(Number)</params>
            </step>
            <step>
              <type>CHANGE_PER_SECOND</type>
              <params></params>
            </step>
          </preprocessing>
          <master_item>
            <key>node_exporter.get</key>
          </master_item>
        </item>
        <item>
          <name>CPU iowait time</name>
          <type>DEPENDENT</type>
          <key>system.cpu.iowait[node_exporter]</key>
          <delay>0</delay>
          <history>7d</history>
          <value_type>FLOAT</value_type>
          <units>%</units>
          <description>Amount of time the CPU has been waiting for I/O to complete.</description>
          <applications>
            <application>
              <name>CPU</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.metric['__name__']=='node_cpu_seconds_total' &amp;&amp; @.metric.mode=='iowait')].value[1]</params>
            </step>
            <step>
              <type>JAVASCRIPT</type>
              <params>//calculates average, all cpu utilization var valueArr = JSON.parse(value); return valueArr.reduce(function(acc,obj){ return acc + parseFloat(obj) },0)/valueArr.length;</params>
            </step>
            <step>
              <type>CHANGE_PER_SECOND</type>
              <params></params>
            </step>
            <step>
              <type>MULTIPLIER</type>
              <params>100</params>
            </step>
          </preprocessing>
          <master_item>
            <key>node_exporter.get</key>
          </master_item>
        </item>
        <item>
          <name>Load average (1m avg)</name>
          <type>DEPENDENT</type>
          <key>system.cpu.load.avg1[node_exporter]</key>
          <delay>0</delay>
          <history>7d</history>
          <value_type>FLOAT</value_type>
          <applications>
            <application>
              <name>CPU</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.metric['__name__']=='node_load1')].value[1]</params>
            </step>
            <step>
              <type>JAVASCRIPT</type>
              <params>return JSON.parse(value).map(Number)</params>
            </step>
          </preprocessing>
          <master_item>
            <key>node_exporter.get</key>
          </master_item>
        </item>
        <item>
          <name>Load average (5m avg)</name>
          <type>DEPENDENT</type>
          <key>system.cpu.load.avg5[node_exporter]</key>
          <delay>0</delay>
          <history>7d</history>
          <value_type>FLOAT</value_type>
          <applications>
            <application>
              <name>CPU</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.metric['__name__']=='node_load5')].value[1]</params>
            </step>
            <step>
              <type>JAVASCRIPT</type>
              <params>return JSON.parse(value).map(Number)</params>
            </step>
          </preprocessing>
          <master_item>
            <key>node_exporter.get</key>
          </master_item>
        </item>
        <item>
          <name>Load average (15m avg)</name>
          <type>DEPENDENT</type>
          <key>system.cpu.load.avg15[node_exporter]</key>
          <delay>0</delay>
          <history>7d</history>
          <value_type>FLOAT</value_type>
          <applications>
            <application>
              <name>CPU</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.metric['__name__']=='node_load15')].value[1]</params>
            </step>
            <step>
              <type>JAVASCRIPT</type>
              <params>return JSON.parse(value).map(Number)</params>
            </step>
          </preprocessing>
          <master_item>
            <key>node_exporter.get</key>
          </master_item>
        </item>
        <item>
          <name>CPU nice time</name>
          <type>DEPENDENT</type>
          <key>system.cpu.nice[node_exporter]</key>
          <delay>0</delay>
          <history>7d</history>
          <value_type>FLOAT</value_type>
          <units>%</units>
          <description>The time the CPU has spent running users' processes that have been niced.</description>
          <applications>
            <application>
              <name>CPU</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.metric['__name__']=='node_cpu_seconds_total' &amp;&amp; @.metric.mode=='nice')].value[1]</params>
            </step>
            <step>
              <type>JAVASCRIPT</type>
              <params>//calculates average, all cpu utilization var valueArr = JSON.parse(value); return valueArr.reduce(function(acc,obj){ return acc + parseFloat(obj) },0)/valueArr.length;</params>
            </step>
            <step>
              <type>CHANGE_PER_SECOND</type>
              <params></params>
            </step>
            <step>
              <type>MULTIPLIER</type>
              <params>100</params>
            </step>
          </preprocessing>
          <master_item>
            <key>node_exporter.get</key>
          </master_item>
        </item>
        <item>
          <name>Number of CPUs</name>
          <type>DEPENDENT</type>
          <key>system.cpu.num[node_exporter]</key>
          <delay>0</delay>
          <history>7d</history>
          <applications>
            <application>
              <name>CPU</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.metric['__name__']=='node_cpu_seconds_total' &amp;&amp; @.metric['mode']=='idle')].value[1]</params>
            </step>
            <step>
              <type>JAVASCRIPT</type>
              <params>//count the number of cores return JSON.parse(value).length</params>
            </step>
          </preprocessing>
          <master_item>
            <key>node_exporter.get</key>
          </master_item>
        </item>
        <item>
          <name>CPU softirq time</name>
          <type>DEPENDENT</type>
          <key>system.cpu.softirq[node_exporter]</key>
          <delay>0</delay>
          <history>7d</history>
          <value_type>FLOAT</value_type>
          <units>%</units>
          <description>The amount of time the CPU has been servicing software interrupts.</description>
          <applications>
            <application>
              <name>CPU</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.metric['__name__']=='node_cpu_seconds_total' &amp;&amp; @.metric.mode=='softirq')].value[1]</params>
            </step>
            <step>
              <type>JAVASCRIPT</type>
              <params>//calculates average, all cpu utilization var valueArr = JSON.parse(value); return valueArr.reduce(function(acc,obj){ return acc + parseFloat(obj) },0)/valueArr.length;</params>
            </step>
            <step>
              <type>CHANGE_PER_SECOND</type>
              <params></params>
            </step>
            <step>
              <type>MULTIPLIER</type>
              <params>100</params>
            </step>
          </preprocessing>
          <master_item>
            <key>node_exporter.get</key>
          </master_item>
        </item>
        <item>
          <name>CPU steal time</name>
          <type>DEPENDENT</type>
          <key>system.cpu.steal[node_exporter]</key>
          <delay>0</delay>
          <history>7d</history>
          <value_type>FLOAT</value_type>
          <units>%</units>
          <description>The amount of CPU 'stolen' from this virtual machine by the hypervisor for other tasks (such as running another virtual machine).</description>
          <applications>
            <application>
              <name>CPU</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.metric['__name__']=='node_cpu_seconds_total' &amp;&amp; @.metric.mode=='steal')].value[1]</params>
            </step>
            <step>
              <type>JAVASCRIPT</type>
              <params>//calculates average, all cpu utilization var valueArr = JSON.parse(value); return valueArr.reduce(function(acc,obj){ return acc + parseFloat(obj) },0)/valueArr.length;</params>
            </step>
            <step>
              <type>CHANGE_PER_SECOND</type>
              <params></params>
            </step>
            <step>
              <type>MULTIPLIER</type>
              <params>100</params>
            </step>
          </preprocessing>
          <master_item>
            <key>node_exporter.get</key>
          </master_item>
        </item>
        <item>
          <name>Context switches per second</name>
          <type>DEPENDENT</type>
          <key>system.cpu.switches[node_exporter]</key>
          <delay>0</delay>
          <history>7d</history>
          <value_type>FLOAT</value_type>
          <applications>
            <application>
              <name>CPU</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.metric['__name__']=='node_context_switches_total')].value[1]</params>
            </step>
            <step>
              <type>JAVASCRIPT</type>
              <params>return JSON.parse(value).map(Number)</params>
            </step>
            <step>
              <type>CHANGE_PER_SECOND</type>
              <params></params>
            </step>
          </preprocessing>
          <master_item>
            <key>node_exporter.get</key>
          </master_item>
        </item>
        <item>
          <name>CPU system time</name>
          <type>DEPENDENT</type>
          <key>system.cpu.system[node_exporter]</key>
          <delay>0</delay>
          <history>7d</history>
          <value_type>FLOAT</value_type>
          <units>%</units>
          <description>The time the CPU has spent running the kernel and its processes.</description>
          <applications>
            <application>
              <name>CPU</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.metric['__name__']=='node_cpu_seconds_total' &amp;&amp; @.metric.mode=='system')].value[1]</params>
            </step>
            <step>
              <type>JAVASCRIPT</type>
              <params>//calculates average, all cpu utilization var valueArr = JSON.parse(value); return valueArr.reduce(function(acc,obj){ return acc + parseFloat(obj) },0)/valueArr.length;</params>
            </step>
            <step>
              <type>CHANGE_PER_SECOND</type>
              <params></params>
            </step>
            <step>
              <type>MULTIPLIER</type>
              <params>100</params>
            </step>
          </preprocessing>
          <master_item>
            <key>node_exporter.get</key>
          </master_item>
        </item>
        <item>
          <name>CPU user time</name>
          <type>DEPENDENT</type>
          <key>system.cpu.user[node_exporter]</key>
          <delay>0</delay>
          <history>7d</history>
          <value_type>FLOAT</value_type>
          <units>%</units>
          <description>The time the CPU has spent running users' processes that are not niced.</description>
          <applications>
            <application>
              <name>CPU</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.metric['__name__']=='node_cpu_seconds_total' &amp;&amp; @.metric.mode=='user')].value[1]</params>
            </step>
            <step>
              <type>JAVASCRIPT</type>
              <params>//calculates average, all cpu utilization var valueArr = JSON.parse(value); return valueArr.reduce(function(acc,obj){ return acc + parseFloat(obj) },0)/valueArr.length;</params>
            </step>
            <step>
              <type>CHANGE_PER_SECOND</type>
              <params></params>
            </step>
            <step>
              <type>MULTIPLIER</type>
              <params>100</params>
            </step>
          </preprocessing>
          <master_item>
            <key>node_exporter.get</key>
          </master_item>
        </item>
        <item>
          <name>CPU utilization</name>
          <type>DEPENDENT</type>
          <key>system.cpu.util[node_exporter]</key>
          <delay>0</delay>
          <history>7d</history>
          <value_type>FLOAT</value_type>
          <units>%</units>
          <description>CPU utilization in %</description>
          <applications>
            <application>
              <name>CPU</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JAVASCRIPT</type>
              <params>//Calculate utilization return (100 - value)</params>
            </step>
          </preprocessing>
          <master_item>
            <key>system.cpu.idle[node_exporter]</key>
          </master_item>
          <triggers>
            <trigger>
              <expression>{min(5m)}>{$CPU.UTIL.CRIT}</expression>
              <name>High CPU utilization (over {$CPU.UTIL.CRIT}% for 5m)</name>
              <opdata>Current utilization: {ITEM.LASTVALUE1}</opdata>
              <priority>WARNING</priority>
              <description>CPU utilization is too high. The system might be slow to respond.</description>
              <dependencies>
                <dependency>
                  <name>Load average is too high (per CPU load over {$LOAD_AVG_PER_CPU.MAX.WARN} for 5m)</name>
                  <expression>{Template Kube Node by Prom API:system.cpu.load.avg1[node_exporter].min(5m)}/{Template Kube Node by Prom API:system.cpu.num[node_exporter].last()}>{$LOAD_AVG_PER_CPU.MAX.WARN} and {Template Kube Node by Prom API:system.cpu.load.avg5[node_exporter].last()}>0 and {Template Kube Node by Prom API:system.cpu.load.avg15[node_exporter].last()}>0</expression>
                </dependency>
              </dependencies>
            </trigger>
          </triggers>
        </item>
        <item>
          <name>System description</name>
          <type>DEPENDENT</type>
          <key>system.descr[node_exporter]</key>
          <delay>0</delay>
          <history>2w</history>
          <trends>0</trends>
          <value_type>CHAR</value_type>
          <description>Labeled system information as provided by the uname system call.</description>
          <applications>
            <application>
              <name>General</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.metric['__name__']=='node_uname_info')].metric</params>
            </step>
            <step>
              <type>JAVASCRIPT</type>
              <params>var info = JSON.parse(value)[0]; return info.sysname + ' version: ' + info.release + ' ' + info.version;</params>
            </step>
            <step>
              <type>DISCARD_UNCHANGED_HEARTBEAT</type>
              <params>1d</params>
            </step>
          </preprocessing>
          <master_item>
            <key>node_exporter.get</key>
          </master_item>
        </item>
        <item>
          <name>System local time</name>
          <type>DEPENDENT</type>
          <key>system.localtime[node_exporter]</key>
          <delay>0</delay>
          <history>7d</history>
          <value_type>FLOAT</value_type>
          <units>unixtime</units>
          <description>System local time of the host.</description>
          <applications>
            <application>
              <name>General</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.metric['__name__']=='node_time_seconds')].value[1]</params>
            </step>
            <step>
              <type>JAVASCRIPT</type>
              <params>return JSON.parse(value).map(Number)</params>
            </step>
          </preprocessing>
          <master_item>
            <key>node_exporter.get</key>
          </master_item>
          <triggers>
            <trigger>
              <expression>{fuzzytime({$SYSTEM.FUZZYTIME.MAX})}=0</expression>
              <name>System time is out of sync (diff with Zabbix server > {$SYSTEM.FUZZYTIME.MAX}s)</name>
              <priority>WARNING</priority>
              <description>The host system time is different from the Zabbix server time.</description>
              <manual_close>YES</manual_close>
            </trigger>
          </triggers>
        </item>
        <item>
          <name>System name</name>
          <type>DEPENDENT</type>
          <key>system.name[node_exporter]</key>
          <delay>0</delay>
          <history>2w</history>
          <trends>0</trends>
          <value_type>CHAR</value_type>
          <description>System host name.</description>
          <inventory_link>NAME</inventory_link>
          <applications>
            <application>
              <name>General</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.metric['__name__']=='node_uname_info')].metric.nodename</params>
            </step>
            <step>
              <type>JAVASCRIPT</type>
              <params>return JSON.parse(value)[0];</params>
            </step>
            <step>
              <type>DISCARD_UNCHANGED_HEARTBEAT</type>
              <params>1d</params>
            </step>
          </preprocessing>
          <master_item>
            <key>node_exporter.get</key>
          </master_item>
          <triggers>
            <trigger>
              <expression>{diff()}=1 and {strlen()}>0</expression>
              <name>System name has changed (new name: {ITEM.VALUE})</name>
              <priority>INFO</priority>
              <description>System name has changed. Ack to close.</description>
              <manual_close>YES</manual_close>
            </trigger>
          </triggers>
        </item>
        <item>
          <name>Operating system architecture</name>
          <type>DEPENDENT</type>
          <key>system.sw.arch[node_exporter]</key>
          <delay>0</delay>
          <history>2w</history>
          <trends>0</trends>
          <value_type>CHAR</value_type>
          <description>Operating system architecture of the host.</description>
          <applications>
            <application>
              <name>Inventory</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.metric['__name__']=='node_uname_info')].metric.machine</params>
            </step>
            <step>
              <type>JAVASCRIPT</type>
              <params>return JSON.parse(value)[0];</params>
            </step>
            <step>
              <type>DISCARD_UNCHANGED_HEARTBEAT</type>
              <params>1d</params>
            </step>
          </preprocessing>
          <master_item>
            <key>node_exporter.get</key>
          </master_item>
        </item>
        <item>
          <name>Operating system</name>
          <type>DEPENDENT</type>
          <key>system.sw.os[node_exporter]</key>
          <delay>0</delay>
          <history>2w</history>
          <trends>0</trends>
          <value_type>CHAR</value_type>
          <inventory_link>OS</inventory_link>
          <applications>
            <application>
              <name>Inventory</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>DISCARD_UNCHANGED_HEARTBEAT</type>
              <params>1d</params>
            </step>
          </preprocessing>
          <master_item>
            <key>system.descr[node_exporter]</key>
          </master_item>
          <triggers>
            <trigger>
              <expression>{diff()}=1 and {strlen()}>0</expression>
              <recovery_mode>NONE</recovery_mode>
              <name>Operating system description has changed</name>
              <priority>INFO</priority>
              <description>Operating system description has changed. Possible reasons that system has been updated or replaced. Ack to close.</description>
              <manual_close>YES</manual_close>
              <dependencies>
                <dependency>
                  <name>System name has changed (new name: {ITEM.VALUE})</name>
                  <expression>{Template Kube Node by Prom API:system.name[node_exporter].diff()}=1 and {Template Kube Node by Prom API:system.name[node_exporter].strlen()}>0</expression>
                </dependency>
              </dependencies>
            </trigger>
          </triggers>
        </item>
        <item>
          <name>Free swap space</name>
          <type>DEPENDENT</type>
          <key>system.swap.free[node_exporter]</key>
          <delay>0</delay>
          <history>7d</history>
          <value_type>FLOAT</value_type>
          <units>B</units>
          <description>The free space of swap volume/file in bytes.</description>
          <applications>
            <application>
              <name>Memory</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.metric['__name__']=='node_memory_SwapFree_bytes')].value[1]</params>
            </step>
            <step>
              <type>JAVASCRIPT</type>
              <params>return JSON.parse(value).map(Number)</params>
            </step>
          </preprocessing>
          <master_item>
            <key>node_exporter.get</key>
          </master_item>
        </item>
        <item>
          <name>Free swap space in %</name>
          <type>CALCULATED</type>
          <key>system.swap.pfree[node_exporter]</key>
          <history>7d</history>
          <value_type>FLOAT</value_type>
          <units>%</units>
          <params>last("system.swap.free[node_exporter]")/last("system.swap.total[node_exporter]")*100</params>
          <description>The free space of swap volume/file in percent.</description>
          <applications>
            <application>
              <name>Memory</name>
            </application>
          </applications>
        </item>
        <item>
          <name>Total swap space</name>
          <type>DEPENDENT</type>
          <key>system.swap.total[node_exporter]</key>
          <delay>0</delay>
          <history>7d</history>
          <value_type>FLOAT</value_type>
          <units>B</units>
          <description>The total space of swap volume/file in bytes.</description>
          <applications>
            <application>
              <name>Memory</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.metric['__name__']=='node_memory_SwapTotal_bytes')].value[1]</params>
            </step>
            <step>
              <type>JAVASCRIPT</type>
              <params>return JSON.parse(value).map(Number)</params>
            </step>
          </preprocessing>
          <master_item>
            <key>node_exporter.get</key>
          </master_item>
        </item>
        <item>
          <name>System uptime</name>
          <type>DEPENDENT</type>
          <key>system.uptime[node_exporter]</key>
          <delay>0</delay>
          <history>2w</history>
          <trends>0</trends>
          <units>uptime</units>
          <description>System uptime in 'N days, hh:mm:ss' format.</description>
          <applications>
            <application>
              <name>Status</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.metric['__name__']=='node_boot_time_seconds')].value[1]</params>
            </step>
            <step>
              <type>JAVASCRIPT</type>
              <params>//use boottime to calculate uptime return (Math.floor(Date.now()/1000)-Number(JSON.parse(value)[0]));</params>
            </step>
          </preprocessing>
          <master_item>
            <key>node_exporter.get</key>
          </master_item>
          <triggers>
            <trigger>
              <expression>{last()}&lt;10m</expression>
              <name>{HOST.NAME} has been restarted (uptime &lt; 10m)</name>
              <priority>WARNING</priority>
              <description>The device uptime is less than 10 minutes</description>
              <manual_close>YES</manual_close>
            </trigger>
          </triggers>
        </item>
        <item>
          <name>Available memory</name>
          <type>DEPENDENT</type>
          <key>vm.memory.available[node_exporter]</key>
          <delay>0</delay>
          <history>7d</history>
          <value_type>FLOAT</value_type>
          <units>B</units>
          <description>Available memory, in Linux, available = free + buffers + cache. On other platforms calculation may vary. See also: https://www.zabbix.com/documentation/current/manual/appendix/items/vm.memory.size_params</description>
          <applications>
            <application>
              <name>Memory</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.metric['__name__']=='node_memory_MemAvailable_bytes')].value[1]</params>
            </step>
            <step>
              <type>JAVASCRIPT</type>
              <params>return JSON.parse(value).map(Number)</params>
            </step>
          </preprocessing>
          <master_item>
            <key>node_exporter.get</key>
          </master_item>
        </item>
        <item>
          <name>Total memory</name>
          <type>DEPENDENT</type>
          <key>vm.memory.total[node_exporter]</key>
          <delay>0</delay>
          <history>7d</history>
          <value_type>FLOAT</value_type>
          <units>B</units>
          <description>Total memory in Bytes</description>
          <applications>
            <application>
              <name>Memory</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.metric['__name__']=='node_memory_MemTotal_bytes')].value[1]</params>
            </step>
            <step>
              <type>JAVASCRIPT</type>
              <params>return JSON.parse(value).map(Number)</params>
            </step>
          </preprocessing>
          <master_item>
            <key>node_exporter.get</key>
          </master_item>
        </item>
        <item>
          <name>Memory utilization</name>
          <type>CALCULATED</type>
          <key>vm.memory.util[node_exporter]</key>
          <history>7d</history>
          <value_type>FLOAT</value_type>
          <units>%</units>
          <params>(last("vm.memory.total[node_exporter]")-last("vm.memory.available[node_exporter]"))/last("vm.memory.total[node_exporter]")*100</params>
          <description>Memory used percentage is calculated as (total-available)/total*100</description>
          <applications>
            <application>
              <name>Memory</name>
            </application>
          </applications>
          <triggers>
            <trigger>
              <expression>{min(5m)}>{$MEMORY.UTIL.MAX}</expression>
              <name>High memory utilization ( >{$MEMORY.UTIL.MAX}% for 5m)</name>
              <priority>AVERAGE</priority>
              <description>The system is running out of free memory.</description>
              <dependencies>
                <dependency>
                  <name>Lack of available memory ( &lt; {$MEMORY.AVAILABLE.MIN} of {ITEM.VALUE2})</name>
                  <expression>{Template Kube Node by Prom API:vm.memory.available[node_exporter].min(5m)}&lt;{$MEMORY.AVAILABLE.MIN} and {Template Kube Node by Prom API:vm.memory.total[node_exporter].last()}>0</expression>
                </dependency>
              </dependencies>
            </trigger>
          </triggers>
        </item>
      </items>
      <discovery_rules>
        <discovery_rule>
          <name>Network interface discovery</name>
          <type>DEPENDENT</type>
          <key>net.if.discovery[node_exporter]</key>
          <delay>0</delay>
          <filter>
            <evaltype>AND</evaltype>
            <conditions>
              <condition>
                <macro>{#IFNAME}</macro>
                <value>{$NET.IF.IFNAME.NOT_MATCHES}</value>
                <operator>NOT_MATCHES_REGEX</operator>
                <formulaid>B</formulaid>
              </condition>
              <condition>
                <macro>{#IFALIAS}</macro>
                <value>{$NET.IF.IFALIAS.NOT_MATCHES}</value>
                <operator>NOT_MATCHES_REGEX</operator>
                <formulaid>A</formulaid>
              </condition>
              <condition>
                <macro>{#IFOPERSTATUS}</macro>
                <value>{$NET.IF.IFOPERSTATUS.NOT_MATCHES}</value>
                <operator>NOT_MATCHES_REGEX</operator>
                <formulaid>C</formulaid>
              </condition>
            </conditions>
          </filter>
          <description>Discovery of network interfaces. Requires node_exporter v0.18 and up.</description>
          <item_prototypes>
            <item_prototype>
              <name>Interface {#IFNAME}({#IFALIAS}): Inbound packets discarded</name>
              <type>DEPENDENT</type>
              <key>net.if.in.discards[node_exporter,"{#IFNAME}"]</key>
              <delay>0</delay>
              <history>7d</history>
              <value_type>FLOAT</value_type>
              <application_prototypes>
                <application_prototype>
                  <name>Interface {#IFNAME}({#IFALIAS})</name>
                </application_prototype>
              </application_prototypes>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[?(@.metric['__name__']=='node_network_receive_drop_total' &amp;&amp; @.metric.device=='{#IFNAME}')].value[1]</params>
                </step>
                <step>
                  <type>JAVASCRIPT</type>
                  <params>return JSON.parse(value).map(Number)</params>
                </step>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
              </preprocessing>
              <master_item>
                <key>node_exporter.get</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>Interface {#IFNAME}({#IFALIAS}): Inbound packets with errors</name>
              <type>DEPENDENT</type>
              <key>net.if.in.errors[node_exporter,"{#IFNAME}"]</key>
              <delay>0</delay>
              <history>7d</history>
              <value_type>FLOAT</value_type>
              <application_prototypes>
                <application_prototype>
                  <name>Interface {#IFNAME}({#IFALIAS})</name>
                </application_prototype>
              </application_prototypes>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[?(@.metric['__name__']=='node_network_receive_errs_total' &amp;&amp; @.metric.device=='{#IFNAME}')].value[1]</params>
                </step>
                <step>
                  <type>JAVASCRIPT</type>
                  <params>return JSON.parse(value).map(Number)</params>
                </step>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
              </preprocessing>
              <master_item>
                <key>node_exporter.get</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>Interface {#IFNAME}({#IFALIAS}): Bits received</name>
              <type>DEPENDENT</type>
              <key>net.if.in[node_exporter,"{#IFNAME}"]</key>
              <delay>0</delay>
              <history>7d</history>
              <value_type>FLOAT</value_type>
              <units>bps</units>
              <application_prototypes>
                <application_prototype>
                  <name>Interface {#IFNAME}({#IFALIAS})</name>
                </application_prototype>
              </application_prototypes>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[?(@.metric['__name__']=='node_network_receive_bytes_total' &amp;&amp; @.metric.device=='{#IFNAME}')].value[1]</params>
                </step>
                <step>
                  <type>JAVASCRIPT</type>
                  <params>return JSON.parse(value).map(Number)</params>
                </step>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
                <step>
                  <type>MULTIPLIER</type>
                  <params>8</params>
                </step>
              </preprocessing>
              <master_item>
                <key>node_exporter.get</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>Interface {#IFNAME}({#IFALIAS}): Outbound packets discarded</name>
              <type>DEPENDENT</type>
              <key>net.if.out.discards[node_exporter,"{#IFNAME}"]</key>
              <delay>0</delay>
              <history>7d</history>
              <value_type>FLOAT</value_type>
              <application_prototypes>
                <application_prototype>
                  <name>Interface {#IFNAME}({#IFALIAS})</name>
                </application_prototype>
              </application_prototypes>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[?(@.metric['__name__']=='node_network_transmit_drop_total' &amp;&amp; @.metric.device=='{#IFNAME}')].value[1]</params>
                </step>
                <step>
                  <type>JAVASCRIPT</type>
                  <params>return JSON.parse(value).map(Number)</params>
                </step>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
              </preprocessing>
              <master_item>
                <key>node_exporter.get</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>Interface {#IFNAME}({#IFALIAS}): Outbound packets with errors</name>
              <type>DEPENDENT</type>
              <key>net.if.out.errors[node_exporter"{#IFNAME}"]</key>
              <delay>0</delay>
              <history>7d</history>
              <value_type>FLOAT</value_type>
              <application_prototypes>
                <application_prototype>
                  <name>Interface {#IFNAME}({#IFALIAS})</name>
                </application_prototype>
              </application_prototypes>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[?(@.metric['__name__']=='node_network_transmit_errs_total' &amp;&amp; @.metric.device=='{#IFNAME}')].value[1]</params>
                </step>
                <step>
                  <type>JAVASCRIPT</type>
                  <params>return JSON.parse(value).map(Number)</params>
                </step>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
              </preprocessing>
              <master_item>
                <key>node_exporter.get</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>Interface {#IFNAME}({#IFALIAS}): Bits sent</name>
              <type>DEPENDENT</type>
              <key>net.if.out[node_exporter,"{#IFNAME}"]</key>
              <delay>0</delay>
              <history>7d</history>
              <value_type>FLOAT</value_type>
              <units>bps</units>
              <application_prototypes>
                <application_prototype>
                  <name>Interface {#IFNAME}({#IFALIAS})</name>
                </application_prototype>
              </application_prototypes>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[?(@.metric['__name__']=='node_network_transmit_bytes_total' &amp;&amp; @.metric.device=='{#IFNAME}')].value[1]</params>
                </step>
                <step>
                  <type>JAVASCRIPT</type>
                  <params>return JSON.parse(value).map(Number)</params>
                </step>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
                <step>
                  <type>MULTIPLIER</type>
                  <params>8</params>
                </step>
              </preprocessing>
              <master_item>
                <key>node_exporter.get</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>Interface {#IFNAME}({#IFALIAS}): Speed</name>
              <type>DEPENDENT</type>
              <key>net.if.speed[node_exporter,"{#IFNAME}"]</key>
              <delay>0</delay>
              <history>7d</history>
              <trends>0</trends>
              <units>bps</units>
              <description>Sets value to 0 if metric is missing in node_exporter output.</description>
              <application_prototypes>
                <application_prototype>
                  <name>Interface {#IFNAME}({#IFALIAS})</name>
                </application_prototype>
              </application_prototypes>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[?(@.metric['__name__']=='node_network_speed_bytes' &amp;&amp; @.metric.device=='{#IFNAME}')].value[1]</params>
                  <error_handler>CUSTOM_VALUE</error_handler>
                  <error_handler_params>["0"]</error_handler_params>
                </step>
                <step>
                  <type>JAVASCRIPT</type>
                  <params>return JSON.parse(value).map(Number)</params>
                </step>
                <step>
                  <type>MULTIPLIER</type>
                  <params>8</params>
                </step>
              </preprocessing>
              <master_item>
                <key>node_exporter.get</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>Interface {#IFNAME}({#IFALIAS}): Operational status</name>
              <type>DEPENDENT</type>
              <key>net.if.status[node_exporter,"{#IFNAME}"]</key>
              <delay>0</delay>
              <history>7d</history>
              <trends>0</trends>
              <description>Indicates the interface RFC2863 operational state as a string. Possible values are:"unknown", "notpresent", "down", "lowerlayerdown", "testing","dormant", "up". Reference: https://www.kernel.org/doc/Documentation/ABI/testing/sysfs-class-net</description>
              <application_prototypes>
                <application_prototype>
                  <name>Interface {#IFNAME}({#IFALIAS})</name>
                </application_prototype>
              </application_prototypes>
              <valuemap>
                <name>IF-MIB::ifOperStatus</name>
              </valuemap>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[?(@.metric['__name__']=='node_network_info' &amp;&amp; @.metric.device=='{#IFNAME}')].metric.operstate</params>
                </step>
                <step>
                  <type>JAVASCRIPT</type>
                  <params>var newvalue; switch(JSON.parse(value)[0]) { case "up": newvalue = 1; break; case "down": newvalue = 2; break; case "testing": newvalue = 4; break; case "unknown": newvalue = 5; break; case "dormant": newvalue = 6; break; case "notPresent": newvalue = 7; break; default: newvalue = "Problem parsing interface operstate in JS"; } return newvalue;</params>
                </step>
              </preprocessing>
              <master_item>
                <key>node_exporter.get</key>
              </master_item>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{$IFCONTROL:"{#IFNAME}"}=1 and ({last()}=2 and {diff()}=1)</expression>
                  <recovery_mode>RECOVERY_EXPRESSION</recovery_mode>
                  <recovery_expression>{last()}&lt;>2</recovery_expression>
                  <name>Interface {#IFNAME}({#IFALIAS}): Link down</name>
                  <opdata>Current state: {ITEM.LASTVALUE1}</opdata>
                  <priority>AVERAGE</priority>
                  <description>This trigger expression works as follows: 1. Can be triggered if operations status is down. 2. {$IFCONTROL:"{#IFNAME}"}=1 - user can redefine Context macro to value - 0. That marks this interface as not important. No new trigger will be fired if this interface is down. 3. {TEMPLATE_NAME:METRIC.diff()}=1) - trigger fires only if operational status was up(1) sometime before. (So, do not fire 'ethernal off' interfaces.) WARNING: if closed manually - won't fire again on next poll, because of .diff.</description>
                  <manual_close>YES</manual_close>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
            <item_prototype>
              <name>Interface {#IFNAME}({#IFALIAS}): Interface type</name>
              <type>DEPENDENT</type>
              <key>net.if.type[node_exporter,"{#IFNAME}"]</key>
              <delay>0</delay>
              <history>7d</history>
              <trends>0</trends>
              <description>node_network_protocol_type protocol_type value of /sys/class/net/&lt;iface>.</description>
              <application_prototypes>
                <application_prototype>
                  <name>Interface {#IFNAME}({#IFALIAS})</name>
                </application_prototype>
              </application_prototypes>
              <valuemap>
                <name>Linux::Interface protocol types</name>
              </valuemap>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[?(@.metric['__name__']=='node_network_protocol_type' &amp;&amp; @.metric.device=='{#IFNAME}')].value[1]</params>
                </step>
                <step>
                  <type>JAVASCRIPT</type>
                  <params>return JSON.parse(value).map(Number)</params>
                </step>
              </preprocessing>
              <master_item>
                <key>node_exporter.get</key>
              </master_item>
            </item_prototype>
          </item_prototypes>
          <trigger_prototypes>
            <trigger_prototype>
              <expression>{Template Kube Node by Prom API:net.if.speed[node_exporter,"{#IFNAME}"].change()}&lt;0 and {Template Kube Node by Prom API:net.if.speed[node_exporter,"{#IFNAME}"].last()}>0 and ( {Template Kube Node by Prom API:net.if.type[node_exporter,"{#IFNAME}"].last()}=6 or {Template Kube Node by Prom API:net.if.type[node_exporter,"{#IFNAME}"].last()}=7 or {Template Kube Node by Prom API:net.if.type[node_exporter,"{#IFNAME}"].last()}=11 or {Template Kube Node by Prom API:net.if.type[node_exporter,"{#IFNAME}"].last()}=62 or {Template Kube Node by Prom API:net.if.type[node_exporter,"{#IFNAME}"].last()}=69 or {Template Kube Node by Prom API:net.if.type[node_exporter,"{#IFNAME}"].last()}=117 ) and ({Template Kube Node by Prom API:net.if.status[node_exporter,"{#IFNAME}"].last()}&lt;>2)</expression>
              <recovery_mode>RECOVERY_EXPRESSION</recovery_mode>
              <recovery_expression>({Template Kube Node by Prom API:net.if.speed[node_exporter,"{#IFNAME}"].change()}>0 and {Template Kube Node by Prom API:net.if.speed[node_exporter,"{#IFNAME}"].prev()}>0) or ({Template Kube Node by Prom API:net.if.status[node_exporter,"{#IFNAME}"].last()}=2)</recovery_expression>
              <name>Interface {#IFNAME}({#IFALIAS}): Ethernet has changed to lower speed than it was before</name>
              <opdata>Current reported speed: {ITEM.LASTVALUE1}</opdata>
              <priority>INFO</priority>
              <description>This Ethernet connection has transitioned down from its known maximum speed. This might be a sign of autonegotiation issues. Ack to close.</description>
              <manual_close>YES</manual_close>
              <dependencies>
                <dependency>
                  <name>Interface {#IFNAME}({#IFALIAS}): Link down</name>
                  <expression>{$IFCONTROL:"{#IFNAME}"}=1 and ({Template Kube Node by Prom API:net.if.status[node_exporter,"{#IFNAME}"].last()}=2 and {Template Kube Node by Prom API:net.if.status[node_exporter,"{#IFNAME}"].diff()}=1)</expression>
                  <recovery_expression>{Template Kube Node by Prom API:net.if.status[node_exporter,"{#IFNAME}"].last()}&lt;>2</recovery_expression>
                </dependency>
              </dependencies>
            </trigger_prototype>
            <trigger_prototype>
              <expression>{Template Kube Node by Prom API:net.if.type[node_exporter,"{#IFNAME}"].change()}&lt;0 and {Template Kube Node by Prom API:net.if.type[node_exporter,"{#IFNAME}"].last()}>0 and ({Template Kube Node by Prom API:net.if.type[node_exporter,"{#IFNAME}"].last()}=6 or {Template Kube Node by Prom API:net.if.type[node_exporter,"{#IFNAME}"].last()}=1) and ({Template Kube Node by Prom API:net.if.status[node_exporter,"{#IFNAME}"].last()}&lt;>2)</expression>
              <recovery_mode>RECOVERY_EXPRESSION</recovery_mode>
              <recovery_expression>({Template Kube Node by Prom API:net.if.type[node_exporter,"{#IFNAME}"].change()}>0 and {Template Kube Node by Prom API:net.if.type[node_exporter,"{#IFNAME}"].prev()}>0) or ({Template Kube Node by Prom API:net.if.status[node_exporter,"{#IFNAME}"].last()}=2)</recovery_expression>
              <name>Interface {#IFNAME}({#IFALIAS}): Ethernet has changed to lower speed than it was before</name>
              <opdata>Current reported speed: {ITEM.LASTVALUE1}</opdata>
              <priority>INFO</priority>
              <description>This Ethernet connection has transitioned down from its known maximum speed. This might be a sign of autonegotiation issues. Ack to close.</description>
              <manual_close>YES</manual_close>
              <dependencies>
                <dependency>
                  <name>Interface {#IFNAME}({#IFALIAS}): Link down</name>
                  <expression>{$IFCONTROL:"{#IFNAME}"}=1 and ({Template Kube Node by Prom API:net.if.status[node_exporter,"{#IFNAME}"].last()}=2 and {Template Kube Node by Prom API:net.if.status[node_exporter,"{#IFNAME}"].diff()}=1)</expression>
                  <recovery_expression>{Template Kube Node by Prom API:net.if.status[node_exporter,"{#IFNAME}"].last()}&lt;>2</recovery_expression>
                </dependency>
              </dependencies>
            </trigger_prototype>
            <trigger_prototype>
              <expression>({Template Kube Node by Prom API:net.if.in[node_exporter,"{#IFNAME}"].avg(15m)}>({$IF.UTIL.MAX:"{#IFNAME}"}/100)*{Template Kube Node by Prom API:net.if.speed[node_exporter,"{#IFNAME}"].last()} or {Template Kube Node by Prom API:net.if.out[node_exporter,"{#IFNAME}"].avg(15m)}>({$IF.UTIL.MAX:"{#IFNAME}"}/100)*{Template Kube Node by Prom API:net.if.speed[node_exporter,"{#IFNAME}"].last()}) and {Template Kube Node by Prom API:net.if.speed[node_exporter,"{#IFNAME}"].last()}>0</expression>
              <recovery_mode>RECOVERY_EXPRESSION</recovery_mode>
              <recovery_expression>{Template Kube Node by Prom API:net.if.in[node_exporter,"{#IFNAME}"].avg(15m)}&lt;(({$IF.UTIL.MAX:"{#IFNAME}"}-3)/100)*{Template Kube Node by Prom API:net.if.speed[node_exporter,"{#IFNAME}"].last()} and {Template Kube Node by Prom API:net.if.out[node_exporter,"{#IFNAME}"].avg(15m)}&lt;(({$IF.UTIL.MAX:"{#IFNAME}"}-3)/100)*{Template Kube Node by Prom API:net.if.speed[node_exporter,"{#IFNAME}"].last()}</recovery_expression>
              <name>Interface {#IFNAME}({#IFALIAS}): High bandwidth usage ( > {$IF.UTIL.MAX:"{#IFNAME}"}% )</name>
              <opdata>In: {ITEM.LASTVALUE1}, out: {ITEM.LASTVALUE3}, speed: {ITEM.LASTVALUE2}</opdata>
              <priority>WARNING</priority>
              <description>The network interface utilization is close to its estimated maximum bandwidth.</description>
              <manual_close>YES</manual_close>
              <dependencies>
                <dependency>
                  <name>Interface {#IFNAME}({#IFALIAS}): Link down</name>
                  <expression>{$IFCONTROL:"{#IFNAME}"}=1 and ({Template Kube Node by Prom API:net.if.status[node_exporter,"{#IFNAME}"].last()}=2 and {Template Kube Node by Prom API:net.if.status[node_exporter,"{#IFNAME}"].diff()}=1)</expression>
                  <recovery_expression>{Template Kube Node by Prom API:net.if.status[node_exporter,"{#IFNAME}"].last()}&lt;>2</recovery_expression>
                </dependency>
              </dependencies>
            </trigger_prototype>
            <trigger_prototype>
              <expression>{Template Kube Node by Prom API:net.if.in.errors[node_exporter,"{#IFNAME}"].min(5m)}>{$IF.ERRORS.WARN:"{#IFNAME}"} or {Template Kube Node by Prom API:net.if.out.errors[node_exporter"{#IFNAME}"].min(5m)}>{$IF.ERRORS.WARN:"{#IFNAME}"}</expression>
              <recovery_mode>RECOVERY_EXPRESSION</recovery_mode>
              <recovery_expression>{Template Kube Node by Prom API:net.if.in.errors[node_exporter,"{#IFNAME}"].max(5m)}&lt;{$IF.ERRORS.WARN:"{#IFNAME}"}*0.8 and {Template Kube Node by Prom API:net.if.out.errors[node_exporter"{#IFNAME}"].max(5m)}&lt;{$IF.ERRORS.WARN:"{#IFNAME}"}*0.8</recovery_expression>
              <name>Interface {#IFNAME}({#IFALIAS}): High error rate ( > {$IF.ERRORS.WARN:"{#IFNAME}"} for 5m)</name>
              <opdata>errors in: {ITEM.LASTVALUE1}, errors out: {ITEM.LASTVALUE2}</opdata>
              <priority>WARNING</priority>
              <description>Recovers when below 80% of {$IF.ERRORS.WARN:"{#IFNAME}"} threshold</description>
              <manual_close>YES</manual_close>
              <dependencies>
                <dependency>
                  <name>Interface {#IFNAME}({#IFALIAS}): Link down</name>
                  <expression>{$IFCONTROL:"{#IFNAME}"}=1 and ({Template Kube Node by Prom API:net.if.status[node_exporter,"{#IFNAME}"].last()}=2 and {Template Kube Node by Prom API:net.if.status[node_exporter,"{#IFNAME}"].diff()}=1)</expression>
                  <recovery_expression>{Template Kube Node by Prom API:net.if.status[node_exporter,"{#IFNAME}"].last()}&lt;>2</recovery_expression>
                </dependency>
              </dependencies>
            </trigger_prototype>
          </trigger_prototypes>
          <graph_prototypes>
            <graph_prototype>
              <name>Interface {#IFNAME}({#IFALIAS}): Network traffic</name>
              <graph_items>
                <graph_item>
                  <drawtype>GRADIENT_LINE</drawtype>
                  <color>1A7C11</color>
                  <item>
                    <host>Template Kube Node by Prom API</host>
                    <key>net.if.in[node_exporter,"{#IFNAME}"]</key>
                  </item>
                </graph_item>
                <graph_item>
                  <sortorder>1</sortorder>
                  <drawtype>BOLD_LINE</drawtype>
                  <color>2774A4</color>
                  <item>
                    <host>Template Kube Node by Prom API</host>
                    <key>net.if.out[node_exporter,"{#IFNAME}"]</key>
                  </item>
                </graph_item>
                <graph_item>
                  <sortorder>2</sortorder>
                  <color>F63100</color>
                  <yaxisside>RIGHT</yaxisside>
                  <item>
                    <host>Template Kube Node by Prom API</host>
                    <key>net.if.out.errors[node_exporter"{#IFNAME}"]</key>
                  </item>
                </graph_item>
                <graph_item>
                  <sortorder>3</sortorder>
                  <color>A54F10</color>
                  <yaxisside>RIGHT</yaxisside>
                  <item>
                    <host>Template Kube Node by Prom API</host>
                    <key>net.if.in.errors[node_exporter,"{#IFNAME}"]</key>
                  </item>
                </graph_item>
                <graph_item>
                  <sortorder>4</sortorder>
                  <color>FC6EA3</color>
                  <yaxisside>RIGHT</yaxisside>
                  <item>
                    <host>Template Kube Node by Prom API</host>
                    <key>net.if.out.discards[node_exporter,"{#IFNAME}"]</key>
                  </item>
                </graph_item>
                <graph_item>
                  <sortorder>5</sortorder>
                  <color>6C59DC</color>
                  <yaxisside>RIGHT</yaxisside>
                  <item>
                    <host>Template Kube Node by Prom API</host>
                    <key>net.if.in.discards[node_exporter,"{#IFNAME}"]</key>
                  </item>
                </graph_item>
              </graph_items>
            </graph_prototype>
          </graph_prototypes>
          <master_item>
            <key>node_exporter.get</key>
          </master_item>
          <lld_macro_paths>
            <lld_macro_path>
              <lld_macro>{#IFALIAS}</lld_macro>
              <path>$.ifalias</path>
            </lld_macro_path>
            <lld_macro_path>
              <lld_macro>{#IFNAME}</lld_macro>
              <path>$.device</path>
            </lld_macro_path>
            <lld_macro_path>
              <lld_macro>{#IFOPERSTATUS}</lld_macro>
              <path>$.operstate</path>
            </lld_macro_path>
          </lld_macro_paths>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.metric['__name__']=='node_network_info' &amp;&amp; @.metric.device=~'{$NET.IF.IFNAME.MATCHES}' &amp;&amp; @.metric.ifalias=~'{$NET.IF.IFALIAS.MATCHES}' &amp;&amp; @.metric.operstate=~'{$NET.IF.IFOPERSTATUS.MATCHES}')].metric</params>
            </step>
            <step>
              <type>JAVASCRIPT</type>
              <params>return JSON.stringify(JSON.parse(value).map( function(metric){if(!("ifalias" in metric)) {metric.ifalias=""} return metric} ))</params>
            </step>
          </preprocessing>
        </discovery_rule>
        <discovery_rule>
          <name>Block devices discovery</name>
          <type>DEPENDENT</type>
          <key>vfs.dev.discovery[node_exporter]</key>
          <delay>0</delay>
          <filter>
            <evaltype>AND</evaltype>
            <conditions>
              <condition>
                <macro>{#DEVNAME}</macro>
                <value>{$VFS.DEV.DEVNAME.NOT_MATCHES}</value>
                <operator>NOT_MATCHES_REGEX</operator>
                <formulaid>A</formulaid>
              </condition>
            </conditions>
          </filter>
          <item_prototypes>
            <item_prototype>
              <name>{#DEVNAME}: Disk average queue size (avgqu-sz)</name>
              <type>DEPENDENT</type>
              <key>vfs.dev.queue_size[node_exporter,"{#DEVNAME}"]</key>
              <delay>0</delay>
              <history>7d</history>
              <value_type>FLOAT</value_type>
              <description>Current average disk queue, the number of requests outstanding on the disk at the time the performance data is collected.</description>
              <application_prototypes>
                <application_prototype>
                  <name>Disk {#DEVNAME}</name>
                </application_prototype>
              </application_prototypes>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[?(@.metric['__name__']=='node_disk_io_time_weighted_seconds_total' &amp;&amp; @.metric.device=='{#DEVNAME}')].value[1]</params>
                </step>
                <step>
                  <type>JAVASCRIPT</type>
                  <params>return JSON.parse(value).map(Number)</params>
                </step>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
              </preprocessing>
              <master_item>
                <key>node_exporter.get</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>{#DEVNAME}: Disk read request avg waiting time (r_await)</name>
              <type>CALCULATED</type>
              <key>vfs.dev.read.await[node_exporter,"{#DEVNAME}"]</key>
              <history>7d</history>
              <value_type>FLOAT</value_type>
              <units>!ms</units>
              <params>(last("vfs.dev.read.time.rate[node_exporter,\"{#DEVNAME}\"]")/(last("vfs.dev.read.rate[node_exporter,\"{#DEVNAME}\"]")+(last("vfs.dev.read.rate[node_exporter,\"{#DEVNAME}\"]")=0)))*1000*(last("vfs.dev.read.rate[node_exporter,\"{#DEVNAME}\"]") > 0)</params>
              <description>This formula contains two boolean expressions that evaluates to 1 or 0 in order to set calculated metric to zero and to avoid division by zero exception.</description>
              <application_prototypes>
                <application_prototype>
                  <name>Disk {#DEVNAME}</name>
                </application_prototype>
              </application_prototypes>
            </item_prototype>
            <item_prototype>
              <name>{#DEVNAME}: Disk read rate</name>
              <type>DEPENDENT</type>
              <key>vfs.dev.read.rate[node_exporter,"{#DEVNAME}"]</key>
              <delay>0</delay>
              <history>7d</history>
              <value_type>FLOAT</value_type>
              <units>!r/s</units>
              <description>r/s. The number (after merges) of read requests completed per second for the device.</description>
              <application_prototypes>
                <application_prototype>
                  <name>Disk {#DEVNAME}</name>
                </application_prototype>
              </application_prototypes>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[?(@.metric['__name__']=='node_disk_reads_completed_total' &amp;&amp; @.metric.device=='{#DEVNAME}')].value[1]</params>
                </step>
                <step>
                  <type>JAVASCRIPT</type>
                  <params>return JSON.parse(value).map(Number)</params>
                </step>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
              </preprocessing>
              <master_item>
                <key>node_exporter.get</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>{#DEVNAME}: Disk read time (rate)</name>
              <type>DEPENDENT</type>
              <key>vfs.dev.read.time.rate[node_exporter,"{#DEVNAME}"]</key>
              <delay>0</delay>
              <history>7d</history>
              <value_type>FLOAT</value_type>
              <description>Rate of total read time counter. Used in r_await calculation</description>
              <application_prototypes>
                <application_prototype>
                  <name>Disk {#DEVNAME}</name>
                </application_prototype>
              </application_prototypes>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[?(@.metric['__name__']=='node_disk_read_time_seconds_total' &amp;&amp; @.metric.device=='{#DEVNAME}')].value[1]</params>
                </step>
                <step>
                  <type>JAVASCRIPT</type>
                  <params>return JSON.parse(value).map(Number)</params>
                </step>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
              </preprocessing>
              <master_item>
                <key>node_exporter.get</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>{#DEVNAME}: Disk utilization</name>
              <type>DEPENDENT</type>
              <key>vfs.dev.util[node_exporter,"{#DEVNAME}"]</key>
              <delay>0</delay>
              <history>7d</history>
              <value_type>FLOAT</value_type>
              <units>%</units>
              <description>This item is the percentage of elapsed time that the selected disk drive was busy servicing read or writes requests.</description>
              <application_prototypes>
                <application_prototype>
                  <name>Disk {#DEVNAME}</name>
                </application_prototype>
              </application_prototypes>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[?(@.metric['__name__']=='node_disk_io_time_seconds_total' &amp;&amp; @.metric.device=='{#DEVNAME}')].value[1]</params>
                </step>
                <step>
                  <type>JAVASCRIPT</type>
                  <params>return JSON.parse(value).map(Number)</params>
                </step>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
                <step>
                  <type>MULTIPLIER</type>
                  <params>100</params>
                </step>
              </preprocessing>
              <master_item>
                <key>node_exporter.get</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>{#DEVNAME}: Disk write request avg waiting time (w_await)</name>
              <type>CALCULATED</type>
              <key>vfs.dev.write.await[node_exporter,"{#DEVNAME}"]</key>
              <history>7d</history>
              <value_type>FLOAT</value_type>
              <units>!ms</units>
              <params>(last("vfs.dev.write.time.rate[node_exporter,\"{#DEVNAME}\"]")/(last("vfs.dev.write.rate[node_exporter,\"{#DEVNAME}\"]")+(last("vfs.dev.write.rate[node_exporter,\"{#DEVNAME}\"]")=0)))*1000*(last("vfs.dev.write.rate[node_exporter,\"{#DEVNAME}\"]") > 0)</params>
              <description>This formula contains two boolean expressions that evaluates to 1 or 0 in order to set calculated metric to zero and to avoid division by zero exception.</description>
              <application_prototypes>
                <application_prototype>
                  <name>Disk {#DEVNAME}</name>
                </application_prototype>
              </application_prototypes>
            </item_prototype>
            <item_prototype>
              <name>{#DEVNAME}: Disk write rate</name>
              <type>DEPENDENT</type>
              <key>vfs.dev.write.rate[node_exporter,"{#DEVNAME}"]</key>
              <delay>0</delay>
              <history>7d</history>
              <value_type>FLOAT</value_type>
              <units>!w/s</units>
              <description>w/s. The number (after merges) of write requests completed per second for the device.</description>
              <application_prototypes>
                <application_prototype>
                  <name>Disk {#DEVNAME}</name>
                </application_prototype>
              </application_prototypes>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[?(@.metric['__name__']=='node_disk_writes_completed_total' &amp;&amp; @.metric.device=='{#DEVNAME}')].value[1]</params>
                </step>
                <step>
                  <type>JAVASCRIPT</type>
                  <params>return JSON.parse(value).map(Number)</params>
                </step>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
              </preprocessing>
              <master_item>
                <key>node_exporter.get</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>{#DEVNAME}: Disk write time (rate)</name>
              <type>DEPENDENT</type>
              <key>vfs.dev.write.time.rate[node_exporter,"{#DEVNAME}"]</key>
              <delay>0</delay>
              <history>7d</history>
              <value_type>FLOAT</value_type>
              <description>Rate of total write time counter. Used in w_await calculation</description>
              <application_prototypes>
                <application_prototype>
                  <name>Disk {#DEVNAME}</name>
                </application_prototype>
              </application_prototypes>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[?(@.metric['__name__']=='node_disk_write_time_seconds_total' &amp;&amp; @.metric.device=='{#DEVNAME}')].value[1]</params>
                </step>
                <step>
                  <type>JAVASCRIPT</type>
                  <params>return JSON.parse(value).map(Number)</params>
                </step>
                <step>
                  <type>CHANGE_PER_SECOND</type>
                  <params></params>
                </step>
              </preprocessing>
              <master_item>
                <key>node_exporter.get</key>
              </master_item>
            </item_prototype>
          </item_prototypes>
          <trigger_prototypes>
            <trigger_prototype>
              <expression>{Template Kube Node by Prom API:vfs.dev.read.await[node_exporter,"{#DEVNAME}"].min(15m)} > {$VFS.DEV.READ.AWAIT.WARN:"{#DEVNAME}"} or {Template Kube Node by Prom API:vfs.dev.write.await[node_exporter,"{#DEVNAME}"].min(15m)} > {$VFS.DEV.WRITE.AWAIT.WARN:"{#DEVNAME}"}</expression>
              <name>{#DEVNAME}: Disk read/write request responses are too high (read > {$VFS.DEV.READ.AWAIT.WARN:"{#DEVNAME}"} ms for 15m or write > {$VFS.DEV.WRITE.AWAIT.WARN:"{#DEVNAME}"} ms for 15m)</name>
              <priority>WARNING</priority>
              <description>This trigger might indicate disk {#DEVNAME} saturation.</description>
              <manual_close>YES</manual_close>
            </trigger_prototype>
          </trigger_prototypes>
          <graph_prototypes>
            <graph_prototype>
              <name>{#DEVNAME}: Disk average waiting time</name>
              <graph_items>
                <graph_item>
                  <color>1A7C11</color>
                  <item>
                    <host>Template Kube Node by Prom API</host>
                    <key>vfs.dev.read.await[node_exporter,"{#DEVNAME}"]</key>
                  </item>
                </graph_item>
                <graph_item>
                  <sortorder>1</sortorder>
                  <drawtype>GRADIENT_LINE</drawtype>
                  <color>2774A4</color>
                  <item>
                    <host>Template Kube Node by Prom API</host>
                    <key>vfs.dev.write.await[node_exporter,"{#DEVNAME}"]</key>
                  </item>
                </graph_item>
              </graph_items>
            </graph_prototype>
            <graph_prototype>
              <name>{#DEVNAME}: Disk read/write rates</name>
              <graph_items>
                <graph_item>
                  <color>1A7C11</color>
                  <item>
                    <host>Template Kube Node by Prom API</host>
                    <key>vfs.dev.read.rate[node_exporter,"{#DEVNAME}"]</key>
                  </item>
                </graph_item>
                <graph_item>
                  <sortorder>1</sortorder>
                  <drawtype>GRADIENT_LINE</drawtype>
                  <color>2774A4</color>
                  <item>
                    <host>Template Kube Node by Prom API</host>
                    <key>vfs.dev.write.rate[node_exporter,"{#DEVNAME}"]</key>
                  </item>
                </graph_item>
              </graph_items>
            </graph_prototype>
            <graph_prototype>
              <name>{#DEVNAME}: Disk utilization and queue</name>
              <graph_items>
                <graph_item>
                  <color>1A7C11</color>
                  <yaxisside>RIGHT</yaxisside>
                  <item>
                    <host>Template Kube Node by Prom API</host>
                    <key>vfs.dev.queue_size[node_exporter,"{#DEVNAME}"]</key>
                  </item>
                </graph_item>
                <graph_item>
                  <sortorder>1</sortorder>
                  <drawtype>GRADIENT_LINE</drawtype>
                  <color>2774A4</color>
                  <item>
                    <host>Template Kube Node by Prom API</host>
                    <key>vfs.dev.util[node_exporter,"{#DEVNAME}"]</key>
                  </item>
                </graph_item>
              </graph_items>
            </graph_prototype>
          </graph_prototypes>
          <master_item>
            <key>node_exporter.get</key>
          </master_item>
          <lld_macro_paths>
            <lld_macro_path>
              <lld_macro>{#DEVNAME}</lld_macro>
              <path>$.device</path>
            </lld_macro_path>
          </lld_macro_paths>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.metric['__name__']=='node_disk_io_now' &amp;&amp; @.metric.device=~'{$VFS.DEV.DEVNAME.MATCHES}')].metric</params>
            </step>
          </preprocessing>
        </discovery_rule>
        <discovery_rule>
          <name>Mounted filesystem discovery</name>
          <type>DEPENDENT</type>
          <key>vfs.fs.discovery[node_exporter]</key>
          <delay>0</delay>
          <filter>
            <evaltype>AND</evaltype>
            <conditions>
              <condition>
                <macro>{#FSTYPE}</macro>
                <value>{$VFS.FS.FSTYPE.NOT_MATCHES}</value>
                <operator>NOT_MATCHES_REGEX</operator>
                <formulaid>C</formulaid>
              </condition>
              <condition>
                <macro>{#FSNAME}</macro>
                <value>{$VFS.FS.FSNAME.NOT_MATCHES}</value>
                <operator>NOT_MATCHES_REGEX</operator>
                <formulaid>B</formulaid>
              </condition>
              <condition>
                <macro>{#FSDEVICE}</macro>
                <value>{$VFS.FS.FSDEVICE.NOT_MATCHES}</value>
                <operator>NOT_MATCHES_REGEX</operator>
                <formulaid>A</formulaid>
              </condition>
            </conditions>
          </filter>
          <description>Discovery of file systems of different types.</description>
          <item_prototypes>
            <item_prototype>
              <name>{#FSNAME}: Free space</name>
              <type>DEPENDENT</type>
              <key>vfs.fs.free[node_exporter,"{#FSNAME}"]</key>
              <delay>0</delay>
              <history>7d</history>
              <value_type>FLOAT</value_type>
              <units>B</units>
              <application_prototypes>
                <application_prototype>
                  <name>Filesystem {#FSNAME}</name>
                </application_prototype>
              </application_prototypes>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[?(@.metric['__name__']=='node_filesystem_avail_bytes' &amp;&amp; @.metric.device=='{#FSDEVICE}' &amp;&amp; @.metric.fstype=='{#FSTYPE}' &amp;&amp; @.metric.mountpoint=='{#FSNAME}')].value[1]</params>
                </step>
                <step>
                  <type>JAVASCRIPT</type>
                  <params>return JSON.parse(value).map(Number)</params>
                </step>
              </preprocessing>
              <master_item>
                <key>node_exporter.get</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>{#FSNAME}: Free inodes in %</name>
              <type>DEPENDENT</type>
              <key>vfs.fs.inode.pfree[node_exporter,"{#FSNAME}"]</key>
              <delay>0</delay>
              <history>7d</history>
              <value_type>FLOAT</value_type>
              <units>%</units>
              <application_prototypes>
                <application_prototype>
                  <name>Filesystem {#FSNAME}</name>
                </application_prototype>
              </application_prototypes>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[?(@.metric['__name__']=~'node_filesystem_files.*' &amp;&amp; @.metric.device=='{#FSDEVICE}' &amp;&amp; @.metric.fstype=='{#FSTYPE}' &amp;&amp; @.metric.mountpoint=='{#FSNAME}')]</params>
                </step>
                <step>
                  <type>JAVASCRIPT</type>
                  <params>//count vfs.fs.inode.pfree var inode_free; var inode_total; JSON.parse(value).forEach(function(value) { if (value.metric['__name__'] == 'node_filesystem_files'){ inode_total = value.value[1]; } else if (value.metric['__name__'] == 'node_filesystem_files_free'){ inode_free = value.value[1]; } }); return (inode_free/inode_total)*100;</params>
                </step>
              </preprocessing>
              <master_item>
                <key>node_exporter.get</key>
              </master_item>
              <trigger_prototypes>
                <trigger_prototype>
                  <expression>{min(5m)}&lt;{$VFS.FS.INODE.PFREE.MIN.CRIT:"{#FSNAME}"}</expression>
                  <name>{#FSNAME}: Running out of free inodes (free &lt; {$VFS.FS.INODE.PFREE.MIN.CRIT:"{#FSNAME}"}%)</name>
                  <opdata>Free inodes: {ITEM.LASTVALUE1}</opdata>
                  <priority>AVERAGE</priority>
                  <description>It may become impossible to write to disk if there are no index nodes left. As symptoms, 'No space left on device' or 'Disk is full' errors may be seen even though free space is available.</description>
                </trigger_prototype>
                <trigger_prototype>
                  <expression>{min(5m)}&lt;{$VFS.FS.INODE.PFREE.MIN.WARN:"{#FSNAME}"}</expression>
                  <name>{#FSNAME}: Running out of free inodes (free &lt; {$VFS.FS.INODE.PFREE.MIN.WARN:"{#FSNAME}"}%)</name>
                  <opdata>Free inodes: {ITEM.LASTVALUE1}</opdata>
                  <priority>WARNING</priority>
                  <description>It may become impossible to write to disk if there are no index nodes left. As symptoms, 'No space left on device' or 'Disk is full' errors may be seen even though free space is available.</description>
                  <dependencies>
                    <dependency>
                      <name>{#FSNAME}: Running out of free inodes (free &lt; {$VFS.FS.INODE.PFREE.MIN.CRIT:"{#FSNAME}"}%)</name>
                      <expression>{Template Kube Node by Prom API:vfs.fs.inode.pfree[node_exporter,"{#FSNAME}"].min(5m)}&lt;{$VFS.FS.INODE.PFREE.MIN.CRIT:"{#FSNAME}"}</expression>
                    </dependency>
                  </dependencies>
                </trigger_prototype>
              </trigger_prototypes>
            </item_prototype>
            <item_prototype>
              <name>{#FSNAME}: Space utilization</name>
              <type>CALCULATED</type>
              <key>vfs.fs.pused[node_exporter,"{#FSNAME}"]</key>
              <history>7d</history>
              <value_type>FLOAT</value_type>
              <units>%</units>
              <params>(last("vfs.fs.used[node_exporter,\"{#FSNAME}\"]")/last("vfs.fs.total[node_exporter,\"{#FSNAME}\"]"))*100</params>
              <description>Space utilization in % for {#FSNAME}</description>
              <application_prototypes>
                <application_prototype>
                  <name>Filesystem {#FSNAME}</name>
                </application_prototype>
              </application_prototypes>
            </item_prototype>
            <item_prototype>
              <name>{#FSNAME}: Total space</name>
              <type>DEPENDENT</type>
              <key>vfs.fs.total[node_exporter,"{#FSNAME}"]</key>
              <delay>0</delay>
              <history>7d</history>
              <value_type>FLOAT</value_type>
              <units>B</units>
              <description>Total space in Bytes</description>
              <application_prototypes>
                <application_prototype>
                  <name>Filesystem {#FSNAME}</name>
                </application_prototype>
              </application_prototypes>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[?(@.metric['__name__']=='node_filesystem_size_bytes' &amp;&amp; @.metric.device=='{#FSDEVICE}' &amp;&amp; @.metric.fstype=='{#FSTYPE}' &amp;&amp; @.metric.mountpoint=='{#FSNAME}')].value[1]</params>
                </step>
                <step>
                  <type>JAVASCRIPT</type>
                  <params>return JSON.parse(value).map(Number)</params>
                </step>
              </preprocessing>
              <master_item>
                <key>node_exporter.get</key>
              </master_item>
            </item_prototype>
            <item_prototype>
              <name>{#FSNAME}: Used space</name>
              <type>CALCULATED</type>
              <key>vfs.fs.used[node_exporter,"{#FSNAME}"]</key>
              <history>7d</history>
              <value_type>FLOAT</value_type>
              <units>B</units>
              <params>(last("vfs.fs.total[node_exporter,\"{#FSNAME}\"]")-last("vfs.fs.free[node_exporter,\"{#FSNAME}\"]"))</params>
              <description>Used storage in Bytes</description>
              <application_prototypes>
                <application_prototype>
                  <name>Filesystem {#FSNAME}</name>
                </application_prototype>
              </application_prototypes>
            </item_prototype>
          </item_prototypes>
          <trigger_prototypes>
            <trigger_prototype>
              <expression>{Template Kube Node by Prom API:vfs.fs.pused[node_exporter,"{#FSNAME}"].last()}>{$VFS.FS.PUSED.MAX.CRIT:"{#FSNAME}"} and (({Template Kube Node by Prom API:vfs.fs.total[node_exporter,"{#FSNAME}"].last()}-{Template Kube Node by Prom API:vfs.fs.used[node_exporter,"{#FSNAME}"].last()})&lt;5G or {Template Kube Node by Prom API:vfs.fs.pused[node_exporter,"{#FSNAME}"].timeleft(1h,,100)}&lt;1d)</expression>
              <name>{#FSNAME}: Disk space is critically low (used > {$VFS.FS.PUSED.MAX.CRIT:"{#FSNAME}"}%)</name>
              <opdata>Space used: {ITEM.LASTVALUE3} of {ITEM.LASTVALUE2} ({ITEM.LASTVALUE1})</opdata>
              <priority>AVERAGE</priority>
              <description>Two conditions should match: First, space utilization should be above {$VFS.FS.PUSED.MAX.CRIT:"{#FSNAME}"}. Second condition should be one of the following: - The disk free space is less than 5G. - The disk will be full in less than 24 hours.</description>
              <manual_close>YES</manual_close>
            </trigger_prototype>
            <trigger_prototype>
              <expression>{Template Kube Node by Prom API:vfs.fs.pused[node_exporter,"{#FSNAME}"].last()}>{$VFS.FS.PUSED.MAX.WARN:"{#FSNAME}"} and (({Template Kube Node by Prom API:vfs.fs.total[node_exporter,"{#FSNAME}"].last()}-{Template Kube Node by Prom API:vfs.fs.used[node_exporter,"{#FSNAME}"].last()})&lt;10G or {Template Kube Node by Prom API:vfs.fs.pused[node_exporter,"{#FSNAME}"].timeleft(1h,,100)}&lt;1d)</expression>
              <name>{#FSNAME}: Disk space is low (used > {$VFS.FS.PUSED.MAX.WARN:"{#FSNAME}"}%)</name>
              <opdata>Space used: {ITEM.LASTVALUE3} of {ITEM.LASTVALUE2} ({ITEM.LASTVALUE1})</opdata>
              <priority>WARNING</priority>
              <description>Two conditions should match: First, space utilization should be above {$VFS.FS.PUSED.MAX.WARN:"{#FSNAME}"}. Second condition should be one of the following: - The disk free space is less than 10G. - The disk will be full in less than 24 hours.</description>
              <manual_close>YES</manual_close>
              <dependencies>
                <dependency>
                  <name>{#FSNAME}: Disk space is critically low (used > {$VFS.FS.PUSED.MAX.CRIT:"{#FSNAME}"}%)</name>
                  <expression>{Template Kube Node by Prom API:vfs.fs.pused[node_exporter,"{#FSNAME}"].last()}>{$VFS.FS.PUSED.MAX.CRIT:"{#FSNAME}"} and (({Template Kube Node by Prom API:vfs.fs.total[node_exporter,"{#FSNAME}"].last()}-{Template Kube Node by Prom API:vfs.fs.used[node_exporter,"{#FSNAME}"].last()})&lt;5G or {Template Kube Node by Prom API:vfs.fs.pused[node_exporter,"{#FSNAME}"].timeleft(1h,,100)}&lt;1d)</expression>
                </dependency>
              </dependencies>
            </trigger_prototype>
          </trigger_prototypes>
          <graph_prototypes>
            <graph_prototype>
              <name>{#FSNAME}: Disk space usage</name>
              <width>600</width>
              <height>340</height>
              <type>PIE</type>
              <show_3d>YES</show_3d>
              <graph_items>
                <graph_item>
                  <color>969696</color>
                  <calc_fnc>LAST</calc_fnc>
                  <type>GRAPH_SUM</type>
                  <item>
                    <host>Template Kube Node by Prom API</host>
                    <key>vfs.fs.total[node_exporter,"{#FSNAME}"]</key>
                  </item>
                </graph_item>
                <graph_item>
                  <sortorder>1</sortorder>
                  <color>C80000</color>
                  <calc_fnc>LAST</calc_fnc>
                  <item>
                    <host>Template Kube Node by Prom API</host>
                    <key>vfs.fs.used[node_exporter,"{#FSNAME}"]</key>
                  </item>
                </graph_item>
              </graph_items>
            </graph_prototype>
          </graph_prototypes>
          <master_item>
            <key>node_exporter.get</key>
          </master_item>
          <lld_macro_paths>
            <lld_macro_path>
              <lld_macro>{#FSDEVICE}</lld_macro>
              <path>$.device</path>
            </lld_macro_path>
            <lld_macro_path>
              <lld_macro>{#FSNAME}</lld_macro>
              <path>$.mountpoint</path>
            </lld_macro_path>
            <lld_macro_path>
              <lld_macro>{#FSTYPE}</lld_macro>
              <path>$.fstype</path>
            </lld_macro_path>
          </lld_macro_paths>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$[?(@.metric['__name__']=='node_filesystem_size_bytes' &amp;&amp; @.metric.device=~'{$VFS.FS.FSDEVICE.MATCHES}' &amp;&amp; @.metric.fstype=~'{$VFS.FS.FSTYPE.MATCHES}' &amp;&amp; @.metric.mountpoint=~'{$VFS.FS.FSNAME.MATCHES}')].metric</params>
            </step>
          </preprocessing>
        </discovery_rule>
      </discovery_rules>
      <macros>
        <macro>
          <macro>{$CPU.UTIL.CRIT}</macro>
          <value>90</value>
        </macro>
        <macro>
          <macro>{$IF.ERRORS.WARN}</macro>
          <value>2</value>
        </macro>
        <macro>
          <macro>{$IF.UTIL.MAX}</macro>
          <value>90</value>
        </macro>
        <macro>
          <macro>{$IFCONTROL}</macro>
          <value>1</value>
        </macro>
        <macro>
          <macro>{$KERNEL.MAXFILES.MIN}</macro>
          <value>256</value>
        </macro>
        <macro>
          <macro>{$LOAD_AVG_PER_CPU.MAX.WARN}</macro>
          <value>1.5</value>
          <description>Load per CPU considered sustainable. Tune if needed.</description>
        </macro>
        <macro>
          <macro>{$MEMORY.AVAILABLE.MIN}</macro>
          <value>20M</value>
        </macro>
        <macro>
          <macro>{$MEMORY.UTIL.MAX}</macro>
          <value>90</value>
        </macro>
        <macro>
          <macro>{$NET.IF.IFALIAS.MATCHES}</macro>
          <value>^.*$</value>
        </macro>
        <macro>
          <macro>{$NET.IF.IFALIAS.NOT_MATCHES}</macro>
          <value>CHANGE_IF_NEEDED</value>
        </macro>
        <macro>
          <macro>{$NET.IF.IFNAME.MATCHES}</macro>
          <value>^.*$</value>
        </macro>
        <macro>
          <macro>{$NET.IF.IFNAME.NOT_MATCHES}</macro>
          <value>(^Software Loopback Interface|^NULL[0-9.]*$|^[Ll]o[0-9.]*$|^[Ss]ystem$|^Nu[0-9.]*$|^veth[0-9a-z]+$|docker[0-9]+|br-[a-z0-9]{12})</value>
          <description>Filter out loopbacks, nulls, docker veth links and docker0 bridge by default</description>
        </macro>
        <macro>
          <macro>{$NET.IF.IFOPERSTATUS.MATCHES}</macro>
          <value>^.*$</value>
        </macro>
        <macro>
          <macro>{$NET.IF.IFOPERSTATUS.NOT_MATCHES}</macro>
          <value>^7$</value>
          <description>Ignore notPresent(7)</description>
        </macro>
        <macro>
          <macro>{$NODE_EXPORTER_PORT}</macro>
          <value>9100</value>
          <description>TCP Port node_exporter is listening on.</description>
        </macro>
        <macro>
          <macro>{$PROM.API.URL}</macro>
        </macro>
        <macro>
          <macro>{$SWAP.PFREE.MIN.WARN}</macro>
          <value>50</value>
        </macro>
        <macro>
          <macro>{$SYSTEM.FUZZYTIME.MAX}</macro>
          <value>60</value>
        </macro>
        <macro>
          <macro>{$VFS.DEV.DEVNAME.MATCHES}</macro>
          <value>.+</value>
          <description>This macro is used in block devices discovery. Can be overridden on the host or linked template level</description>
        </macro>
        <macro>
          <macro>{$VFS.DEV.DEVNAME.NOT_MATCHES}</macro>
          <value>^(loop[0-9]*|sd[a-z][0-9]+|nbd[0-9]+|sr[0-9]+|fd[0-9]+|dm-[0-9]+|ram[0-9]+|ploop[a-z0-9]+|md[0-9]*|hcp[0-9]*|zram[0-9]*)</value>
          <description>This macro is used in block devices discovery. Can be overridden on the host or linked template level</description>
        </macro>
        <macro>
          <macro>{$VFS.DEV.READ.AWAIT.WARN}</macro>
          <value>20</value>
          <description>Disk read average response time (in ms) before the trigger would fire</description>
        </macro>
        <macro>
          <macro>{$VFS.DEV.WRITE.AWAIT.WARN}</macro>
          <value>20</value>
          <description>Disk write average response time (in ms) before the trigger would fire</description>
        </macro>
        <macro>
          <macro>{$VFS.FS.FSDEVICE.MATCHES}</macro>
          <value>^.+$</value>
          <description>This macro is used in filesystems discovery. Can be overridden on the host or linked template level</description>
        </macro>
        <macro>
          <macro>{$VFS.FS.FSDEVICE.NOT_MATCHES}</macro>
          <value>^\s$</value>
          <description>This macro is used in filesystems discovery. Can be overridden on the host or linked template level</description>
        </macro>
        <macro>
          <macro>{$VFS.FS.FSNAME.MATCHES}</macro>
          <value>.+</value>
          <description>This macro is used in filesystems discovery. Can be overridden on the host or linked template level</description>
        </macro>
        <macro>
          <macro>{$VFS.FS.FSNAME.NOT_MATCHES}</macro>
          <value>^(/dev|/sys|/run|/proc|.+/shm$)</value>
          <description>This macro is used in filesystems discovery. Can be overridden on the host or linked template level</description>
        </macro>
        <macro>
          <macro>{$VFS.FS.FSTYPE.MATCHES}</macro>
          <value>^(btrfs|ext2|ext3|ext4|reiser|xfs|ffs|ufs|jfs|jfs2|vxfs|hfs|apfs|refs|ntfs|fat32|zfs)$</value>
          <description>This macro is used in filesystems discovery. Can be overridden on the host or linked template level</description>
        </macro>
        <macro>
          <macro>{$VFS.FS.FSTYPE.NOT_MATCHES}</macro>
          <value>^\s$</value>
          <description>This macro is used in filesystems discovery. Can be overridden on the host or linked template level</description>
        </macro>
        <macro>
          <macro>{$VFS.FS.INODE.PFREE.MIN.CRIT}</macro>
          <value>10</value>
        </macro>
        <macro>
          <macro>{$VFS.FS.INODE.PFREE.MIN.WARN}</macro>
          <value>20</value>
        </macro>
        <macro>
          <macro>{$VFS.FS.PUSED.MAX.CRIT}</macro>
          <value>90</value>
        </macro>
        <macro>
          <macro>{$VFS.FS.PUSED.MAX.WARN}</macro>
          <value>80</value>
        </macro>
      </macros>
      <screens>
        <screen>
          <name>Network interfaces</name>
          <hsize>1</hsize>
          <vsize>1</vsize>
          <screen_items>
            <screen_item>
              <resourcetype>20</resourcetype>
              <style>0</style>
              <resource>
                <name>Interface {#IFNAME}({#IFALIAS}): Network traffic</name>
                <host>Template Kube Node by Prom API</host>
              </resource>
              <width>750</width>
              <height>100</height>
              <x>0</x>
              <y>0</y>
              <colspan>1</colspan>
              <rowspan>1</rowspan>
              <elements>25</elements>
              <valign>0</valign>
              <halign>0</halign>
              <dynamic>0</dynamic>
              <sort_triggers>0</sort_triggers>
              <url></url>
              <application></application>
              <max_columns>3</max_columns>
            </screen_item>
          </screen_items>
        </screen>
        <screen>
          <name>System performance</name>
          <hsize>2</hsize>
          <vsize>7</vsize>
          <screen_items>
            <screen_item>
              <resourcetype>0</resourcetype>
              <style>0</style>
              <resource>
                <name>System load</name>
                <host>Template Kube Node by Prom API</host>
              </resource>
              <width>750</width>
              <height>100</height>
              <x>0</x>
              <y>0</y>
              <colspan>1</colspan>
              <rowspan>1</rowspan>
              <elements>25</elements>
              <valign>0</valign>
              <halign>0</halign>
              <dynamic>0</dynamic>
              <sort_triggers>0</sort_triggers>
              <url></url>
              <application></application>
              <max_columns>3</max_columns>
            </screen_item>
            <screen_item>
              <resourcetype>0</resourcetype>
              <style>0</style>
              <resource>
                <name>CPU usage</name>
                <host>Template Kube Node by Prom API</host>
              </resource>
              <width>750</width>
              <height>100</height>
              <x>1</x>
              <y>0</y>
              <colspan>1</colspan>
              <rowspan>1</rowspan>
              <elements>25</elements>
              <valign>0</valign>
              <halign>0</halign>
              <dynamic>0</dynamic>
              <sort_triggers>0</sort_triggers>
              <url></url>
              <application></application>
              <max_columns>3</max_columns>
            </screen_item>
            <screen_item>
              <resourcetype>0</resourcetype>
              <style>0</style>
              <resource>
                <name>Memory usage</name>
                <host>Template Kube Node by Prom API</host>
              </resource>
              <width>750</width>
              <height>100</height>
              <x>0</x>
              <y>1</y>
              <colspan>1</colspan>
              <rowspan>1</rowspan>
              <elements>25</elements>
              <valign>0</valign>
              <halign>0</halign>
              <dynamic>0</dynamic>
              <sort_triggers>0</sort_triggers>
              <url></url>
              <application></application>
              <max_columns>3</max_columns>
            </screen_item>
            <screen_item>
              <resourcetype>0</resourcetype>
              <style>0</style>
              <resource>
                <name>Swap usage</name>
                <host>Template Kube Node by Prom API</host>
              </resource>
              <width>750</width>
              <height>100</height>
              <x>1</x>
              <y>1</y>
              <colspan>1</colspan>
              <rowspan>1</rowspan>
              <elements>25</elements>
              <valign>0</valign>
              <halign>0</halign>
              <dynamic>0</dynamic>
              <sort_triggers>0</sort_triggers>
              <url></url>
              <application></application>
              <max_columns>3</max_columns>
            </screen_item>
            <screen_item>
              <resourcetype>20</resourcetype>
              <style>0</style>
              <resource>
                <name>{#FSNAME}: Disk space usage</name>
                <host>Template Kube Node by Prom API</host>
              </resource>
              <width>750</width>
              <height>100</height>
              <x>0</x>
              <y>2</y>
              <colspan>2</colspan>
              <rowspan>1</rowspan>
              <elements>25</elements>
              <valign>0</valign>
              <halign>0</halign>
              <dynamic>0</dynamic>
              <sort_triggers>0</sort_triggers>
              <url></url>
              <application></application>
              <max_columns>3</max_columns>
            </screen_item>
            <screen_item>
              <resourcetype>20</resourcetype>
              <style>0</style>
              <resource>
                <name>{#DEVNAME}: Disk read/write rates</name>
                <host>Template Kube Node by Prom API</host>
              </resource>
              <width>750</width>
              <height>100</height>
              <x>0</x>
              <y>3</y>
              <colspan>2</colspan>
              <rowspan>1</rowspan>
              <elements>25</elements>
              <valign>0</valign>
              <halign>0</halign>
              <dynamic>0</dynamic>
              <sort_triggers>0</sort_triggers>
              <url></url>
              <application></application>
              <max_columns>3</max_columns>
            </screen_item>
            <screen_item>
              <resourcetype>20</resourcetype>
              <style>0</style>
              <resource>
                <name>{#DEVNAME}: Disk average waiting time</name>
                <host>Template Kube Node by Prom API</host>
              </resource>
              <width>750</width>
              <height>100</height>
              <x>0</x>
              <y>4</y>
              <colspan>2</colspan>
              <rowspan>1</rowspan>
              <elements>25</elements>
              <valign>0</valign>
              <halign>0</halign>
              <dynamic>0</dynamic>
              <sort_triggers>0</sort_triggers>
              <url></url>
              <application></application>
              <max_columns>3</max_columns>
            </screen_item>
            <screen_item>
              <resourcetype>20</resourcetype>
              <style>0</style>
              <resource>
                <name>{#DEVNAME}: Disk utilization and queue</name>
                <host>Template Kube Node by Prom API</host>
              </resource>
              <width>750</width>
              <height>100</height>
              <x>0</x>
              <y>5</y>
              <colspan>2</colspan>
              <rowspan>1</rowspan>
              <elements>25</elements>
              <valign>0</valign>
              <halign>0</halign>
              <dynamic>0</dynamic>
              <sort_triggers>0</sort_triggers>
              <url></url>
              <application></application>
              <max_columns>3</max_columns>
            </screen_item>
            <screen_item>
              <resourcetype>20</resourcetype>
              <style>0</style>
              <resource>
                <name>Interface {#IFNAME}({#IFALIAS}): Network traffic</name>
                <host>Template Kube Node by Prom API</host>
              </resource>
              <width>750</width>
              <height>100</height>
              <x>0</x>
              <y>6</y>
              <colspan>2</colspan>
              <rowspan>1</rowspan>
              <elements>25</elements>
              <valign>0</valign>
              <halign>0</halign>
              <dynamic>0</dynamic>
              <sort_triggers>0</sort_triggers>
              <url></url>
              <application></application>
              <max_columns>3</max_columns>
            </screen_item>
          </screen_items>
        </screen>
      </screens>
    </template>
    <template>
      <template>Template Kube Pod by Prom API</template>
      <name>Template Kube Pod by Prom API</name>
      <groups>
        <group>
          <name>Templates</name>
        </group>
        <group>
          <name>Templates/Kubernetes</name>
        </group>
      </groups>
      <applications>
        <application>
          <name>CPU</name>
        </application>
        <application>
          <name>General</name>
        </application>
        <application>
          <name>Inventory</name>
        </application>
        <application>
          <name>Memory</name>
        </application>
        <application>
          <name>Monitoring</name>
        </application>
        <application>
          <name>Network</name>
        </application>
        <application>
          <name>Spec</name>
        </application>
        <application>
          <name>Status</name>
        </application>
        <application>
          <name>Storage</name>
        </application>
        <application>
          <name>_New Metrics</name>
        </application>
        <application>
          <name>_Raw items</name>
        </application>
      </applications>
      <items>
        <item>
          <name>Metrics cpu</name>
          <type>HTTP_AGENT</type>
          <key>prom.pod.metrics[cpu]</key>
          <delay>30s</delay>
          <history>0</history>
          <trends>0</trends>
          <value_type>TEXT</value_type>
          <applications>
            <application>
              <name>_Raw items</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$.data.result</params>
            </step>
          </preprocessing>
          <url>{$PROM.API.URL}/query</url>
          <query_fields>
            <query_field>
              <name>query</name>
              <value>sum({__name__=~"^container_cpu_.*$",pod="{HOST.NAME}",container!="POD",container!=""}) by (__name__,container)</value>
            </query_field>
          </query_fields>
        </item>
        <item>
          <name>Metrics cpu_usage</name>
          <type>HTTP_AGENT</type>
          <key>prom.pod.metrics[cpu_usage]</key>
          <delay>30s</delay>
          <history>0</history>
          <trends>0</trends>
          <value_type>TEXT</value_type>
          <applications>
            <application>
              <name>_Raw items</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$.data.result</params>
            </step>
          </preprocessing>
          <url>{$PROM.API.URL}/query</url>
          <query_fields>
            <query_field>
              <name>query</name>
              <value>sum({__name__="node_namespace_pod_container:container_cpu_usage_seconds_total:sum_rate",pod="{HOST.NAME}",container!="POD"}) by (__name__,container)</value>
            </query_field>
          </query_fields>
        </item>
        <item>
          <name>Metrics memory</name>
          <type>HTTP_AGENT</type>
          <key>prom.pod.metrics[memory]</key>
          <history>0</history>
          <trends>0</trends>
          <value_type>TEXT</value_type>
          <applications>
            <application>
              <name>_Raw items</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$.data.result</params>
            </step>
          </preprocessing>
          <url>{$PROM.API.URL}/query</url>
          <query_fields>
            <query_field>
              <name>query</name>
              <value>sum({__name__=~"^container_memory_.*$",pod="{HOST.NAME}",container!="POD",container!=""}) by (__name__,container)</value>
            </query_field>
          </query_fields>
        </item>
        <item>
          <name>Metrics monitoring</name>
          <type>HTTP_AGENT</type>
          <key>prom.pod.metrics[monitoring]</key>
          <history>0</history>
          <trends>0</trends>
          <value_type>TEXT</value_type>
          <applications>
            <application>
              <name>_Raw items</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$.data.result</params>
            </step>
          </preprocessing>
          <url>{$PROM.API.URL}/query</url>
          <query_fields>
            <query_field>
              <name>query</name>
              <value>sum({__name__=~"^prober_.*$",pod="{HOST.NAME}",container!="POD",container!=""}) by(__name__,container,probe_type,result)</value>
            </query_field>
          </query_fields>
        </item>
        <item>
          <name>Metrics network</name>
          <type>HTTP_AGENT</type>
          <key>prom.pod.metrics[network]</key>
          <history>0</history>
          <trends>0</trends>
          <value_type>TEXT</value_type>
          <applications>
            <application>
              <name>_Raw items</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$.data.result</params>
            </step>
          </preprocessing>
          <url>{$PROM.API.URL}/query</url>
          <query_fields>
            <query_field>
              <name>query</name>
              <value>sum({__name__=~"^container_network_.*$",pod="{HOST.NAME}",container="POD"}) by (__name__,interface)</value>
            </query_field>
          </query_fields>
        </item>
        <item>
          <name>_New Metrics</name>
          <type>HTTP_AGENT</type>
          <key>prom.pod.metrics[new]</key>
          <delay>5s</delay>
          <history>1h</history>
          <trends>0</trends>
          <status>DISABLED</status>
          <value_type>TEXT</value_type>
          <applications>
            <application>
              <name>_Raw items</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$.data.result</params>
            </step>
          </preprocessing>
          <url>{$PROM.API.URL}/query</url>
          <query_fields>
            <query_field>
              <name>query</name>
              <value>{pod="{HOST.NAME}",container!="POD",container!=""}</value>
            </query_field>
          </query_fields>
        </item>
        <item>
          <name>Metrics spec</name>
          <type>HTTP_AGENT</type>
          <key>prom.pod.metrics[spec]</key>
          <history>0</history>
          <trends>0</trends>
          <value_type>TEXT</value_type>
          <applications>
            <application>
              <name>_Raw items</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$.data.result</params>
            </step>
          </preprocessing>
          <url>{$PROM.API.URL}/query</url>
          <query_fields>
            <query_field>
              <name>query</name>
              <value>sum({__name__=~"^container_spec_.*$",pod="{HOST.NAME}",container!="POD",container!=""}) by (__name__,container)</value>
            </query_field>
          </query_fields>
        </item>
        <item>
          <name>Metrics storage_fs</name>
          <type>HTTP_AGENT</type>
          <key>prom.pod.metrics[storage,fs]</key>
          <history>0</history>
          <trends>0</trends>
          <value_type>TEXT</value_type>
          <applications>
            <application>
              <name>_Raw items</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$.data.result</params>
            </step>
          </preprocessing>
          <url>{$PROM.API.URL}/query</url>
          <query_fields>
            <query_field>
              <name>query</name>
              <value>sum({__name__=~"^container_fs_.*$",pod="{HOST.NAME}",container!="POD",container!=""}) by (__name__,container,device)</value>
            </query_field>
          </query_fields>
        </item>
        <item>
          <name>Metrics storage</name>
          <type>HTTP_AGENT</type>
          <key>prom.pod.metrics[storage]</key>
          <history>0</history>
          <trends>0</trends>
          <value_type>TEXT</value_type>
          <applications>
            <application>
              <name>_Raw items</name>
            </application>
          </applications>
          <preprocessing>
            <step>
              <type>JSONPATH</type>
              <params>$.data.result</params>
            </step>
          </preprocessing>
          <url>{$PROM.API.URL}/query</url>
          <query_fields>
            <query_field>
              <name>query</name>
              <value>sum({__name__=~"^.*container_(file|ulimits|log)_.*$",pod="{HOST.NAME}",container!="POD",container!=""}) by (__name__,container)</value>
            </query_field>
          </query_fields>
        </item>
      </items>
      <discovery_rules>
        <discovery_rule>
          <name>Discovery cpu</name>
          <type>DEPENDENT</type>
          <key>prom.pod.discovery[cpu]</key>
          <delay>0</delay>
          <item_prototypes>
            <item_prototype>
              <name>{#CONTAINER} - {#METRIC}</name>
              <type>DEPENDENT</type>
              <key>prom.pod.metrics[cpu,{#CONTAINER},{#METRIC}]</key>
              <delay>0</delay>
              <value_type>FLOAT</value_type>
              <applications>
                <application>
                  <name>CPU</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[?(@.metric['__name__']=='{#METRIC}' &amp;&amp; @.metric.container=='{#CONTAINER}')].value[1]</params>
                </step>
                <step>
                  <type>JAVASCRIPT</type>
                  <params>return JSON.parse(value).map(Number);</params>
                </step>
              </preprocessing>
              <master_item>
                <key>prom.pod.metrics[cpu]</key>
              </master_item>
            </item_prototype>
          </item_prototypes>
          <graph_prototypes>
            <graph_prototype>
              <name>{#CONTAINER} - {#METRIC}</name>
              <graph_items>
                <graph_item>
                  <color>1A7C11</color>
                  <calc_fnc>ALL</calc_fnc>
                  <item>
                    <host>Template Kube Pod by Prom API</host>
                    <key>prom.pod.metrics[cpu,{#CONTAINER},{#METRIC}]</key>
                  </item>
                </graph_item>
              </graph_items>
            </graph_prototype>
          </graph_prototypes>
          <master_item>
            <key>prom.pod.metrics[cpu]</key>
          </master_item>
          <lld_macro_paths>
            <lld_macro_path>
              <lld_macro>{#METRIC}</lld_macro>
              <path>$.metric['__name__']</path>
            </lld_macro_path>
            <lld_macro_path>
              <lld_macro>{#CONTAINER}</lld_macro>
              <path>$.metric.container</path>
            </lld_macro_path>
          </lld_macro_paths>
        </discovery_rule>
        <discovery_rule>
          <name>Discovery cpu_usage</name>
          <type>DEPENDENT</type>
          <key>prom.pod.discovery[cpu_usage]</key>
          <delay>0</delay>
          <item_prototypes>
            <item_prototype>
              <name>{#CONTAINER} - container_cpu_usage_seconds_total</name>
              <type>DEPENDENT</type>
              <key>prom.pod.metrics[cpu_usage,{#CONTAINER},container_cpu_usage_seconds_total]</key>
              <delay>0</delay>
              <value_type>FLOAT</value_type>
              <applications>
                <application>
                  <name>CPU</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[?(@.metric['__name__']=='{#METRIC}' &amp;&amp; @.metric.container=='{#CONTAINER}')].value[1]</params>
                </step>
                <step>
                  <type>JAVASCRIPT</type>
                  <params>return JSON.parse(value).map(Number);</params>
                </step>
              </preprocessing>
              <master_item>
                <key>prom.pod.metrics[cpu_usage]</key>
              </master_item>
            </item_prototype>
          </item_prototypes>
          <graph_prototypes>
            <graph_prototype>
              <name>{#CONTAINER} - container_cpu_usage_seconds_total</name>
              <graph_items>
                <graph_item>
                  <color>1A7C11</color>
                  <item>
                    <host>Template Kube Pod by Prom API</host>
                    <key>prom.pod.metrics[cpu_usage,{#CONTAINER},container_cpu_usage_seconds_total]</key>
                  </item>
                </graph_item>
              </graph_items>
            </graph_prototype>
          </graph_prototypes>
          <master_item>
            <key>prom.pod.metrics[cpu_usage]</key>
          </master_item>
          <lld_macro_paths>
            <lld_macro_path>
              <lld_macro>{#CONTAINER}</lld_macro>
              <path>$.metric.container</path>
            </lld_macro_path>
            <lld_macro_path>
              <lld_macro>{#METRIC}</lld_macro>
              <path>$.metric['__name__']</path>
            </lld_macro_path>
          </lld_macro_paths>
        </discovery_rule>
        <discovery_rule>
          <name>Discovery memory</name>
          <type>DEPENDENT</type>
          <key>prom.pod.discovery[memory]</key>
          <delay>0</delay>
          <item_prototypes>
            <item_prototype>
              <name>{#CONTAINER} - {#METRIC}</name>
              <type>DEPENDENT</type>
              <key>prom.pod.metrics[memory,{#CONTAINER},{#METRIC}]</key>
              <delay>0</delay>
              <value_type>FLOAT</value_type>
              <applications>
                <application>
                  <name>Memory</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[?(@.metric['__name__']=='{#METRIC}' &amp;&amp; @.metric.container=='{#CONTAINER}')].value[1]</params>
                </step>
                <step>
                  <type>JAVASCRIPT</type>
                  <params>return JSON.parse(value).map(Number);</params>
                </step>
              </preprocessing>
              <master_item>
                <key>prom.pod.metrics[memory]</key>
              </master_item>
            </item_prototype>
          </item_prototypes>
          <master_item>
            <key>prom.pod.metrics[memory]</key>
          </master_item>
          <lld_macro_paths>
            <lld_macro_path>
              <lld_macro>{#METRIC}</lld_macro>
              <path>$.metric['__name__']</path>
            </lld_macro_path>
            <lld_macro_path>
              <lld_macro>{#CONTAINER}</lld_macro>
              <path>$.metric.container</path>
            </lld_macro_path>
          </lld_macro_paths>
        </discovery_rule>
        <discovery_rule>
          <name>Discovery monitoring</name>
          <type>DEPENDENT</type>
          <key>prom.pod.discovery[monitoring]</key>
          <delay>0</delay>
          <item_prototypes>
            <item_prototype>
              <name>{#METRIC} ({#TYPE},{#RESULT})</name>
              <type>DEPENDENT</type>
              <key>prom.pod.metrics[monitoring,{#METRIC},{#TYPE},{#RESULT}]</key>
              <delay>0</delay>
              <value_type>FLOAT</value_type>
              <applications>
                <application>
                  <name>Monitoring</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[?(@.metric['__name__']=='{#METRIC}' &amp;&amp; @.metric.probe_type=='{#TYPE}' &amp;&amp; @.metric.result=='{#RESULT}')].value[1]</params>
                </step>
                <step>
                  <type>JAVASCRIPT</type>
                  <params>return JSON.parse(value).map(Number);</params>
                </step>
              </preprocessing>
              <master_item>
                <key>prom.pod.metrics[monitoring]</key>
              </master_item>
            </item_prototype>
          </item_prototypes>
          <master_item>
            <key>prom.pod.metrics[monitoring]</key>
          </master_item>
          <lld_macro_paths>
            <lld_macro_path>
              <lld_macro>{#METRIC}</lld_macro>
              <path>$.metric['__name__']</path>
            </lld_macro_path>
            <lld_macro_path>
              <lld_macro>{#RESULT}</lld_macro>
              <path>$.metric.result</path>
            </lld_macro_path>
            <lld_macro_path>
              <lld_macro>{#TYPE}</lld_macro>
              <path>$.metric.probe_type</path>
            </lld_macro_path>
          </lld_macro_paths>
        </discovery_rule>
        <discovery_rule>
          <name>Discovery network</name>
          <type>DEPENDENT</type>
          <key>prom.pod.discovery[network]</key>
          <delay>0</delay>
          <item_prototypes>
            <item_prototype>
              <name>Network {#IFNAME}: {#METRIC}</name>
              <type>DEPENDENT</type>
              <key>prom.pod.metrics[network,{#METRIC},{#IFNAME}]</key>
              <delay>0</delay>
              <value_type>FLOAT</value_type>
              <application_prototypes>
                <application_prototype>
                  <name>Network {#IFNAME}</name>
                </application_prototype>
              </application_prototypes>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[?(@.metric['__name__']=='{#METRIC}' &amp;&amp; @.metric.interface=='{#IFNAME}')].value[1]</params>
                </step>
                <step>
                  <type>JAVASCRIPT</type>
                  <params>return JSON.parse(value).map(Number);</params>
                </step>
              </preprocessing>
              <master_item>
                <key>prom.pod.metrics[network]</key>
              </master_item>
            </item_prototype>
          </item_prototypes>
          <master_item>
            <key>prom.pod.metrics[network]</key>
          </master_item>
          <lld_macro_paths>
            <lld_macro_path>
              <lld_macro>{#IFNAME}</lld_macro>
              <path>$.metric.interface</path>
            </lld_macro_path>
            <lld_macro_path>
              <lld_macro>{#METRIC}</lld_macro>
              <path>$.metric['__name__']</path>
            </lld_macro_path>
          </lld_macro_paths>
        </discovery_rule>
        <discovery_rule>
          <name>_New Discovery</name>
          <type>DEPENDENT</type>
          <key>prom.pod.discovery[new]</key>
          <delay>0</delay>
          <status>DISABLED</status>
          <filter>
            <evaltype>AND</evaltype>
            <conditions>
              <condition>
                <macro>{#METRIC}</macro>
                <value>^container_cpu_.*$</value>
                <operator>NOT_MATCHES_REGEX</operator>
                <formulaid>A</formulaid>
              </condition>
              <condition>
                <macro>{#METRIC}</macro>
                <value>^container_memory_.*$</value>
                <operator>NOT_MATCHES_REGEX</operator>
                <formulaid>B</formulaid>
              </condition>
              <condition>
                <macro>{#METRIC}</macro>
                <value>^prober_.*$</value>
                <operator>NOT_MATCHES_REGEX</operator>
                <formulaid>C</formulaid>
              </condition>
              <condition>
                <macro>{#METRIC}</macro>
                <value>^container_spec_.*$</value>
                <operator>NOT_MATCHES_REGEX</operator>
                <formulaid>D</formulaid>
              </condition>
              <condition>
                <macro>{#METRIC}</macro>
                <value>^.*container_(file|ulimits|log)_.*$</value>
                <operator>NOT_MATCHES_REGEX</operator>
                <formulaid>E</formulaid>
              </condition>
              <condition>
                <macro>{#METRIC}</macro>
                <value>^container_fs_.*$</value>
                <operator>NOT_MATCHES_REGEX</operator>
                <formulaid>F</formulaid>
              </condition>
              <condition>
                <macro>{#METRIC}</macro>
                <value>^kube_pod_.*$</value>
                <operator>NOT_MATCHES_REGEX</operator>
                <formulaid>G</formulaid>
              </condition>
            </conditions>
          </filter>
          <item_prototypes>
            <item_prototype>
              <name>{#CONTAINER} - {#METRIC}</name>
              <type>DEPENDENT</type>
              <key>prom.pod.metrics[new,{#CONTAINER},{#METRIC}]</key>
              <delay>0</delay>
              <value_type>FLOAT</value_type>
              <applications>
                <application>
                  <name>_New Metrics</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[?(@.metric['__name__']=='{#METRIC}' &amp;&amp; @.metric.container=='{#CONTAINER}')].value[1]</params>
                </step>
                <step>
                  <type>JAVASCRIPT</type>
                  <params>return JSON.parse(value).map(Number);</params>
                </step>
              </preprocessing>
              <master_item>
                <key>prom.pod.metrics[new]</key>
              </master_item>
            </item_prototype>
          </item_prototypes>
          <master_item>
            <key>prom.pod.metrics[new]</key>
          </master_item>
          <lld_macro_paths>
            <lld_macro_path>
              <lld_macro>{#METRIC}</lld_macro>
              <path>$.metric['__name__']</path>
            </lld_macro_path>
            <lld_macro_path>
              <lld_macro>{#CONTAINER}</lld_macro>
              <path>$.metric.container</path>
            </lld_macro_path>
          </lld_macro_paths>
        </discovery_rule>
        <discovery_rule>
          <name>Discovery spec</name>
          <type>DEPENDENT</type>
          <key>prom.pod.discovery[spec]</key>
          <delay>0</delay>
          <item_prototypes>
            <item_prototype>
              <name>{#CONTAINER} - {#METRIC}</name>
              <type>DEPENDENT</type>
              <key>prom.pod.metrics[spec,{#CONTAINER},{#METRIC}]</key>
              <delay>0</delay>
              <value_type>FLOAT</value_type>
              <applications>
                <application>
                  <name>Spec</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[?(@.metric['__name__']=='{#METRIC}' &amp;&amp; @.metric.container=='{#CONTAINER}')].value[1]</params>
                </step>
                <step>
                  <type>JAVASCRIPT</type>
                  <params>return JSON.parse(value).map(Number);</params>
                </step>
              </preprocessing>
              <master_item>
                <key>prom.pod.metrics[spec]</key>
              </master_item>
            </item_prototype>
          </item_prototypes>
          <master_item>
            <key>prom.pod.metrics[spec]</key>
          </master_item>
          <lld_macro_paths>
            <lld_macro_path>
              <lld_macro>{#METRIC}</lld_macro>
              <path>$.metric['__name__']</path>
            </lld_macro_path>
            <lld_macro_path>
              <lld_macro>{#CONTAINER}</lld_macro>
              <path>$.metric.container</path>
            </lld_macro_path>
          </lld_macro_paths>
        </discovery_rule>
        <discovery_rule>
          <name>Discovery storage_fs</name>
          <type>DEPENDENT</type>
          <key>prom.pod.discovery[storage,fs]</key>
          <delay>0</delay>
          <filter>
            <evaltype>AND</evaltype>
          </filter>
          <item_prototypes>
            <item_prototype>
              <name>{#CONTAINER} - Storage {#DEVICE}: {#METRIC}</name>
              <type>DEPENDENT</type>
              <key>prom.pod.metrics[storage,{#CONTAINER},{#METRIC},{#DEVICE}]</key>
              <delay>0</delay>
              <value_type>FLOAT</value_type>
              <application_prototypes>
                <application_prototype>
                  <name>Storage {#DEVICE}</name>
                </application_prototype>
              </application_prototypes>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[?(@.metric['__name__']=='{#METRIC}' &amp;&amp; @.metric.container=='{#CONTAINER}' &amp;&amp; @.metric.device=='{#DEVICE}')].value[1]</params>
                </step>
                <step>
                  <type>JAVASCRIPT</type>
                  <params>return JSON.parse(value).map(Number);</params>
                </step>
              </preprocessing>
              <master_item>
                <key>prom.pod.metrics[storage,fs]</key>
              </master_item>
            </item_prototype>
          </item_prototypes>
          <master_item>
            <key>prom.pod.metrics[storage,fs]</key>
          </master_item>
          <lld_macro_paths>
            <lld_macro_path>
              <lld_macro>{#METRIC}</lld_macro>
              <path>$.metric['__name__']</path>
            </lld_macro_path>
            <lld_macro_path>
              <lld_macro>{#DEVICE}</lld_macro>
              <path>$.metric.device</path>
            </lld_macro_path>
            <lld_macro_path>
              <lld_macro>{#CONTAINER}</lld_macro>
              <path>$.metric.container</path>
            </lld_macro_path>
          </lld_macro_paths>
        </discovery_rule>
        <discovery_rule>
          <name>Discovery storage</name>
          <type>DEPENDENT</type>
          <key>prom.pod.discovery[storage]</key>
          <delay>0</delay>
          <item_prototypes>
            <item_prototype>
              <name>{#CONTAINER} - {#METRIC}</name>
              <type>DEPENDENT</type>
              <key>prom.pod.metrics[storage,{#CONTAINER},{#METRIC}]</key>
              <delay>0</delay>
              <value_type>FLOAT</value_type>
              <applications>
                <application>
                  <name>Storage</name>
                </application>
              </applications>
              <preprocessing>
                <step>
                  <type>JSONPATH</type>
                  <params>$[?(@.metric['__name__']=='{#METRIC}' &amp;&amp; @.metric.container=='{#CONTAINER}')].value[1]</params>
                </step>
                <step>
                  <type>JAVASCRIPT</type>
                  <params>return JSON.parse(value).map(Number);</params>
                </step>
              </preprocessing>
              <master_item>
                <key>prom.pod.metrics[storage]</key>
              </master_item>
            </item_prototype>
          </item_prototypes>
          <master_item>
            <key>prom.pod.metrics[storage]</key>
          </master_item>
          <lld_macro_paths>
            <lld_macro_path>
              <lld_macro>{#METRIC}</lld_macro>
              <path>$.metric['__name__']</path>
            </lld_macro_path>
            <lld_macro_path>
              <lld_macro>{#CONTAINER}</lld_macro>
              <path>$.metric.container</path>
            </lld_macro_path>
          </lld_macro_paths>
        </discovery_rule>
      </discovery_rules>
      <macros>
        <macro>
          <macro>{$PROM.POD.DEVICE.MATCHES}</macro>
          <value>^.*$</value>
          <description>Device regex used in pod's metric discovery. Can be overridden on the host or linked template level.</description>
        </macro>
        <macro>
          <macro>{$PROM.POD.DEVICE.NOT_MATCHES}</macro>
          <value>CHANGE_IF_NEEDED</value>
          <description>Device interface regex used in pod's metric discovery. Can be overridden on the host or linked template level.</description>
        </macro>
        <macro>
          <macro>{$PROM.POD.IFNAME.MATCHES}</macro>
          <value>^.*$</value>
          <description>Network interface regex used in pod's metric discovery. Can be overridden on the host or linked template level.</description>
        </macro>
        <macro>
          <macro>{$PROM.POD.IFNAME.NOT_MATCHES}</macro>
          <value>CHANGE_IF_NEEDED</value>
          <description>Network interface regex used in pod's metric discovery. Can be overridden on the host or linked template level.</description>
        </macro>
      </macros>
    </template>
  </templates>
  <triggers>
    <trigger>
      <expression>{Template Kube Node by Prom API:system.swap.pfree[node_exporter].min(5m)}&lt;{$SWAP.PFREE.MIN.WARN} and {Template Kube Node by Prom API:system.swap.total[node_exporter].last()}>0</expression>
      <name>High swap space usage ( less than {$SWAP.PFREE.MIN.WARN}% free)</name>
      <opdata>Free: {ITEM.LASTVALUE1}, total: {ITEM.LASTVALUE2}</opdata>
      <priority>WARNING</priority>
      <description>This trigger is ignored, if there is no swap configured</description>
      <dependencies>
        <dependency>
          <name>High memory utilization ( >{$MEMORY.UTIL.MAX}% for 5m)</name>
          <expression>{Template Kube Node by Prom API:vm.memory.util[node_exporter].min(5m)}>{$MEMORY.UTIL.MAX}</expression>
        </dependency>
        <dependency>
          <name>Lack of available memory ( &lt; {$MEMORY.AVAILABLE.MIN} of {ITEM.VALUE2})</name>
          <expression>{Template Kube Node by Prom API:vm.memory.available[node_exporter].min(5m)}&lt;{$MEMORY.AVAILABLE.MIN} and {Template Kube Node by Prom API:vm.memory.total[node_exporter].last()}>0</expression>
        </dependency>
      </dependencies>
    </trigger>
    <trigger>
      <expression>{Template Kube Node by Prom API:vm.memory.available[node_exporter].min(5m)}&lt;{$MEMORY.AVAILABLE.MIN} and {Template Kube Node by Prom API:vm.memory.total[node_exporter].last()}>0</expression>
      <name>Lack of available memory ( &lt; {$MEMORY.AVAILABLE.MIN} of {ITEM.VALUE2})</name>
      <opdata>Available: {ITEM.LASTVALUE1}, total: {ITEM.LASTVALUE2}</opdata>
      <priority>AVERAGE</priority>
    </trigger>
    <trigger>
      <expression>{Template Kube Node by Prom API:system.cpu.load.avg1[node_exporter].min(5m)}/{Template Kube Node by Prom API:system.cpu.num[node_exporter].last()}>{$LOAD_AVG_PER_CPU.MAX.WARN} and {Template Kube Node by Prom API:system.cpu.load.avg5[node_exporter].last()}>0 and {Template Kube Node by Prom API:system.cpu.load.avg15[node_exporter].last()}>0</expression>
      <name>Load average is too high (per CPU load over {$LOAD_AVG_PER_CPU.MAX.WARN} for 5m)</name>
      <opdata>Load averages(1m 5m 15m): ({ITEM.LASTVALUE1} {ITEM.LASTVALUE3} {ITEM.LASTVALUE4}), # of CPUs: {ITEM.LASTVALUE2}</opdata>
      <priority>AVERAGE</priority>
      <description>Per CPU load average is too high. Your system may be slow to respond.</description>
    </trigger>
    <trigger>
      <expression>{Template Kube Node by Prom API:fd.open[node_exporter].last()}/{Template Kube Node by Prom API:kernel.maxfiles[node_exporter].last()}*100>80</expression>
      <name>Running out of file descriptors (less than &lt; 20% free)</name>
      <opdata>{ITEM.LASTVALUE1} of {ITEM.LASTVALUE2} file descriptors are in use.</opdata>
      <priority>WARNING</priority>
    </trigger>
  </triggers>
  <graphs>
    <graph>
      <name>CPU jumps</name>
      <graph_items>
        <graph_item>
          <color>1A7C11</color>
          <item>
            <host>Template Kube Node by Prom API</host>
            <key>system.cpu.switches[node_exporter]</key>
          </item>
        </graph_item>
        <graph_item>
          <sortorder>1</sortorder>
          <color>2774A4</color>
          <item>
            <host>Template Kube Node by Prom API</host>
            <key>system.cpu.intr[node_exporter]</key>
          </item>
        </graph_item>
      </graph_items>
    </graph>
    <graph>
      <name>CPU usage</name>
      <type>STACKED</type>
      <ymin_type_1>FIXED</ymin_type_1>
      <ymax_type_1>FIXED</ymax_type_1>
      <graph_items>
        <graph_item>
          <color>1A7C11</color>
          <item>
            <host>Template Kube Node by Prom API</host>
            <key>system.cpu.system[node_exporter]</key>
          </item>
        </graph_item>
        <graph_item>
          <sortorder>1</sortorder>
          <color>2774A4</color>
          <item>
            <host>Template Kube Node by Prom API</host>
            <key>system.cpu.user[node_exporter]</key>
          </item>
        </graph_item>
        <graph_item>
          <sortorder>2</sortorder>
          <color>F63100</color>
          <item>
            <host>Template Kube Node by Prom API</host>
            <key>system.cpu.nice[node_exporter]</key>
          </item>
        </graph_item>
        <graph_item>
          <sortorder>3</sortorder>
          <color>A54F10</color>
          <item>
            <host>Template Kube Node by Prom API</host>
            <key>system.cpu.iowait[node_exporter]</key>
          </item>
        </graph_item>
        <graph_item>
          <sortorder>4</sortorder>
          <color>FC6EA3</color>
          <item>
            <host>Template Kube Node by Prom API</host>
            <key>system.cpu.steal[node_exporter]</key>
          </item>
        </graph_item>
        <graph_item>
          <sortorder>5</sortorder>
          <color>6C59DC</color>
          <item>
            <host>Template Kube Node by Prom API</host>
            <key>system.cpu.interrupt[node_exporter]</key>
          </item>
        </graph_item>
        <graph_item>
          <sortorder>6</sortorder>
          <color>AC8C14</color>
          <item>
            <host>Template Kube Node by Prom API</host>
            <key>system.cpu.softirq[node_exporter]</key>
          </item>
        </graph_item>
        <graph_item>
          <sortorder>7</sortorder>
          <color>611F27</color>
          <item>
            <host>Template Kube Node by Prom API</host>
            <key>system.cpu.guest[node_exporter]</key>
          </item>
        </graph_item>
        <graph_item>
          <sortorder>8</sortorder>
          <color>F230E0</color>
          <item>
            <host>Template Kube Node by Prom API</host>
            <key>system.cpu.guest_nice[node_exporter]</key>
          </item>
        </graph_item>
      </graph_items>
    </graph>
    <graph>
      <name>CPU utilization</name>
      <ymin_type_1>FIXED</ymin_type_1>
      <ymax_type_1>FIXED</ymax_type_1>
      <graph_items>
        <graph_item>
          <drawtype>GRADIENT_LINE</drawtype>
          <color>1A7C11</color>
          <item>
            <host>Template Kube Node by Prom API</host>
            <key>system.cpu.util[node_exporter]</key>
          </item>
        </graph_item>
      </graph_items>
    </graph>
    <graph>
      <name>Memory usage</name>
      <ymin_type_1>FIXED</ymin_type_1>
      <graph_items>
        <graph_item>
          <drawtype>BOLD_LINE</drawtype>
          <color>1A7C11</color>
          <item>
            <host>Template Kube Node by Prom API</host>
            <key>vm.memory.total[node_exporter]</key>
          </item>
        </graph_item>
        <graph_item>
          <sortorder>1</sortorder>
          <drawtype>GRADIENT_LINE</drawtype>
          <color>2774A4</color>
          <item>
            <host>Template Kube Node by Prom API</host>
            <key>vm.memory.available[node_exporter]</key>
          </item>
        </graph_item>
      </graph_items>
    </graph>
    <graph>
      <name>Memory utilization</name>
      <ymin_type_1>FIXED</ymin_type_1>
      <ymax_type_1>FIXED</ymax_type_1>
      <graph_items>
        <graph_item>
          <drawtype>GRADIENT_LINE</drawtype>
          <color>1A7C11</color>
          <item>
            <host>Template Kube Node by Prom API</host>
            <key>vm.memory.util[node_exporter]</key>
          </item>
        </graph_item>
      </graph_items>
    </graph>
    <graph>
      <name>Swap usage</name>
      <graph_items>
        <graph_item>
          <color>1A7C11</color>
          <item>
            <host>Template Kube Node by Prom API</host>
            <key>system.swap.free[node_exporter]</key>
          </item>
        </graph_item>
        <graph_item>
          <sortorder>1</sortorder>
          <color>2774A4</color>
          <item>
            <host>Template Kube Node by Prom API</host>
            <key>system.swap.total[node_exporter]</key>
          </item>
        </graph_item>
      </graph_items>
    </graph>
    <graph>
      <name>System load</name>
      <ymin_type_1>FIXED</ymin_type_1>
      <graph_items>
        <graph_item>
          <color>1A7C11</color>
          <item>
            <host>Template Kube Node by Prom API</host>
            <key>system.cpu.load.avg1[node_exporter]</key>
          </item>
        </graph_item>
        <graph_item>
          <sortorder>1</sortorder>
          <color>2774A4</color>
          <item>
            <host>Template Kube Node by Prom API</host>
            <key>system.cpu.load.avg5[node_exporter]</key>
          </item>
        </graph_item>
        <graph_item>
          <sortorder>2</sortorder>
          <color>F63100</color>
          <item>
            <host>Template Kube Node by Prom API</host>
            <key>system.cpu.load.avg15[node_exporter]</key>
          </item>
        </graph_item>
        <graph_item>
          <sortorder>3</sortorder>
          <color>A54F10</color>
          <yaxisside>RIGHT</yaxisside>
          <item>
            <host>Template Kube Node by Prom API</host>
            <key>system.cpu.num[node_exporter]</key>
          </item>
        </graph_item>
      </graph_items>
    </graph>
  </graphs>
  <value_maps>
    <value_map>
      <name>IF-MIB::ifOperStatus</name>
      <mappings>
        <mapping>
          <value>1</value>
          <newvalue>up</newvalue>
        </mapping>
        <mapping>
          <value>2</value>
          <newvalue>down</newvalue>
        </mapping>
        <mapping>
          <value>4</value>
          <newvalue>unknown</newvalue>
        </mapping>
        <mapping>
          <value>5</value>
          <newvalue>dormant</newvalue>
        </mapping>
        <mapping>
          <value>6</value>
          <newvalue>notPresent</newvalue>
        </mapping>
        <mapping>
          <value>7</value>
          <newvalue>lowerLayerDown</newvalue>
        </mapping>
      </mappings>
    </value_map>
    <value_map>
      <name>Linux::Interface protocol types</name>
      <mappings>
        <mapping>
          <value>0</value>
          <newvalue>from KA9Q: NET/ROM pseudo</newvalue>
        </mapping>
        <mapping>
          <value>1</value>
          <newvalue>Ethernet</newvalue>
        </mapping>
        <mapping>
          <value>2</value>
          <newvalue>Experimental Ethernet</newvalue>
        </mapping>
        <mapping>
          <value>3</value>
          <newvalue>AX.25 Level 2</newvalue>
        </mapping>
        <mapping>
          <value>4</value>
          <newvalue>PROnet token ring</newvalue>
        </mapping>
        <mapping>
          <value>5</value>
          <newvalue>Chaosnet</newvalue>
        </mapping>
        <mapping>
          <value>6</value>
          <newvalue>IEEE 802.2 Ethernet/TR/TB</newvalue>
        </mapping>
        <mapping>
          <value>7</value>
          <newvalue>ARCnet</newvalue>
        </mapping>
        <mapping>
          <value>8</value>
          <newvalue>APPLEtalk</newvalue>
        </mapping>
        <mapping>
          <value>15</value>
          <newvalue>Frame Relay DLCI</newvalue>
        </mapping>
        <mapping>
          <value>19</value>
          <newvalue>ATM</newvalue>
        </mapping>
        <mapping>
          <value>23</value>
          <newvalue>Metricom STRIP (new IANA id)</newvalue>
        </mapping>
        <mapping>
          <value>24</value>
          <newvalue>IEEE 1394 IPv4 - RFC 2734</newvalue>
        </mapping>
        <mapping>
          <value>27</value>
          <newvalue>EUI-64</newvalue>
        </mapping>
        <mapping>
          <value>32</value>
          <newvalue>InfiniBand</newvalue>
        </mapping>
        <mapping>
          <value>256</value>
          <newvalue>ARPHRD_SLIP</newvalue>
        </mapping>
        <mapping>
          <value>257</value>
          <newvalue>ARPHRD_CSLIP</newvalue>
        </mapping>
        <mapping>
          <value>258</value>
          <newvalue>ARPHRD_SLIP6</newvalue>
        </mapping>
        <mapping>
          <value>259</value>
          <newvalue>ARPHRD_CSLIP6</newvalue>
        </mapping>
        <mapping>
          <value>260</value>
          <newvalue>Notional KISS type</newvalue>
        </mapping>
        <mapping>
          <value>264</value>
          <newvalue>ARPHRD_ADAPT</newvalue>
        </mapping>
        <mapping>
          <value>270</value>
          <newvalue>ARPHRD_ROSE</newvalue>
        </mapping>
        <mapping>
          <value>271</value>
          <newvalue>CCITT X.25</newvalue>
        </mapping>
        <mapping>
          <value>272</value>
          <newvalue>Boards with X.25 in firmware</newvalue>
        </mapping>
        <mapping>
          <value>280</value>
          <newvalue>Controller Area Network</newvalue>
        </mapping>
        <mapping>
          <value>512</value>
          <newvalue>ARPHRD_PPP</newvalue>
        </mapping>
        <mapping>
          <value>513</value>
          <newvalue>Cisco HDLC</newvalue>
        </mapping>
        <mapping>
          <value>516</value>
          <newvalue>LAPB</newvalue>
        </mapping>
        <mapping>
          <value>517</value>
          <newvalue>Digital's DDCMP protocol</newvalue>
        </mapping>
        <mapping>
          <value>518</value>
          <newvalue>Raw HDLC</newvalue>
        </mapping>
        <mapping>
          <value>519</value>
          <newvalue>Raw IP</newvalue>
        </mapping>
        <mapping>
          <value>768</value>
          <newvalue>IPIP tunnel</newvalue>
        </mapping>
        <mapping>
          <value>769</value>
          <newvalue>IP6IP6 tunnel</newvalue>
        </mapping>
        <mapping>
          <value>770</value>
          <newvalue>Frame Relay Access Device</newvalue>
        </mapping>
        <mapping>
          <value>771</value>
          <newvalue>SKIP vif</newvalue>
        </mapping>
        <mapping>
          <value>772</value>
          <newvalue>Loopback device</newvalue>
        </mapping>
        <mapping>
          <value>773</value>
          <newvalue>Localtalk device</newvalue>
        </mapping>
        <mapping>
          <value>774</value>
          <newvalue>Fiber Distributed Data Interface</newvalue>
        </mapping>
        <mapping>
          <value>775</value>
          <newvalue>AP1000 BIF</newvalue>
        </mapping>
        <mapping>
          <value>776</value>
          <newvalue>sit0 device - IPv6-in-IPv4</newvalue>
        </mapping>
        <mapping>
          <value>777</value>
          <newvalue>IP over DDP tunneller</newvalue>
        </mapping>
        <mapping>
          <value>778</value>
          <newvalue>GRE over IP</newvalue>
        </mapping>
        <mapping>
          <value>779</value>
          <newvalue>PIMSM register interface</newvalue>
        </mapping>
        <mapping>
          <value>780</value>
          <newvalue>High Performance Parallel Interface</newvalue>
        </mapping>
        <mapping>
          <value>781</value>
          <newvalue>Nexus 64Mbps Ash</newvalue>
        </mapping>
        <mapping>
          <value>782</value>
          <newvalue>Acorn Econet</newvalue>
        </mapping>
        <mapping>
          <value>783</value>
          <newvalue>Linux-IrDA</newvalue>
        </mapping>
        <mapping>
          <value>784</value>
          <newvalue>Point to point fibrechannel</newvalue>
        </mapping>
        <mapping>
          <value>785</value>
          <newvalue>Fibrechannel arbitrated loop</newvalue>
        </mapping>
        <mapping>
          <value>786</value>
          <newvalue>Fibrechannel public loop</newvalue>
        </mapping>
        <mapping>
          <value>787</value>
          <newvalue>Fibrechannel fabric</newvalue>
        </mapping>
        <mapping>
          <value>800</value>
          <newvalue>Magic type ident for TR</newvalue>
        </mapping>
        <mapping>
          <value>801</value>
          <newvalue>IEEE 802.11</newvalue>
        </mapping>
        <mapping>
          <value>802</value>
          <newvalue>IEEE 802.11 + Prism2 header</newvalue>
        </mapping>
        <mapping>
          <value>803</value>
          <newvalue>IEEE 802.11 + radiotap header</newvalue>
        </mapping>
        <mapping>
          <value>804</value>
          <newvalue>ARPHRD_IEEE802154</newvalue>
        </mapping>
        <mapping>
          <value>805</value>
          <newvalue>IEEE 802.15.4 network monitor</newvalue>
        </mapping>
        <mapping>
          <value>820</value>
          <newvalue>PhoNet media type</newvalue>
        </mapping>
        <mapping>
          <value>821</value>
          <newvalue>PhoNet pipe header</newvalue>
        </mapping>
        <mapping>
          <value>822</value>
          <newvalue>CAIF media type</newvalue>
        </mapping>
        <mapping>
          <value>823</value>
          <newvalue>GRE over IPv6</newvalue>
        </mapping>
        <mapping>
          <value>824</value>
          <newvalue>Netlink header</newvalue>
        </mapping>
        <mapping>
          <value>825</value>
          <newvalue>IPv6 over LoWPAN</newvalue>
        </mapping>
        <mapping>
          <value>826</value>
          <newvalue>Vsock monitor header</newvalue>
        </mapping>
      </mappings>
    </value_map>
  </value_maps>
</zabbix_export>