<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export><version>5.0</version><date>2021-10-19T09:45:32Z</date><groups><group><name>Windows Servers</name></group></groups><templates><template><template>Template App MS SQL DB Discovery</template><name>Template App MS SQL DB Discovery</name><groups><group><name>Windows Servers</name></group></groups><applications><application><name>SQL Databases</name></application></applications><discovery_rules><discovery_rule><name>MS SQL DB Discovery</name><key>windowsdb.discovery</key><delay>300</delay><filter><conditions><condition><macro>{#DBS}</macro><value>@MS SQL System DBs</value><formulaid>A</formulaid></condition></conditions></filter><description>Discovers databases within a single instance specified in a Powershell script.</description><item_prototypes><item_prototype><name>{$INSTANCE01} Databases {#DBS} Active Transactions</name><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Active Transactions&quot;,300]</key><delay>30</delay><value_type>FLOAT</value_type><description>Number of active transactions for the database.</description><applications><application><name>SQL Databases</name></application></applications></item_prototype><item_prototype><name>{$INSTANCE01} Databases {#DBS} Bulk Copy Rows/sec</name><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Bulk Copy Rows/sec&quot;,300]</key><delay>30</delay><value_type>FLOAT</value_type><units>/sec</units><description>Number of rows bulk copied per second.</description><applications><application><name>SQL Databases</name></application></applications></item_prototype><item_prototype><name>{$INSTANCE01} Databases {#DBS} Bulk Copy Throughput/sec</name><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Bulk Copy Throughput/sec&quot;,300]</key><delay>30</delay><value_type>FLOAT</value_type><units>KBytes/sec</units><description>Amount of data bulk copied (in kilobytes) per second.</description><applications><application><name>SQL Databases</name></application></applications></item_prototype><item_prototype><name>{$INSTANCE01} Databases {#DBS} Commit Table Entries</name><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Commit Table Entries&quot;,300]</key><delay>30</delay><value_type>FLOAT</value_type><description>The size of the in-memory portion of the commit table for the database.</description><applications><application><name>SQL Databases</name></application></applications></item_prototype><item_prototype><name>{$INSTANCE01} Databases {#DBS} Data File(s) Size (KB)</name><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Data File(s) Size (KB)&quot;,300]</key><delay>30</delay><value_type>FLOAT</value_type><units>KBytes</units><description>Cumulative size (in kilobytes) of all the data files in the database including any automatic growth. Monitoring this counter is useful, for example, for determining the correct size of tempdb.</description><applications><application><name>SQL Databases</name></application></applications></item_prototype><item_prototype><name>{$INSTANCE01} Databases {#DBS} DBCC Logical Scan Bytes/sec</name><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\DBCC Logical Scan Bytes/sec&quot;,300]</key><delay>30</delay><value_type>FLOAT</value_type><units>Bytes/sec</units><description>Number of logical read scan bytes per second for database console commands (DBCC).</description><applications><application><name>SQL Databases</name></application></applications></item_prototype><item_prototype><name>{$INSTANCE01} Databases {#DBS} Group Commit Time/sec</name><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Group Commit Time/sec&quot;,300]</key><delay>30</delay><value_type>FLOAT</value_type><units>/sec</units><applications><application><name>SQL Databases</name></application></applications></item_prototype><item_prototype><name>{$INSTANCE01} Databases {#DBS} Log Bytes Flushed/sec</name><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Log Bytes Flushed/sec&quot;,300]</key><delay>30</delay><value_type>FLOAT</value_type><units>Bytes/sec</units><applications><application><name>SQL Databases</name></application></applications></item_prototype><item_prototype><name>{$INSTANCE01} Databases {#DBS} Log Cache Hit Ratio</name><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Log Cache Hit Ratio&quot;,300]</key><delay>30</delay><value_type>FLOAT</value_type><description>Percentage of log cache reads satisfied from the log cache.</description><applications><application><name>SQL Databases</name></application></applications></item_prototype><item_prototype><name>{$INSTANCE01} Databases {#DBS} Log Cache Reads/sec</name><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Log Cache Reads/sec&quot;,300]</key><delay>30</delay><value_type>FLOAT</value_type><units>/sec</units><description>Reads performed per second through the log manager cache.</description><applications><application><name>SQL Databases</name></application></applications></item_prototype><item_prototype><name>{$INSTANCE01} Databases {#DBS} Log File(s) Size (KB)</name><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Log File(s) Size (KB)&quot;,300]</key><delay>30</delay><value_type>FLOAT</value_type><units>KBytes</units><description>Cumulative size (in kilobytes) of all the transaction log files in the database.</description><applications><application><name>SQL Databases</name></application></applications></item_prototype><item_prototype><name>{$INSTANCE01} Databases {#DBS} Log File(s) Used Size (KB)</name><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Log File(s) Used Size (KB)&quot;,300]</key><delay>30</delay><value_type>FLOAT</value_type><units>KBytes</units><description>The cumulative used size of all the log files in the database.</description><applications><application><name>SQL Databases</name></application></applications></item_prototype><item_prototype><name>{$INSTANCE01} Databases {#DBS} Log Flushes/sec</name><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Log Flushes/sec&quot;,300]</key><delay>30</delay><value_type>FLOAT</value_type><units>/sec</units><description>Number of log flushes per second.</description><applications><application><name>SQL Databases</name></application></applications></item_prototype><item_prototype><name>{$INSTANCE01} Databases {#DBS} Log Flush Waits/sec</name><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Log Flush Waits/sec&quot;,300]</key><delay>30</delay><value_type>FLOAT</value_type><units>/sec</units><description>Number of commits per second waiting for the log flush.</description><applications><application><name>SQL Databases</name></application></applications><trigger_prototypes><trigger_prototype><expression>{avg(600)}&gt;0.1</expression><name>{#DBS} Log Flush Waits/sec</name><priority>WARNING</priority><description>The number of times per second that SQL Server must wait for pages to be written to the transaction log.</description></trigger_prototype></trigger_prototypes></item_prototype><item_prototype><name>{$INSTANCE01} Databases {#DBS} Log Flush Wait Time</name><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Log Flush Wait Time&quot;,300]</key><delay>30</delay><value_type>FLOAT</value_type><units>millisec</units><description>Total wait time (in milliseconds) to flush the log. On an AlwaysOn secondary database, this value indicates the wait time for log records to be hardened to disk.</description><applications><application><name>SQL Databases</name></application></applications><trigger_prototypes><trigger_prototype><expression>{avg(600)}&gt;0.1</expression><name>{#DBS} Log Flush Wait Time</name><priority>WARNING</priority><description>Total wait time, in milliseconds, to write all transaction log pages.</description></trigger_prototype></trigger_prototypes></item_prototype><item_prototype><name>{$INSTANCE01} Databases {#DBS} Log Flush Write Time (ms)</name><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Log Flush Write Time (ms)&quot;,300]</key><delay>30</delay><value_type>FLOAT</value_type><units>millisec</units><description>Time in milliseconds for performing writes of log flushes that were completed in the last second.</description><applications><application><name>SQL Databases</name></application></applications></item_prototype><item_prototype><name>{$INSTANCE01} Databases {#DBS} Log Growths</name><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Log Growths&quot;,300]</key><delay>30</delay><value_type>FLOAT</value_type><description>Total number of times the transaction log for the database has been expanded.</description><applications><application><name>SQL Databases</name></application></applications><trigger_prototypes><trigger_prototype><expression>{avg(600)}&gt;0.1</expression><name>{#DBS} Log Growths</name><priority>WARNING</priority><description>Total number of times the transaction log for the database has been expanded. Each time the transaction log grows, all user activity must halt until the log growth completes.  Therefore, you want log growths to occur during predefined maintenance windows rather than during general working hours</description></trigger_prototype></trigger_prototypes></item_prototype><item_prototype><name>{$INSTANCE01} Databases {#DBS} Log Pool Cache Misses/sec</name><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Log Pool Cache Misses/sec&quot;,300]</key><delay>30</delay><value_type>FLOAT</value_type><units>/sec</units><description>Number of requests for which the log block was not available in the log pool. The log pool is an in-memory cache of the transaction log. This cache is used to optimize reading the log for recovery, transaction replication, rollback, and AlwaysOn Availability Groups.</description><applications><application><name>SQL Databases</name></application></applications></item_prototype><item_prototype><name>{$INSTANCE01} Databases {#DBS} Log Pool Disk Reads/sec</name><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Log Pool Disk Reads/sec&quot;,300]</key><delay>30</delay><value_type>FLOAT</value_type><units>/sec</units><description>Number of disk reads that the log pool issued to fetch log blocks.</description><applications><application><name>SQL Databases</name></application></applications></item_prototype><item_prototype><name>{$INSTANCE01} Databases {#DBS} Log Pool Requests/sec</name><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Log Pool Requests/sec&quot;,300]</key><delay>30</delay><value_type>FLOAT</value_type><units>/sec</units><description>The number of log-block requests processed by the log pool.</description><applications><application><name>SQL Databases</name></application></applications></item_prototype><item_prototype><name>{$INSTANCE01} Databases {#DBS} Log Shrinks</name><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Log Shrinks&quot;,300]</key><delay>30</delay><value_type>FLOAT</value_type><description>Total number of times the transaction log for the database has been shrunk.</description><applications><application><name>SQL Databases</name></application></applications><trigger_prototypes><trigger_prototype><expression>{avg(600)}&gt;0.1</expression><name>{#DBS} Log Shrinks</name><priority>WARNING</priority><description>Total number of times the transaction log for the database has been shrunk.</description></trigger_prototype></trigger_prototypes></item_prototype><item_prototype><name>{$INSTANCE01} Databases {#DBS} Log Truncations</name><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Log Truncations&quot;,300]</key><delay>30</delay><value_type>FLOAT</value_type><description>The number of times the transaction log has been shrunk.</description><applications><application><name>SQL Databases</name></application></applications></item_prototype><item_prototype><name>{$INSTANCE01} Databases {#DBS} Percent Log Used</name><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Percent Log Used&quot;,300]</key><delay>30</delay><value_type>FLOAT</value_type><units>%</units><description>Percentage of space in the log that is in use.</description><applications><application><name>SQL Databases</name></application></applications><trigger_prototypes><trigger_prototype><expression>{last()}&gt;80</expression><name>{#DBS} Percent Log Used</name><priority>WARNING</priority><description>Percentage of space in the log that is in use.  Since all work in an OLTP database stops until writes can occur to the transaction log, it’s a very good idea to ensure that the log never fills completely.  Hence, the recommendation to keep the log under 80% full.</description></trigger_prototype></trigger_prototypes></item_prototype><item_prototype><name>{$INSTANCE01} Databases {#DBS} Repl. Pending Xacts</name><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Repl. Pending Xacts&quot;,300]</key><delay>30</delay><value_type>FLOAT</value_type><description>Number of transactions in the transaction log of the publication database marked for replication, but not yet delivered to the distribution database.</description><applications><application><name>SQL Databases</name></application></applications></item_prototype><item_prototype><name>{$INSTANCE01} Databases {#DBS} Repl. Trans. Rate</name><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Repl. Trans. Rate&quot;,300]</key><delay>30</delay><value_type>FLOAT</value_type><units>/sec</units><description>Number of transactions per second read out of the transaction log of the publication database and delivered to the distribution database.</description><applications><application><name>SQL Databases</name></application></applications></item_prototype><item_prototype><name>{$INSTANCE01} Databases {#DBS} Shrink Data Movement Bytes/sec</name><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Shrink Data Movement Bytes/sec&quot;,300]</key><delay>30</delay><value_type>FLOAT</value_type><units>Bytes/sec</units><description>Amount of data being moved per second by autoshrink operations, or DBCC SHRINKDATABASE or DBCC SHRINKFILE statements.</description><applications><application><name>SQL Databases</name></application></applications></item_prototype><item_prototype><name>{$INSTANCE01} Databases {#DBS} Tracked transactions/sec</name><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Tracked transactions/sec&quot;,300]</key><delay>30</delay><value_type>FLOAT</value_type><units>/sec</units><description>Number of committed transactions recorded in the commit table for the database.</description><applications><application><name>SQL Databases</name></application></applications></item_prototype><item_prototype><name>{$INSTANCE01} Databases {#DBS} Transactions/sec</name><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Transactions/sec&quot;,300]</key><delay>30</delay><value_type>FLOAT</value_type><units>/sec</units><description>Number of transactions started for the database per second.</description><applications><application><name>SQL Databases</name></application></applications></item_prototype><item_prototype><name>{$INSTANCE01} Databases {#DBS} Write Transactions/sec</name><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Write Transactions/sec&quot;,300]</key><delay>30</delay><value_type>FLOAT</value_type><units>/sec</units><description>Number of transactions that wrote to the database and committed, in the last second.</description><applications><application><name>SQL Databases</name></application></applications></item_prototype></item_prototypes><graph_prototypes><graph_prototype><name>Database {#DBS} Bulk Copies</name><graph_items><graph_item><color>00C800</color><item><host>Template App MS SQL DB Discovery</host><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Bulk Copy Rows/sec&quot;,300]</key></item></graph_item><graph_item><sortorder>1</sortorder><color>FF3333</color><item><host>Template App MS SQL DB Discovery</host><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Bulk Copy Throughput/sec&quot;,300]</key></item></graph_item></graph_items></graph_prototype><graph_prototype><name>Database {#DBS} File Sizes (KB)</name><graph_items><graph_item><color>00C800</color><item><host>Template App MS SQL DB Discovery</host><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Data File(s) Size (KB)&quot;,300]</key></item></graph_item><graph_item><sortorder>1</sortorder><color>FF3333</color><item><host>Template App MS SQL DB Discovery</host><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Log File(s) Size (KB)&quot;,300]</key></item></graph_item><graph_item><sortorder>2</sortorder><color>0000C8</color><item><host>Template App MS SQL DB Discovery</host><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Log File(s) Used Size (KB)&quot;,300]</key></item></graph_item></graph_items></graph_prototype><graph_prototype><name>Database {#DBS} Log Pool Rates</name><graph_items><graph_item><color>00C800</color><item><host>Template App MS SQL DB Discovery</host><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Log Pool Cache Misses/sec&quot;,300]</key></item></graph_item><graph_item><sortorder>1</sortorder><color>FF3333</color><item><host>Template App MS SQL DB Discovery</host><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Log Pool Disk Reads/sec&quot;,300]</key></item></graph_item><graph_item><sortorder>2</sortorder><color>0000C8</color><item><host>Template App MS SQL DB Discovery</host><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Log Pool Requests/sec&quot;,300]</key></item></graph_item></graph_items></graph_prototype><graph_prototype><name>Database {#DBS} Log Rates</name><graph_items><graph_item><color>00C800</color><item><host>Template App MS SQL DB Discovery</host><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Log Bytes Flushed/sec&quot;,300]</key></item></graph_item><graph_item><sortorder>1</sortorder><color>FF3333</color><item><host>Template App MS SQL DB Discovery</host><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Log Cache Reads/sec&quot;,300]</key></item></graph_item><graph_item><sortorder>2</sortorder><color>0000C8</color><item><host>Template App MS SQL DB Discovery</host><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Log Flushes/sec&quot;,300]</key></item></graph_item><graph_item><sortorder>3</sortorder><color>C800C8</color><item><host>Template App MS SQL DB Discovery</host><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Log Flush Waits/sec&quot;,300]</key></item></graph_item></graph_items></graph_prototype><graph_prototype><name>Database {#DBS} Log Sizes</name><graph_items><graph_item><color>00C800</color><item><host>Template App MS SQL DB Discovery</host><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Log Growths&quot;,300]</key></item></graph_item><graph_item><sortorder>1</sortorder><color>FF3333</color><item><host>Template App MS SQL DB Discovery</host><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Log Shrinks&quot;,300]</key></item></graph_item><graph_item><sortorder>2</sortorder><color>0000C8</color><item><host>Template App MS SQL DB Discovery</host><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Log Truncations&quot;,300]</key></item></graph_item><graph_item><sortorder>3</sortorder><color>C800C8</color><item><host>Template App MS SQL DB Discovery</host><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Percent Log Used&quot;,300]</key></item></graph_item></graph_items></graph_prototype><graph_prototype><name>Database {#DBS} Log Times and Ratios</name><graph_items><graph_item><color>00C800</color><item><host>Template App MS SQL DB Discovery</host><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Log Cache Hit Ratio&quot;,300]</key></item></graph_item><graph_item><sortorder>1</sortorder><color>FF3333</color><item><host>Template App MS SQL DB Discovery</host><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Log Flush Wait Time&quot;,300]</key></item></graph_item><graph_item><sortorder>2</sortorder><color>0000C8</color><item><host>Template App MS SQL DB Discovery</host><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Log Flush Write Time (ms)&quot;,300]</key></item></graph_item></graph_items></graph_prototype><graph_prototype><name>Database {#DBS} Replication</name><graph_items><graph_item><color>00C800</color><item><host>Template App MS SQL DB Discovery</host><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Repl. Pending Xacts&quot;,300]</key></item></graph_item><graph_item><sortorder>1</sortorder><color>FF3333</color><item><host>Template App MS SQL DB Discovery</host><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Repl. Trans. Rate&quot;,300]</key></item></graph_item></graph_items></graph_prototype><graph_prototype><name>Database {#DBS} Transactions</name><graph_items><graph_item><color>00C800</color><item><host>Template App MS SQL DB Discovery</host><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Active Transactions&quot;,300]</key></item></graph_item><graph_item><sortorder>1</sortorder><color>FF3333</color><item><host>Template App MS SQL DB Discovery</host><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Tracked transactions/sec&quot;,300]</key></item></graph_item><graph_item><sortorder>2</sortorder><color>0000C8</color><item><host>Template App MS SQL DB Discovery</host><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Transactions/sec&quot;,300]</key></item></graph_item><graph_item><sortorder>3</sortorder><color>C800C8</color><item><host>Template App MS SQL DB Discovery</host><key>perf_counter[&quot;\{$INSTANCE01}:Databases({#DBS})\Write Transactions/sec&quot;,300]</key></item></graph_item></graph_items></graph_prototype></graph_prototypes></discovery_rule></discovery_rules><macros><macro><macro>{$INSTANCE01}</macro><value>SQLServer</value></macro></macros></template></templates></zabbix_export>
