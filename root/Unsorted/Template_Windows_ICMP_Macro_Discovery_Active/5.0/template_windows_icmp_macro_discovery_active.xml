<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export><version>5.0</version><date>2021-10-19T06:16:42Z</date><groups><group><name>Templates/Development</name></group></groups><templates><template><template>Template Windows ICMP Macro Discovery Active</template><name>Template Windows ICMP Macro Discovery Active</name><groups><group><name>Templates/Development</name></group></groups><applications><application><name>Status</name></application></applications><items><item><name>ICMP Devices Macros Content</name><type>ZABBIX_ACTIVE</type><key>system.run[&quot;echo {$ICMP_DEVICES}&quot;]</key><delay>1h</delay><history>1d</history><trends>0</trends><value_type>TEXT</value_type><applications><application><name>Status</name></application></applications><preprocessing><step><type>JAVASCRIPT</type><params>var resultArr = value.split(&quot;!&quot;);

var resultArr1 = []; 

resultArr.forEach(function(item, i, resultArr ) {
  var tmp = item.replace(/\s/, '');
  tmp = tmp.replace(/\r/, '');
  tmp = tmp.replace(/\n/, '');
  resultArr1.push(tmp);
});

var resultArrUnique  = [];

resultArr1.forEach(function(item, i, resultArr1){
    if(resultArrUnique.indexOf(item) === -1) {
       resultArrUnique.push(item);
    }
});

var out = [];

resultArrUnique.forEach(function(item, i, resultArr ) {
  var tmp = item.replace(/\s/, '');
  tmp = tmp.replace(/\r/, '');
  tmp = tmp.replace(/\n/, '');
  var tmpArr = tmp.split(&quot;,&quot;);
  var tmp1 = {&quot;{#ICMPDEVICEIP}&quot;: tmpArr[0], &quot;{#ICMPDEVICENAME}&quot;: tmpArr[1]};
  out.push(tmp1);
});

var out1 = {&quot;data&quot; : out};

return JSON.stringify(out1);
</params></step></preprocessing></item><item><name>Overall ICMP hosts status</name><type>EXTERNAL</type><key>zbx_app_worst_trigger.php[&quot;{HOST.HOST}&quot;, &quot;/ICMP/&quot;]</key><history>7d</history><applications><application><name>Status</name></application></applications><valuemap><name>Zabbix Trigger Mapping</name></valuemap><preprocessing><step><type>TRIM</type><params>\n\r</params></step></preprocessing></item></items><discovery_rules><discovery_rule><name>ICMP Macro Discovery</name><type>ZABBIX_ACTIVE</type><key>system.run[&quot;echo {$ICMP_DEVICES} &amp;&amp; break&quot;]</key><delay>10m</delay><item_prototypes><item_prototype><name>Response for ICMP agent ping {#ICMPDEVICENAME}</name><type>ZABBIX_ACTIVE</type><key>system.run[&quot;ping -n 4 {#ICMPDEVICEIP}&quot;]</key><delay>5m</delay><history>7d</history><trends>0</trends><value_type>TEXT</value_type><application_prototypes><application_prototype><name>ICMP for {#ICMPDEVICENAME}</name></application_prototype></application_prototypes></item_prototype><item_prototype><name>{#ICMPDEVICENAME} ICMP availability</name><type>ZABBIX_ACTIVE</type><key>system.run[&quot;ping -n 4 {#ICMPDEVICEIP} | find /v /c \&quot;\&quot;&quot;]</key><history>1d</history><application_prototypes><application_prototype><name>ICMP for {#ICMPDEVICENAME}</name></application_prototype></application_prototypes><valuemap><name>Service state</name></valuemap><preprocessing><step><type>JAVASCRIPT</type><params>if(value &lt; 11) {
  return 0;
} else {
  return 1;
}</params></step></preprocessing><trigger_prototypes><trigger_prototype><expression>{last()}=0</expression><name>Недоступен узел {#ARPADDRESS} во внутренней сети</name><priority>INFO</priority></trigger_prototype></trigger_prototypes></item_prototype><item_prototype><name>{#ICMPDEVICENAME} ICMP packet loss</name><type>ZABBIX_ACTIVE</type><key>system.run[&quot;ping -n 4 {#ICMPDEVICEIP} | findstr [0-9]&quot;]</key><history>1d</history><application_prototypes><application_prototype><name>ICMP for {#ICMPDEVICENAME}</name></application_prototype></application_prototypes><preprocessing><step><type>JAVASCRIPT</type><params>var resultArr = value.split(&quot;\n&quot;);
var result = false;

resultArr.forEach(function(item, i, resultArr) {
  if(item.includes(&quot;%&quot;)) {
    
    var tmpResult = item.trim();
    var tmpArr = tmpResult.split(&quot;%&quot;);
    var tmpResult = tmpArr[0];
    var tmpArr = tmpResult.split(&quot;(&quot;);
    var tmpResult = tmpArr[1];
    result = tmpResult;
  }
});

return result;
</params></step></preprocessing></item_prototype></item_prototypes><preprocessing><step><type>JAVASCRIPT</type><params>var resultArr = value.split(&quot;!&quot;);

var resultArr1 = []; 

resultArr.forEach(function(item, i, resultArr ) {
  var tmp = item.replace(/\s/, '');
  tmp = tmp.replace(/\r/, '');
  tmp = tmp.replace(/\n/, '');
  resultArr1.push(tmp);
});

var resultArrUnique  = [];

resultArr1.forEach(function(item, i, resultArr1){
    if(resultArrUnique.indexOf(item) === -1) {
       resultArrUnique.push(item);
    }
});

var out = [];

resultArrUnique.forEach(function(item, i, resultArr ) {
  var tmp = item.replace(/\s/, '');
  tmp = tmp.replace(/\r/, '');
  tmp = tmp.replace(/\n/, '');
  var tmpArr = tmp.split(&quot;,&quot;);
  var tmp1 = {&quot;{#ICMPDEVICEIP}&quot;: tmpArr[0], &quot;{#ICMPDEVICENAME}&quot;: tmpArr[1]};
  out.push(tmp1);
});

var out1 = {&quot;data&quot; : out};

return JSON.stringify(out1);
</params></step></preprocessing></discovery_rule></discovery_rules><macros><macro><macro>{$ICMP_DEVICES}</macro><value>127.0.0.1,localhost ! 127.0.1.1,camera1</value></macro></macros></template></templates><value_maps><value_map><name>Service state</name><mappings><mapping><value>0</value><newvalue>Down</newvalue></mapping><mapping><value>1</value><newvalue>Up</newvalue></mapping></mappings></value_map><value_map><name>Zabbix Trigger Mapping</name><mappings><mapping><value>0</value><newvalue>OK</newvalue></mapping><mapping><value>1</value><newvalue>information</newvalue></mapping><mapping><value>2</value><newvalue>warning</newvalue></mapping><mapping><value>3</value><newvalue>average</newvalue></mapping><mapping><value>4</value><newvalue>high</newvalue></mapping><mapping><value>5</value><newvalue>disaster</newvalue></mapping></mappings></value_map></value_maps></zabbix_export>
