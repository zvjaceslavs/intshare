<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export><version>5.0</version><date>2021-10-19T06:15:58Z</date><groups><group><name>Templates</name></group></groups><templates><template><template>Template Stornext Quota</template><name>Template Stornext Quota</name><groups><group><name>Templates</name></group></groups><applications><application><name>StorNext</name></application></applications><items><item><name>Quota on all filesystems</name><type>HTTP_AGENT</type><key>snquotas.onfs.all</key><delay>30m</delay><history>7d</history><trends>0</trends><value_type>TEXT</value_type><applications><application><name>StorNext</name></application></applications><preprocessing><step><type>JSONPATH</type><params>$.directoryQuotas[?(@.type == 'dir')]</params></step></preprocessing><url>https://{HOST.IP}/sws/v2/quota/snquota</url><query_fields><query_field><name>username</name><value>{$USERNAME_VALUE_STORNEXT}</value></query_field><query_field><name>password</name><value>{$PASSWORD_VALUE_STORNEXT}</value></query_field><query_field><name>fsname</name><value>{$FSNAME_VALUE_STORNEXT}</value></query_field><query_field><name>action</name><value>listall</value></query_field><query_field><name>format</name><value>json</value></query_field></query_fields></item></items><discovery_rules><discovery_rule><name>Quotas</name><type>HTTP_AGENT</type><key>snquotas.discovery</key><delay>1h</delay><lifetime>7d</lifetime><item_prototypes><item_prototype><name>Used space on fs {#SNQUOTAID}</name><type>CALCULATED</type><key>snquotas.onfs.curSize.percent.[calc,{#SNQUOTAID}]</key><delay>30m</delay><history>7d</history><trends>30d</trends><value_type>FLOAT</value_type><units>%</units><params>last(&quot;snquotas.onfs.curSize.[{#SNQUOTAID}]&quot;) / (last(&quot;snquotas.onfs.softLimit.[{#SNQUOTAID}]&quot;) / 100)</params><applications><application><name>StorNext</name></application></applications><trigger_prototypes><trigger_prototype><expression>{last()}&gt;=100</expression><name>Free disk quota is less than 0% on fs {#SNQUOTAID}</name><status>DISABLED</status><priority>AVERAGE</priority><manual_close>YES</manual_close></trigger_prototype><trigger_prototype><expression>{last()}&gt;=95</expression><name>Free disk quota is less than 5% on fs {#SNQUOTAID}</name><status>DISABLED</status><priority>WARNING</priority><manual_close>YES</manual_close><dependencies><dependency><name>Free disk quota is less than 0% on fs {#SNQUOTAID}</name><expression>{Template Stornext Quota:snquotas.onfs.curSize.percent.[calc,{#SNQUOTAID}].last()}&gt;=100</expression></dependency></dependencies></trigger_prototype></trigger_prototypes></item_prototype><item_prototype><name>Quota on fs {#SNQUOTAID} Current Size</name><type>DEPENDENT</type><key>snquotas.onfs.curSize.[{#SNQUOTAID}]</key><delay>0</delay><history>7d</history><trends>30d</trends><value_type>FLOAT</value_type><units>TB</units><applications><application><name>StorNext</name></application></applications><preprocessing><step><type>JSONPATH</type><params>$.[?(@.name=='{#SNQUOTAID}')].curSize</params></step><step><type>JAVASCRIPT</type><params>work_value = value.slice(0, -3).slice(2)
if_value = value.slice(-3).slice(0,-2)
if (if_value == 'T') {
return(work_value * 1024);
} else if (if_value == 'P') {  
return(work_value * 1024 * 1024);
} else if (if_value == 'G') {   
return(work_value);
} else if (if_value == 'M') {    
return(work_value / 1024);
} else if (if_value == 'K') {  
return(work_value / 1024 / 1024);
} else {
return(work_value / 1024 / 1024 / 1024);
}</params></step><step><type>MULTIPLIER</type><params>0.001</params></step></preprocessing><master_item><key>snquotas.onfs.all</key></master_item></item_prototype><item_prototype><name>Quota on fs {#SNQUOTAID} Grace Period</name><type>DEPENDENT</type><key>snquotas.onfs.gracePeriod.[{#SNQUOTAID}]</key><delay>0</delay><history>7d</history><trends>30d</trends><units>days</units><applications><application><name>StorNext</name></application></applications><preprocessing><step><type>JSONPATH</type><params>$.[?(@.name=='{#SNQUOTAID}')].gracePeriod</params></step><step><type>JAVASCRIPT</type><params>work_value = value.slice(0, -3).slice(2)
if_value = value.slice(-3).slice(0,-2)
if (if_value == 'w') {
return(work_value * 7);
} else if (if_value == 'y') {  
return(work_value * 365);
} else if (if_value == 'd') {    
return(work_value);
} else if (if_value == 'h') {   
return(work_value / 24);
} else {
return(work_value / 1440);
}</params></step></preprocessing><master_item><key>snquotas.onfs.all</key></master_item></item_prototype><item_prototype><name>Quota on fs {#SNQUOTAID} Hard Limit</name><type>DEPENDENT</type><key>snquotas.onfs.hardLimit.[{#SNQUOTAID}]</key><delay>0</delay><history>7d</history><trends>30d</trends><value_type>FLOAT</value_type><units>TB</units><applications><application><name>StorNext</name></application></applications><preprocessing><step><type>JSONPATH</type><params>$.[?(@.name=='{#SNQUOTAID}')].hardLimit</params></step><step><type>JAVASCRIPT</type><params>work_value = value.slice(0, -3).slice(2)
if_value = value.slice(-3).slice(0,-2)
if (if_value == 'T') {
return(work_value * 1024);
} else if (if_value == 'P') {  
return(work_value * 1024 * 1024);
} else if (if_value == 'G') {   
return(work_value);
} else if (if_value == 'M') {    
return(work_value / 1024);
} else if (if_value == 'K') {  
return(work_value / 1024 / 1024);
} else {
return(work_value / 1024 / 1024 / 1024);
}</params></step><step><type>MULTIPLIER</type><params>0.001</params></step></preprocessing><master_item><key>snquotas.onfs.all</key></master_item></item_prototype><item_prototype><name>Quota on fs {#SNQUOTAID} Soft Limit</name><type>DEPENDENT</type><key>snquotas.onfs.softLimit.[{#SNQUOTAID}]</key><delay>0</delay><history>7d</history><trends>30d</trends><value_type>FLOAT</value_type><units>TB</units><applications><application><name>StorNext</name></application></applications><preprocessing><step><type>JSONPATH</type><params>$.[?(@.name=='{#SNQUOTAID}')].softLimit</params></step><step><type>JAVASCRIPT</type><params>work_value = value.slice(0, -3).slice(2)
if_value = value.slice(-3).slice(0,-2)
if (if_value == 'T') {
return(work_value * 1024);
} else if (if_value == 'P') {  
return(work_value * 1024 * 1024);
} else if (if_value == 'G') {   
return(work_value);
} else if (if_value == 'M') {    
return(work_value / 1024);
} else if (if_value == 'K') {  
return(work_value / 1024 / 1024);
} else {
return(work_value / 1024 / 1024 / 1024);
}</params></step><step><type>MULTIPLIER</type><params>0.001</params></step></preprocessing><master_item><key>snquotas.onfs.all</key></master_item></item_prototype></item_prototypes><graph_prototypes><graph_prototype><name>Quota on fs {#SNQUOTAID} Current Size</name><ymin_type_1>FIXED</ymin_type_1><graph_items><graph_item><color>1A7C11</color><item><host>Template Stornext Quota</host><key>snquotas.onfs.curSize.[{#SNQUOTAID}]</key></item></graph_item></graph_items></graph_prototype><graph_prototype><name>Used space on fs {#SNQUOTAID}</name><ymin_type_1>FIXED</ymin_type_1><graph_items><graph_item><color>1A7C11</color><calc_fnc>ALL</calc_fnc><item><host>Template Stornext Quota</host><key>snquotas.onfs.curSize.percent.[calc,{#SNQUOTAID}]</key></item></graph_item></graph_items></graph_prototype></graph_prototypes><url>https://{HOST.IP}/sws/v2/quota/snquota</url><query_fields><query_field><name>username</name><value>{$USERNAME_VALUE_STORNEXT}</value></query_field><query_field><name>password</name><value>{$PASSWORD_VALUE_STORNEXT}</value></query_field><query_field><name>fsname</name><value>{$FSNAME_VALUE_STORNEXT}</value></query_field><query_field><name>action</name><value>listall</value></query_field><query_field><name>format</name><value>json</value></query_field></query_fields><lld_macro_paths><lld_macro_path><lld_macro>{#SNQUOTAID}</lld_macro><path>$.name</path></lld_macro_path></lld_macro_paths><preprocessing><step><type>JSONPATH</type><params>$.directoryQuotas[?(@.type == 'dir')]</params></step></preprocessing></discovery_rule></discovery_rules><macros><macro><macro>{$FSNAME_VALUE_STORNEXT}</macro></macro><macro><macro>{$PASSWORD_VALUE_STORNEXT}</macro></macro><macro><macro>{$USERNAME_VALUE_STORNEXT}</macro></macro></macros></template></templates></zabbix_export>
