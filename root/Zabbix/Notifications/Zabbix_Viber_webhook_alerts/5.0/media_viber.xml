<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>5.0</version>
    <date>2021-07-09T11:36:08Z</date>
    <media_types>
        <media_type>
            <name>Viber webhook</name>
            <type>WEBHOOK</type>
            <parameters>
                <parameter>
                    <name>Message</name>
                    <value>{ALERT.MESSAGE}</value>
                </parameter>
                <parameter>
                    <name>Subject</name>
                    <value>{ALERT.SUBJECT}</value>
                </parameter>
                <parameter>
                    <name>To</name>
                    <value>{ALERT.SENDTO}</value>
                </parameter>
                <parameter>
                    <name>Token</name>
                    <value>your-auth-token</value>
                </parameter>
            </parameters>
            <attempts>10</attempts>
            <script>var Viber = {&#13;
    token: null,&#13;
    to: null,&#13;
    message: null,&#13;
    proxy: null,&#13;
&#13;
    sendMessage: function() {&#13;
        var params = {&#13;
            auth_token: Viber.token,&#13;
            receiver: Viber.to,&#13;
            'sender.name': 'alerter',&#13;
            type: 'text',&#13;
            text: Viber.message,&#13;
        },&#13;
        data,&#13;
        response,&#13;
        request = new CurlHttpRequest(),&#13;
        url = 'https://chatapi.viber.com/pa/send_message';&#13;
&#13;
        if (Viber.proxy) {&#13;
            request.SetProxy(Viber.proxy);&#13;
        }&#13;
&#13;
        request.AddHeader('Content-Type: application/json');&#13;
        data = JSON.stringify(params);&#13;
&#13;
        // Remove replace() function if you want to see the exposed token in the log file.&#13;
        Zabbix.Log(4, '[Viber Webhook] URL: ' + url.replace(Viber.token, '&lt;TOKEN&gt;'));&#13;
        Zabbix.Log(4, '[Viber Webhook] params: ' + data);&#13;
        response = request.Post(url, data);&#13;
        Zabbix.Log(4, '[Viber Webhook] HTTP code: ' + request.Status());&#13;
&#13;
        try {&#13;
            response = JSON.parse(response);&#13;
        }&#13;
        catch (error) {&#13;
            response = null;&#13;
        }&#13;
&#13;
        if (request.Status() !== 200 || response.status !== 0 || response.status_message !== 'ok') {&#13;
            if (typeof response.status_message === 'string') {&#13;
                throw response.status_message;&#13;
            }&#13;
            else {&#13;
                throw 'Unknown error. Check debug log for more information.'&#13;
            }&#13;
        }&#13;
    }&#13;
}&#13;
&#13;
try {&#13;
    var params = JSON.parse(value);&#13;
&#13;
    if (typeof params.Token === 'undefined') {&#13;
        throw 'Incorrect value is given for parameter &quot;Token&quot;: parameter is missing';&#13;
    }&#13;
&#13;
    Viber.token = params.Token;&#13;
&#13;
    if (params.HTTPProxy) {&#13;
        Viber.proxy = params.HTTPProxy;&#13;
    }&#13;
&#13;
    Viber.to = params.To;&#13;
    Viber.message = params.Subject + '\n' + params.Message;&#13;
    Viber.sendMessage();&#13;
&#13;
    return 'OK';&#13;
}&#13;
catch (error) {&#13;
    Zabbix.Log(4, '[Viber Webhook] notification failed: ' + error);&#13;
    throw 'Sending failed: ' + error + '.';&#13;
}</script>
            <timeout>10s</timeout>
            <description>See https://github.com/who0ps/build-a-bot-with-zero-coding/blob/master/README-ZBX.md for instructions.&#13;
Special thanks to https://github.com/vladislav805</description>
            <message_templates>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>`{HOST.NAME}` {EVENT.NAME}</subject>
                    <message>❌Problem started at {EVENT.TIME} on {EVENT.DATE}&#13;
Operational data: {EVENT.OPDATA}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>RECOVERY</operation_mode>
                    <subject>`{HOST.NAME}` {EVENT.RECOVERY.NAME} - resolved in {EVENT.DURATION}</subject>
                    <message>✅Problem started at {EVENT.TIME} on {EVENT.DATE} and resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&#13;
Operational data: {EVENT.OPDATA}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>UPDATE</operation_mode>
                    <subject>`{HOST.NAME}` {EVENT.NAME}</subject>
                    <message>☑️{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&#13;
_{EVENT.UPDATE.MESSAGE}_&#13;
&#13;
Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.</message>
                </message_template>
                <message_template>
                    <event_source>DISCOVERY</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}</subject>
                    <message>Discovery rule: {DISCOVERY.RULE.NAME}&#13;
&#13;
Device IP: {DISCOVERY.DEVICE.IPADDRESS}&#13;
Device DNS: {DISCOVERY.DEVICE.DNS}&#13;
Device status: {DISCOVERY.DEVICE.STATUS}&#13;
Device uptime: {DISCOVERY.DEVICE.UPTIME}&#13;
&#13;
Device service name: {DISCOVERY.SERVICE.NAME}&#13;
Device service port: {DISCOVERY.SERVICE.PORT}&#13;
Device service status: {DISCOVERY.SERVICE.STATUS}&#13;
Device service uptime: {DISCOVERY.SERVICE.UPTIME}</message>
                </message_template>
                <message_template>
                    <event_source>AUTOREGISTRATION</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>Autoregistration: {HOST.HOST}</subject>
                    <message>Host name: {HOST.HOST}&#13;
Host IP: {HOST.IP}&#13;
Agent port: {HOST.PORT}</message>
                </message_template>
                <message_template>
                    <event_source>INTERNAL</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>State: {ITEM.STATE}</subject>
                    <message>Host: {HOST.NAME}&#13;
Item: {ITEM.NAME}&#13;
</message>
                </message_template>
                <message_template>
                    <event_source>INTERNAL</event_source>
                    <operation_mode>RECOVERY</operation_mode>
                    <subject>State: {ITEM.STATE}</subject>
                    <message>Host: {HOST.NAME}&#13;
Item: {ITEM.NAME}</message>
                </message_template>
            </message_templates>
        </media_type>
    </media_types>
</zabbix_export>
