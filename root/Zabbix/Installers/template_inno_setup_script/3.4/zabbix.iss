; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Zabbix Agent"
#define MyAppVersion "3.4.6"
#define MyAppPublisher "Zabbix"
#define MyAppURL "http://www.zabbix.com/"
#define SrcDir "C:\Users\user\Downloads\zabbix_agents_3.4.6.win"
#define ZabbixServer "zabbix-serveur"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppID={{5F8D8BFD-C5EC-4FDD-A107-68B96EC352F8}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
DisableProgramGroupPage=yes
OutputDir={#SrcDir}\setup
OutputBaseFilename=Setup {#MyAppName} {#MyAppVersion}
Compression=lzma/Max
SolidCompression=true
SourceDir={#SrcDir}
ArchitecturesInstallIn64BitMode=x64
ArchitecturesAllowed=x64 x86
CloseApplications=False
UninstallDisplayIcon={app}\zabbix.ico
UninstallDisplayName={#MyAppName}
SetupIconFile={#SrcDir}\zabbix.ico
SetupLogging=True

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"
Name: "french"; MessagesFile: "compiler:Languages\French.isl"

[Files]
Source: "bin\win32\*"; DestDir: "{app}"; Flags: recursesubdirs 32bit; Check: NOT IsWin64
Source: "bin\win64\*"; DestDir: "{app}"; Flags: recursesubdirs 64bit; Check: IsWin64
Source: "conf\zabbix_agentd.conf"; DestDir: "{app}"; Flags: skipifsourcedoesntexist
Source: "conf\zabbix_agentd.win.conf"; DestDir: "{app}"; DestName: "zabbix_agentd.conf"; Flags: skipifsourcedoesntexist
Source: "zabbix.ico"; DestDir: "{app}"; DestName: "zabbix.ico"; Flags: skipifsourcedoesntexist

[Run]
Filename: "{app}\zabbix_agentd.exe"; Parameters: "-x"; Flags: runhidden; Description: "Arrêt du service"; Tasks: InstService
Filename: "{app}\zabbix_agentd.exe"; Parameters: "-i -c ""{app}\zabbix_agentd.conf"""; Flags: RunHidden; Description: "{cm:InstallService}"; Tasks: InstService
Filename: "{app}\zabbix_agentd.exe"; Parameters: "-s"; Flags: RunHidden; Description: "{cm:StartService}"; Tasks: InstService\StartService

[ThirdParty]
UseRelativePaths=True

[Tasks]
Name: "InstService"; Description: "{cm:InstallService}"; GroupDescription: "Service:"; Flags: checkablealone
Name: "InstService\StartService"; Description: "{cm:StartService}"; GroupDescription: "Service:"; Flags: checkablealone

[InnoIDE_Settings]
LogFile={#SrcDir}\zabbix_setup.log

[UninstallRun]
Filename: "{app}\zabbix_agentd.exe"; Parameters: "-x"; WorkingDir: "{app}"; Flags: waituntilterminated skipifdoesntexist runhidden
Filename: "{app}\zabbix_agentd.exe"; Parameters: "-d"; WorkingDir: "{app}"; Flags: waituntilterminated skipifdoesntexist runhidden

[CustomMessages]
french.InstallService=Installer le service
english.InstallService=Install the service
english.StartService=Start the service
french.StartService=Démarrer le service
french.ServerPageAddress=Indquez l'adresse réseau du serveur Zabbix:
english.ServerPageAddress=Enter Zabbix server's address:
english.ServerPageDesc=List of comma delimited IP addresses, optionally in CIDR notation, or hostnames of Zabbix servers. Incoming connections will be accepted only from the hosts listed here. If IPv6 support is enabled then '127.0.0.1', '::127.0.0.1', '::ffff:127.0.0.1' are treated equally and '::/0' will allow any IPv4 or IPv6 address. '0.0.0.0/0' can be used to allow any IPv4 address. Example: Server=127.0.0.1,192.168.1.0/24,::1,2001:db8::/32,zabbix.domain
french.ServerPageDesc=Liste d'adresses délimitées par une virgule, en notation CIDR ou sous la forme d'un nom d'hôte, du serveur Zabbix. Les connexions entrantes ne seront acceptées que pour les hôtes mentionnés dans cette liste. Si le support IPv6 est activé, alors les expressions '127.0.0.1', '::127.0.0.1', '::ffff:127.0.0.1' seront interprétées également et l'expression '::/0' permettra toutes les adresses IPv4 et IPv6. L'expression '0.0.0.0/0' peut être utilisée pour permettre toutes les adresses IPv4. Exemple: 127.0.0.1,192.168.1.0/24,::1,2001:db8::/32,zabbix.domain.
french.ServerPageTitle=Définition du nom d''hôte du serveur Zabbix.
english.ServerPageTitle=Zabbix server IP address
french.ServerPageBrief=Le nom du serveur Zabbix peut être indiqué sous la forme IP, nom court ou FQDN.
english.ServerPageBrief=The address of the Zabbix server can be provided as an IP, short name or FQDN.

[Code]
Const
 NET_FW_ACTION_ALLOW = 1;
 NET_FW_IP_PROTOCOL_TCP = 6;
 NET_FW_PROFILE2_DOMAIN = 1;
 NET_FW_PROFILE2_PRIVATE = 2;
 NET_FW_PROFILE2_PUBLIC = 4;
 APPNAME = '{#SetupSetting("AppName")}';

var
  ZabbixServerPage: TInputQueryWizardPage;
  ZabbixServer: String;

procedure RemoveFirewallApplicationRule(const RuleName: String);

var
  Policy2: Variant;
  RObject: Variant;
begin
  Policy2 := CreateOleObject('HNetCfg.FwPolicy2');
  RObject := Policy2.Rules;
  RObject.Remove(RuleName);
end;

Procedure AddFirewallApplicationRule(AppName, Description, ExecPath: String; Port, Profiles: Integer);

var
 fwPolicy2       : Variant;
 RulesObject     : Variant;
 NewRule,OldRule : Variant;
begin
  // Create the FwPolicy2 object.
  fwPolicy2   := CreateOleObject('HNetCfg.FwPolicy2');
  RulesObject := fwPolicy2.Rules;

  //Create a Rule Object.
  NewRule := CreateOleObject('HNetCfg.FWRule');

  NewRule.Name := AppName;
  NewRule.Description := Description;
  NewRule.Applicationname := ExecPath;
  NewRule.Protocol := NET_FW_IP_PROTOCOL_TCP;
  NewRule.LocalPorts := Port;
  NewRule.Enabled := True;
  //NewRule.Grouping := '';
  NewRule.Profiles := Profiles;
  NewRule.Action := NET_FW_ACTION_ALLOW;

  //Add a new rule
  //   First remove any existing rule, like in the case of updating.
  RulesObject.Remove(AppName);
  RulesObject.Add(NewRule);
end;

function ReplaceValue(const FileName, TagName, TagValue: string): Boolean;
var
  I: Integer;
  Tag: string;
  Line: string;
  TagPos: Integer;
  FileLines: TStringList;
begin
  Result := False;
  FileLines := TStringList.Create;
  try
    Tag := TagName + '=';
    FileLines.LoadFromFile(FileName);
    for I := 0 to FileLines.Count - 1 do
    begin
      Line := FileLines[I];
      StringChange(Line,' ', '');
      TagPos := Pos(Tag, Line);
      if TagPos = 1 then
      begin
        Result := True;
        Delete(Line, TagPos + Length(Tag), MaxInt);
        Line := Tag + TagValue;
        FileLines[I] := Line;
        FileLines.SaveToFile(FileName);
        Break;
      end
    end;
  finally
    FileLines.Free;
  end;
end;

procedure InitializeWizard();
var
   Title, Brief, Description: String;

begin
  Description := ExpandConstant('{cm:ServerPageDesc}');
  Title :=  ExpandConstant('{cm:ServerPageTitle}');
  Brief := ExpandConstant('{cm:ServerPageBrief}');

  ZabbixServerPage := CreateInputQueryPage(wpWelcome, Title, Brief, Description);
  ZabbixServerPage.Add(ExpandConstant('{cm:ServerPageAddress}'), False);
  ZabbixServerPage.Values[0] := ExpandConstant('{param:ZabbixServer|{#ZabbixServer}}');
end;

function NextButtonClick(CurPageID: Integer): Boolean;
begin
  Result := true;
  if CurPageID = 100 then
  begin
   ZabbixServer := ZabbixServerPage.Values[0];
   if ZabbixServer = '' then Result := false;
  end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
  ResultCode: Integer;
  app: string;
  ExitCode: Boolean;
begin
  app := ExpandConstant('{app}');

  if CurStep = ssInstall then
  begin
    ExitCode := Exec('C:\Windows\system32\net.exe', 'stop "Zabbix Agent"', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    if ( not ExitCode ) then
    begin
      MsgBox(SysErrorMessage(ResultCode), mbInformation, MB_OK);
    end;
  end;
  if CurStep = ssPostInstall then
  begin
    ReplaceValue(app+'\zabbix_agentd.conf', 'Server', ZabbixServer);
    ReplaceValue(app+'\zabbix_agentd.conf', 'ServerActive', ZabbixServer);
    AddFirewallApplicationRule(APPNAME, 'Zabbix monitoring agent', app +'\zabbix_agentd.exe', 10050, NET_FW_PROFILE2_PRIVATE + NET_FW_PROFILE2_PUBLIC + NET_FW_PROFILE2_DOMAIN);
  end;
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
  if CurUninstallStep=usPostUninstall then
	RemoveFirewallApplicationRule(APPNAME);
end;
