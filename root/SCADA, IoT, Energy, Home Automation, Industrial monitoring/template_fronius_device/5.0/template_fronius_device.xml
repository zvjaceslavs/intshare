<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export><version>5.0</version><date>2021-10-19T06:16:04Z</date><groups><group><name>Solar</name></group></groups><templates><template><template>Fronius Solar</template><name>Fronius Solar</name><description>Uses Fronius API V1 to query inverter&#13;
Make sure you update the following macros after linking the template&#13;
DEVICE_ID: the device you want to monitor (defaults to 1 if you only have 1 inverter).&#13;
Make sure your host has a hsotname of ip address configured. This must be the address of the Fronius device to monitor</description><groups><group><name>Solar</name></group></groups><applications><application><name>Solar</name></application></applications><items><item><name>Energy Generated Day</name><type>DEPENDENT</type><key>fronius.day_energy</key><delay>0</delay><history>1w</history><units>Wh</units><description>Total energy generated on current day by all inverters on the system</description><applications><application><name>Solar</name></application></applications><preprocessing><step><type>JAVASCRIPT</type><params>var apiResponse = JSON.parse(value);

var dayEnergy = null;
if (apiResponse.Body.Data.DAY_ENERGY != undefined) {
   dayEnergy = 0;
   for (var entry in apiResponse.Body.Data.DAY_ENERGY.Values) {
      dayEnergy += apiResponse.Body.Data.DAY_ENERGY.Values[entry];
   }
}
return dayEnergy ;</params></step></preprocessing><master_item><key>fronius.GetInverterRealtimeData</key></master_item></item><item><name>Energy Consumed Meter Total</name><type>DEPENDENT</type><key>fronius.EnergyReal_WAC_Sum_Consumed</key><delay>0</delay><history>1w</history><value_type>FLOAT</value_type><units>Wh</units><description>Smart meter energy consumption</description><applications><application><name>Solar</name></application></applications><preprocessing><step><type>JSONPATH</type><params>$.Body.Data.0.EnergyReal_WAC_Sum_Consumed</params></step></preprocessing><master_item><key>fronius.GetMeterRealtimeData</key></master_item></item><item><name>Energy Consumed Meter Day</name><type>CALCULATED</type><key>fronius.energy_consumed_meter_day</key><delay>30s</delay><history>1w</history><value_type>FLOAT</value_type><units>Wh</units><params>last(&quot;fronius.EnergyReal_WAC_Sum_Consumed&quot;)-last(&quot;fronius.energy_consumed_meter_startofday&quot;)</params><description>Energy consumption from the grid today</description><applications><application><name>Solar</name></application></applications></item><item><name>Energy Consumed Meter start-of-day</name><type>CALCULATED</type><key>fronius.energy_consumed_meter_startofday</key><delay>0;h0</delay><history>1w</history><value_type>FLOAT</value_type><units>Wh</units><params>last(&quot;fronius.EnergyReal_WAC_Sum_Consumed&quot;)</params><description>Energy consumption from the grid at the start of today</description><applications><application><name>Solar</name></application></applications></item><item><name>Device Error Code</name><type>DEPENDENT</type><key>fronius.ErrorCode</key><delay>0</delay><history>1w</history><description>error code for inverter {$DEVICE_ID}</description><applications><application><name>Solar</name></application></applications><preprocessing><step><type>JSONPATH</type><params>$.Body.Data.DeviceStatus.ErrorCode</params></step></preprocessing><master_item><key>fronius.GetInverterRealtimeData_CommonInverterDataAPI</key></master_item></item><item><name>Frequency meter</name><type>DEPENDENT</type><key>fronius.Frequency_Phase_Average</key><delay>0</delay><history>1w</history><value_type>FLOAT</value_type><units>Hz</units><description>Smart meter Frequency Phase Average</description><applications><application><name>Solar</name></application></applications><preprocessing><step><type>JSONPATH</type><params>$.Body.Data.0.Frequency_Phase_Average</params></step></preprocessing><master_item><key>fronius.GetMeterRealtimeData</key></master_item></item><item><name>InverterRealtimeDataAPI</name><type>HTTP_AGENT</type><key>fronius.GetInverterRealtimeData</key><delay>30s</delay><history>0</history><trends>0</trends><value_type>TEXT</value_type><description>GetInverterRealtimeData API call. Use dependent items to parse this</description><applications><application><name>Solar</name></application></applications><timeout>30s</timeout><url>http://{HOST.CONN}/solar_api/v1/GetInverterRealtimeData.cgi</url><query_fields><query_field><name>Scope</name><value>System</value></query_field></query_fields></item><item><name>InverterRealtimeData_3PInverterDataAPI</name><type>HTTP_AGENT</type><key>fronius.GetInverterRealtimeData_3PInverterDataAPI</key><delay>30s</delay><history>0</history><trends>0</trends><value_type>TEXT</value_type><description>GetInverterRealtimeData API call. Use dependent items to parse this</description><applications><application><name>Solar</name></application></applications><timeout>30s</timeout><url>http://{HOST.CONN}/solar_api/v1/GetInverterRealtimeData.cgi</url><query_fields><query_field><name>DataCollection</name><value>3PInverterData</value></query_field><query_field><name>Scope</name><value>Device</value></query_field><query_field><name>DeviceId</name><value>{$DEVICE_ID}</value></query_field></query_fields></item><item><name>InverterRealtimeData_CommonInverterDataAPI</name><type>HTTP_AGENT</type><key>fronius.GetInverterRealtimeData_CommonInverterDataAPI</key><delay>30s</delay><history>0</history><trends>0</trends><value_type>TEXT</value_type><description>GetInverterRealtimeData API call. Use dependent items to parse this</description><applications><application><name>Solar</name></application></applications><timeout>30s</timeout><url>http://{HOST.CONN}/solar_api/v1/GetInverterRealtimeData.cgi</url><query_fields><query_field><name>DataCollection</name><value>CommonInverterData</value></query_field><query_field><name>Scope</name><value>Device</value></query_field><query_field><name>DeviceId</name><value>{$DEVICE_ID}</value></query_field></query_fields></item><item><name>MeterRealtimeDataAPI</name><type>HTTP_AGENT</type><key>fronius.GetMeterRealtimeData</key><delay>30s</delay><history>0</history><trends>0</trends><value_type>TEXT</value_type><description>GetMeterRealtimeData API call. Use dependent items to parse this.&#13;
These items only work if your system has a smart meter installed</description><applications><application><name>Solar</name></application></applications><timeout>30s</timeout><url>http://{HOST.CONN}/solar_api/v1/GetMeterRealtimeData.cgi</url><query_fields><query_field><name>Scope</name><value>System</value></query_field></query_fields></item><item><name>OhmPilotRealtimeDataAPI</name><type>HTTP_AGENT</type><key>fronius.GetOhmPilotRealtimeData</key><delay>30s</delay><history>0</history><trends>0</trends><value_type>TEXT</value_type><description>GetOhmPilotRealtimeData API call. Use dependent items to parse this. Assumes you only have a single OhmPilot at device 0</description><applications><application><name>Solar</name></application></applications><timeout>30s</timeout><url>http://{HOST.CONN}/solar_api/v1/GetOhmPilotRealtimeData.cgi</url><query_fields><query_field><name>Scope</name><value>Device</value></query_field><query_field><name>DeviceId</name><value>0</value></query_field></query_fields></item><item><name>PowerFlowRealtimeDataAPI</name><type>HTTP_AGENT</type><key>fronius.GetPowerFlowRealtimeData</key><delay>30s</delay><history>0</history><trends>0</trends><value_type>TEXT</value_type><description>GetPowerFlowRealtimeData API call. Use dependent items to parse this</description><applications><application><name>Solar</name></application></applications><timeout>30s</timeout><url>http://{HOST.CONN}/solar_api/v1/GetPowerFlowRealtimeData.fcgi</url></item><item><name>DC Current</name><type>DEPENDENT</type><key>fronius.idc</key><delay>0</delay><history>1w</history><value_type>FLOAT</value_type><units>A</units><description>DC current for inverter {$DEVICE_ID}</description><applications><application><name>Solar</name></application></applications><preprocessing><step><type>JSONPATH</type><params>$.Body.Data.IDC.Value</params></step></preprocessing><master_item><key>fronius.GetInverterRealtimeData_CommonInverterDataAPI</key></master_item></item><item><name>Ohmpilot Error Code</name><type>DEPENDENT</type><key>fronius.ohmpilot.CodeOfError</key><delay>0</delay><history>1w</history><description>Error status of OhmPilot at device 0</description><applications><application><name>Solar</name></application></applications><preprocessing><step><type>JSONPATH</type><params>$.Body.Data.CodeOfError</params></step></preprocessing><master_item><key>fronius.GetOhmPilotRealtimeData</key></master_item></item><item><name>Ohmpilot Status Code</name><type>DEPENDENT</type><key>fronius.ohmpilot.CodeOfState</key><delay>0</delay><history>1w</history><description>status code of OhmPilot at device 0</description><applications><application><name>Solar</name></application></applications><preprocessing><step><type>JSONPATH</type><params>$.Body.Data.CodeOfState</params></step></preprocessing><master_item><key>fronius.GetOhmPilotRealtimeData</key></master_item></item><item><name>Ohmpilot Total Energy Consumed</name><type>DEPENDENT</type><key>fronius.ohmpilot.EnergyReal_WAC_Sum_Consumed</key><delay>0</delay><history>1w</history><units>Wh</units><description>total energy consumed by OhmPilot at device 0</description><applications><application><name>Solar</name></application></applications><preprocessing><step><type>JSONPATH</type><params>$.Body.Data.EnergyReal_WAC_Sum_Consumed</params></step></preprocessing><master_item><key>fronius.GetOhmPilotRealtimeData</key></master_item></item><item><name>Ohmpilot Power Consumed</name><type>DEPENDENT</type><key>fronius.ohmpilot.PowerReal_PAC_Sum</key><delay>0</delay><history>1w</history><description>Current power used by OhmPilot at device 0</description><applications><application><name>Solar</name></application></applications><preprocessing><step><type>JSONPATH</type><params>$.Body.Data.PowerReal_PAC_Sum</params></step></preprocessing><master_item><key>fronius.GetOhmPilotRealtimeData</key></master_item></item><item><name>Ohmpilot Sensor Temperature</name><type>DEPENDENT</type><key>fronius.ohmpilot.Temperature_Channel_1</key><delay>0</delay><history>1w</history><value_type>FLOAT</value_type><description>Temperature of sensor plugged into OhmPilot at device 0</description><applications><application><name>Solar</name></application></applications><preprocessing><step><type>JSONPATH</type><params>$.Body.Data.Temperature_Channel_1</params></step></preprocessing><master_item><key>fronius.GetOhmPilotRealtimeData</key></master_item></item><item><name>Power Generated</name><type>DEPENDENT</type><key>fronius.pac</key><delay>0</delay><history>1w</history><units>W</units><description>Total AC power being generated by all inverters on system</description><applications><application><name>Solar</name></application></applications><preprocessing><step><type>JAVASCRIPT</type><params>var apiResponse = JSON.parse(value);

var pac = null;
if (apiResponse.Body.Data.PAC != undefined) {
   pac = 0;
   for (var entry in apiResponse.Body.Data.PAC.Values) {
      pac += apiResponse.Body.Data.PAC.Values[entry];
   }
}
return pac;</params></step></preprocessing><master_item><key>fronius.GetInverterRealtimeData</key></master_item></item><item><name>Power Consumed meter</name><type>DEPENDENT</type><key>fronius.power_consumed_meter</key><delay>0</delay><history>1w</history><value_type>FLOAT</value_type><units>W</units><description>Smart meter power consumption</description><applications><application><name>Solar</name></application></applications><preprocessing><step><type>JSONPATH</type><params>$.Body.Data.0.PowerReal_P_Sum</params></step></preprocessing><master_item><key>fronius.GetMeterRealtimeData</key></master_item></item><item><name>Power Consumed Phase 1</name><type>DEPENDENT</type><key>fronius.power_consumed_p1_meter</key><delay>0</delay><history>1w</history><value_type>FLOAT</value_type><units>W</units><description>Smart meter power consumption</description><applications><application><name>Solar</name></application></applications><preprocessing><step><type>JSONPATH</type><params>$.Body.Data.0.PowerReal_P_Phase_1</params></step></preprocessing><master_item><key>fronius.GetMeterRealtimeData</key></master_item></item><item><name>Power Consumed Phase 2</name><type>DEPENDENT</type><key>fronius.power_consumed_p2_meter</key><delay>0</delay><history>1w</history><value_type>FLOAT</value_type><units>W</units><description>Smart meter power consumption</description><applications><application><name>Solar</name></application></applications><preprocessing><step><type>JSONPATH</type><params>$.Body.Data.0.PowerReal_P_Phase_2</params></step></preprocessing><master_item><key>fronius.GetMeterRealtimeData</key></master_item></item><item><name>Power Consumed Phase 3</name><type>DEPENDENT</type><key>fronius.power_consumed_p3_meter</key><delay>0</delay><history>1w</history><value_type>FLOAT</value_type><units>W</units><description>Smart meter power consumption</description><applications><application><name>Solar</name></application></applications><preprocessing><step><type>JSONPATH</type><params>$.Body.Data.0.PowerReal_P_Phase_3</params></step></preprocessing><master_item><key>fronius.GetMeterRealtimeData</key></master_item></item><item><name>Power Consumed excluding Smartloads</name><type>DEPENDENT</type><key>fronius.power_no_ohmpilot</key><delay>0</delay><history>1w</history><value_type>FLOAT</value_type><units>W</units><applications><application><name>Solar</name></application></applications><preprocessing><step><type>JAVASCRIPT</type><params>var apiResponse = JSON.parse(value);

// powerConsumption is provided as a negative value, whereas ohmPlot consumption is provided as positive.
var powerConsumption = apiResponse.Body.Data.Site.P_Load;

var ohmPilotConsumption = 0;
if (apiResponse.Body.Data.Smartloads != undefined) {
   if (apiResponse.Body.Data.Smartloads.Ohmpilots != undefined) {
      for (var ohmpilotId in apiResponse.Body.Data.Smartloads.Ohmpilots) {
         ohmPilotConsumption += apiResponse.Body.Data.Smartloads.Ohmpilots[ohmpilotId].P_AC_Total;
      }
   }
}

var consumption = (-powerConsumption) - ohmPilotConsumption;

// consumption can be negative sometimes which is silly in this situation. I think this happens
// because the P_Load and P_AC_Total from Fronius aren't measured at exactly the same time (even though it's in the same API call)
// Simply clamp the value to 0w
return Math.max(0, consumption);</params></step></preprocessing><master_item><key>fronius.GetPowerFlowRealtimeData</key></master_item></item><item><name>Power Grid</name><type>DEPENDENT</type><key>fronius.P_Grid</key><delay>0</delay><history>1w</history><value_type>FLOAT</value_type><units>W</units><applications><application><name>Solar</name></application></applications><preprocessing><step><type>JSONPATH</type><params>$.Body.Data.Site.P_Grid</params></step></preprocessing><master_item><key>fronius.GetPowerFlowRealtimeData</key></master_item></item><item><name>Power Consumed</name><type>DEPENDENT</type><key>fronius.P_Load</key><delay>0</delay><history>1w</history><value_type>FLOAT</value_type><units>W</units><applications><application><name>Solar</name></application></applications><preprocessing><step><type>JSONPATH</type><params>$.Body.Data.Site.P_Load</params></step><step><type>MULTIPLIER</type><params>-1</params></step></preprocessing><master_item><key>fronius.GetPowerFlowRealtimeData</key></master_item></item><item><name>Device Status Code</name><type>DEPENDENT</type><key>fronius.StatusCode</key><delay>0</delay><history>1w</history><description>status code for inverter {$DEVICE_ID}</description><applications><application><name>Solar</name></application></applications><preprocessing><step><type>JSONPATH</type><params>$.Body.Data.DeviceStatus.StatusCode</params></step></preprocessing><master_item><key>fronius.GetInverterRealtimeData_CommonInverterDataAPI</key></master_item></item><item><name>Energy Generated Total</name><type>DEPENDENT</type><key>fronius.total_energy</key><delay>0</delay><history>1w</history><units>Wh</units><description>Total energy generated on current day by all inverters on the system</description><applications><application><name>Solar</name></application></applications><preprocessing><step><type>JAVASCRIPT</type><params>var apiResponse = JSON.parse(value);

var totalEnergy = null;
if (apiResponse.Body.Data.DAY_ENERGY != undefined) {
   totalEnergy = 0;
   for (var entry in apiResponse.Body.Data.TOTAL_ENERGY.Values) {
      totalEnergy += apiResponse.Body.Data.TOTAL_ENERGY.Values[entry];
   }
}
return totalEnergy;</params></step></preprocessing><master_item><key>fronius.GetInverterRealtimeData</key></master_item></item><item><name>DC Voltage</name><type>DEPENDENT</type><key>fronius.udc</key><delay>0</delay><history>1w</history><value_type>FLOAT</value_type><units>V</units><description>DC Voltage for inverter {$DEVICE_ID}</description><applications><application><name>Solar</name></application></applications><preprocessing><step><type>JSONPATH</type><params>$.Body.Data.UDC.Value</params></step></preprocessing><master_item><key>fronius.GetInverterRealtimeData_CommonInverterDataAPI</key></master_item></item><item><name>Voltage Phase 1 inverter</name><type>DEPENDENT</type><key>fronius.vac_p1</key><delay>0</delay><history>1w</history><value_type>FLOAT</value_type><units>V</units><description>Voltage measured by inverter is only available when inverter is active (i.e. doesn't work at night time).&#13;
Use the equivalent meter readings if you have one</description><applications><application><name>Solar</name></application></applications><preprocessing><step><type>JAVASCRIPT</type><params>var apiResponse = JSON.parse(value);
var entry = &quot;UAC_L1&quot;;

// default to null value, which is discarded
var voltage = null; 
if (apiResponse.Body.Data[entry]!= undefined) {
   voltage = apiResponse.Body.Data[entry].Value;
}
return voltage;</params></step></preprocessing><master_item><key>fronius.GetInverterRealtimeData_3PInverterDataAPI</key></master_item></item><item><name>Voltage Phase 2 inverter</name><type>DEPENDENT</type><key>fronius.vac_p2</key><delay>0</delay><history>1w</history><value_type>FLOAT</value_type><units>V</units><description>Voltage measured by inverter is only available when inverter is active (i.e. doesn't work at night time).&#13;
Use the equivalent meter readings if you have one</description><applications><application><name>Solar</name></application></applications><preprocessing><step><type>JAVASCRIPT</type><params>var apiResponse = JSON.parse(value);
var entry = &quot;UAC_L2&quot;;

// default to null value, which is discarded
var voltage = null; 
if (apiResponse.Body.Data[entry]!= undefined) {
   voltage = apiResponse.Body.Data[entry].Value;
}
return voltage;</params></step></preprocessing><master_item><key>fronius.GetInverterRealtimeData_3PInverterDataAPI</key></master_item></item><item><name>Voltage Phase 3 inverter</name><type>DEPENDENT</type><key>fronius.vac_p3</key><delay>0</delay><history>1w</history><value_type>FLOAT</value_type><units>V</units><description>Voltage measured by inverter is only available when inverter is active (i.e. doesn't work at night time).&#13;
Use the equivalent meter readings if you have one</description><applications><application><name>Solar</name></application></applications><preprocessing><step><type>JAVASCRIPT</type><params>var apiResponse = JSON.parse(value);
var entry = &quot;UAC_L3&quot;;

// default to null value, which is discarded
var voltage = null; 
if (apiResponse.Body.Data[entry]!= undefined) {
   voltage = apiResponse.Body.Data[entry].Value;
}
return voltage;</params></step></preprocessing><master_item><key>fronius.GetInverterRealtimeData_3PInverterDataAPI</key></master_item></item><item><name>Power Generated Phase 1 inverter</name><type>DEPENDENT</type><key>fronius.va_generated_p1_inverter</key><delay>0</delay><history>1w</history><value_type>FLOAT</value_type><units>V</units><description>Voltage and current measurements supplied by inverter are only available when inverter is active (i.e. doesn't work at night time).&#13;
Use the equivalent meter readings if you have one</description><applications><application><name>Solar</name></application></applications><preprocessing><step><type>JAVASCRIPT</type><params>var apiResponse = JSON.parse(value);
var phase = &quot;1&quot;;
var voltageEntry = &quot;UAC_L&quot;+phase;
var currentEntry = &quot;IAC_L&quot;+phase;

// default to null value, which is discarded
var va = null; 
if (apiResponse.Body.Data[voltageEntry]!= undefined &amp;&amp; apiResponse.Body.Data[currentEntry]!= undefined) {
   va = apiResponse.Body.Data[voltageEntry ].Value * apiResponse.Body.Data[currentEntry].Value;
}
return va;</params></step></preprocessing><master_item><key>fronius.GetInverterRealtimeData_3PInverterDataAPI</key></master_item></item><item><name>Power Generated Phase 2 inverter</name><type>DEPENDENT</type><key>fronius.va_generated_p2_inverter</key><delay>0</delay><history>1w</history><value_type>FLOAT</value_type><units>V</units><description>Voltage and current measurements supplied by inverter are only available when inverter is active (i.e. doesn't work at night time).&#13;
Use the equivalent meter readings if you have one</description><applications><application><name>Solar</name></application></applications><preprocessing><step><type>JAVASCRIPT</type><params>var apiResponse = JSON.parse(value);
var phase = &quot;2&quot;;
var voltageEntry = &quot;UAC_L&quot;+phase;
var currentEntry = &quot;IAC_L&quot;+phase;

// default to null value, which is discarded
var va = null; 
if (apiResponse.Body.Data[voltageEntry]!= undefined &amp;&amp; apiResponse.Body.Data[currentEntry]!= undefined) {
   va = apiResponse.Body.Data[voltageEntry ].Value * apiResponse.Body.Data[currentEntry].Value;
}
return va;</params></step></preprocessing><master_item><key>fronius.GetInverterRealtimeData_3PInverterDataAPI</key></master_item></item><item><name>Power Generated Phase 3 inverter</name><type>DEPENDENT</type><key>fronius.va_generated_p3_inverter</key><delay>0</delay><history>1w</history><value_type>FLOAT</value_type><units>V</units><description>Voltage and current measurements supplied by inverter are only available when inverter is active (i.e. doesn't work at night time).&#13;
Use the equivalent meter readings if you have one</description><applications><application><name>Solar</name></application></applications><preprocessing><step><type>JAVASCRIPT</type><params>var apiResponse = JSON.parse(value);
var phase = &quot;3&quot;;
var voltageEntry = &quot;UAC_L&quot;+phase;
var currentEntry = &quot;IAC_L&quot;+phase;

// default to null value, which is discarded
var va = null; 
if (apiResponse.Body.Data[voltageEntry]!= undefined &amp;&amp; apiResponse.Body.Data[currentEntry]!= undefined) {
   va = apiResponse.Body.Data[voltageEntry ].Value * apiResponse.Body.Data[currentEntry].Value;
}
return va;</params></step></preprocessing><master_item><key>fronius.GetInverterRealtimeData_3PInverterDataAPI</key></master_item></item><item><name>Voltage Phase 1 meter</name><type>DEPENDENT</type><key>fronius.Voltage_AC_Phase_1_meter</key><delay>0</delay><history>1w</history><value_type>FLOAT</value_type><units>V</units><description>Smart meter voltage measurement</description><applications><application><name>Solar</name></application></applications><preprocessing><step><type>JSONPATH</type><params>$.Body.Data.0.Voltage_AC_Phase_1</params></step></preprocessing><master_item><key>fronius.GetMeterRealtimeData</key></master_item></item><item><name>Voltage Phase 2 meter</name><type>DEPENDENT</type><key>fronius.Voltage_AC_Phase_2_meter</key><delay>0</delay><history>1w</history><value_type>FLOAT</value_type><units>V</units><description>Smart meter voltage measurement</description><applications><application><name>Solar</name></application></applications><preprocessing><step><type>JSONPATH</type><params>$.Body.Data.0.Voltage_AC_Phase_2</params></step></preprocessing><master_item><key>fronius.GetMeterRealtimeData</key></master_item></item><item><name>Voltage Phase 3 meter</name><type>DEPENDENT</type><key>fronius.Voltage_AC_Phase_3_meter</key><delay>0</delay><history>1w</history><value_type>FLOAT</value_type><units>V</units><description>Smart meter voltage measurement</description><applications><application><name>Solar</name></application></applications><preprocessing><step><type>JSONPATH</type><params>$.Body.Data.0.Voltage_AC_Phase_3</params></step></preprocessing><master_item><key>fronius.GetMeterRealtimeData</key></master_item></item></items><macros><macro><macro>{$DEVICE_ID}</macro><value>1</value></macro></macros></template></templates><graphs><graph><name>Solar</name><graph_items><graph_item><drawtype>FILLED_REGION</drawtype><color>C8E6C9</color><yaxisside>RIGHT</yaxisside><item><host>Fronius Solar</host><key>fronius.day_energy</key></item></graph_item><graph_item><sortorder>1</sortorder><drawtype>FILLED_REGION</drawtype><color>FFCDD2</color><yaxisside>RIGHT</yaxisside><item><host>Fronius Solar</host><key>fronius.energy_consumed_meter_day</key></item></graph_item><graph_item><sortorder>2</sortorder><color>EF9A9A</color><item><host>Fronius Solar</host><key>fronius.P_Load</key></item></graph_item><graph_item><sortorder>3</sortorder><color>1A7C11</color><item><host>Fronius Solar</host><key>fronius.pac</key></item></graph_item><graph_item><sortorder>4</sortorder><color>FF4000</color><item><host>Fronius Solar</host><key>fronius.power_no_ohmpilot</key></item></graph_item></graph_items></graph></graphs></zabbix_export>
